{
    "docs": [
        {
            "location": "/",
            "text": "Welcome\n\n\n\n\nThis library was designed to use in the \nclassroom\n  \n\n\nIt has no dependencies, other than \nPython 3.x\n\nIt does not require \ninstalling\n, simply unzip and go  \n\n\nIt is meant to be as \nsimple\n as possible to get started with\n\nAllowing pupils to focus on learning programming & problem solving, not \ntkinter\n and GUI building  \n\n\nLet's make a sandwich\n\n\n\n\nBuilding a \nGUI\n is just like making a \nsandwich\n!  \n\n\nYou need a slice of bread on the top and bottom, and then a bunch of fillings in the middle...\n\n\n# import the library\nfrom rwbatools import gui\n\napp = gui()                 # top slice - CREATE the GUI\n\n# fillings go here...\n\napp.go()                    # bottom slice - START the GUI\n\n\n\n\nIf you forget the bread on the bottom, everything falls apart!\n\nOh, and if you try to put fillings under the bottom-slice, they won't be in the sandwich!\n\n\nAdd some fillings...\n\n\n\n\nWhen making a sandwich, you could just stuff it with fillings:  \n\n\n\n\naddFilling('cheese', 'chedar')\n  \n\n\naddFilling('ham', 'smoked')\n  \n\n\n\n\nBut it's often nice to prepare the fillings too:  \n\n\n\n\nsetFilling('cheese', 'grated')\n \n\n\nsetFilling('ham', 'sliced')\n \n\n\n\n\n# import the library\nfrom rwbatools import gui\n\napp = gui()                 # top slice - CREATE the GUI\n\napp.addLabel(\"title\", \"Welcome to RWBAtools\")   # add a label\napp.setLabelBg(\"title\", \"red\")                  # set the label's background to be red\n\napp.go()                    # bottom slice - START the GUI\n\n\n\n\n\n\nAnd, that's it...\n\nThe more \nfillings\n you put in your sandwich, and the more time you spend making them \nlook nice\n, the better it will taste!\n\n\nFoot-long sub?\n\n\n\n\nOf course, for most of us, a simple sandwich isn't enough...\n\nWe want to make a meal out of it!  \n\n\nIn which case, you're going to want to arrange your fillings a bit more cleverly!\n\n\n\n\nMeat on the bottom  \n\n\nThen the cheese  \n\n\nThen some salad  \n\n\nFinally the sauce!\n\n\n\n\nThe arrangement is paramount, nobody wants the sauce under the meat!\n\n\nBy default, the fillings are simply stacked on top of each other.  \n\n\nHowever, filling a sub is very similar to filling a spreadsheet.\n\nSimply tell each filling what layer (row) it's on, and what column it's in.\n\nAnd, if you're not planning on chopping a filling, it might stretch (span) across more than one column.  \n\n\nSee here\n for more.  \n\n\nfrom rwbatools import gui\n\n# function called by pressing the buttons\ndef press(btn):\n    if btn==\"Cancel\":\n        app.stop()\n    else:\n        print(\"User:\", app.getEntry('user'), \"Pass:\", app.getEntry('pass'))\n\napp = gui()\n\napp.addLabel(\"title\", \"Welcome to RWBAtools\", 0, 0, 2)  # Row 0, Column 0, Span 2\napp.addLabel(\"user\", \"Username:\", 1, 0)                 # Row 1, Column 0, no span\napp.addEntry(\"user\", 1, 1)                              # Row 1, Column 1, no span\napp.addLabel(\"pass\", \"Password:\", 2, 0)                 # Row 2, Column 0, no span\napp.addSecretEntry(\"pass\", 2, 1)                        # Row 2, Column 1, no span\napp.addButtons([\"Submit\", \"Cancel\"], press, 3, 0, 2)    # Row 3, Column 0, Span 2\n\napp.setEntryFocus(\"user\")\n\napp.go()\n\n\n\n\n\n\nAny extras?\n\n\n\n\nIt's possible to make changes to how the GUI looks\n\nFor starters, you can specify a name and size for your GUI when you make it:  \n\n\n\n\napp=gui(\"Login Window\", \"400x200\")\n  \n\n\n\n\nAnd, you can choose what kind of bread, and whether it's toasted:   \n\n\n\n\napp.setBg(\"Brown\")\n\n\napp.setFont(20)\n\n\n\n\nSee here\n for more.  \n\n\n\n\nMake your own!\n\n\n\n\nThat's about it for now.\n\nHave a look around, discover all of the different fillings available.\n\nAnd, investigate how best to \npresent \n your sandwich!",
            "title": "Welcome"
        },
        {
            "location": "/#welcome",
            "text": "This library was designed to use in the  classroom     It has no dependencies, other than  Python 3.x \nIt does not require  installing , simply unzip and go    It is meant to be as  simple  as possible to get started with \nAllowing pupils to focus on learning programming & problem solving, not  tkinter  and GUI building",
            "title": "Welcome"
        },
        {
            "location": "/#lets-make-a-sandwich",
            "text": "Building a  GUI  is just like making a  sandwich !    You need a slice of bread on the top and bottom, and then a bunch of fillings in the middle...  # import the library\nfrom rwbatools import gui\n\napp = gui()                 # top slice - CREATE the GUI\n\n# fillings go here...\n\napp.go()                    # bottom slice - START the GUI  If you forget the bread on the bottom, everything falls apart! \nOh, and if you try to put fillings under the bottom-slice, they won't be in the sandwich!",
            "title": "Let's make a sandwich"
        },
        {
            "location": "/#add-some-fillings",
            "text": "When making a sandwich, you could just stuff it with fillings:     addFilling('cheese', 'chedar')     addFilling('ham', 'smoked')      But it's often nice to prepare the fillings too:     setFilling('cheese', 'grated')    setFilling('ham', 'sliced')     # import the library\nfrom rwbatools import gui\n\napp = gui()                 # top slice - CREATE the GUI\n\napp.addLabel(\"title\", \"Welcome to RWBAtools\")   # add a label\napp.setLabelBg(\"title\", \"red\")                  # set the label's background to be red\n\napp.go()                    # bottom slice - START the GUI   And, that's it... \nThe more  fillings  you put in your sandwich, and the more time you spend making them  look nice , the better it will taste!",
            "title": "Add some fillings..."
        },
        {
            "location": "/#foot-long-sub",
            "text": "Of course, for most of us, a simple sandwich isn't enough... \nWe want to make a meal out of it!    In which case, you're going to want to arrange your fillings a bit more cleverly!   Meat on the bottom    Then the cheese    Then some salad    Finally the sauce!   The arrangement is paramount, nobody wants the sauce under the meat!  By default, the fillings are simply stacked on top of each other.    However, filling a sub is very similar to filling a spreadsheet. \nSimply tell each filling what layer (row) it's on, and what column it's in. \nAnd, if you're not planning on chopping a filling, it might stretch (span) across more than one column.    See here  for more.    from rwbatools import gui\n\n# function called by pressing the buttons\ndef press(btn):\n    if btn==\"Cancel\":\n        app.stop()\n    else:\n        print(\"User:\", app.getEntry('user'), \"Pass:\", app.getEntry('pass'))\n\napp = gui()\n\napp.addLabel(\"title\", \"Welcome to RWBAtools\", 0, 0, 2)  # Row 0, Column 0, Span 2\napp.addLabel(\"user\", \"Username:\", 1, 0)                 # Row 1, Column 0, no span\napp.addEntry(\"user\", 1, 1)                              # Row 1, Column 1, no span\napp.addLabel(\"pass\", \"Password:\", 2, 0)                 # Row 2, Column 0, no span\napp.addSecretEntry(\"pass\", 2, 1)                        # Row 2, Column 1, no span\napp.addButtons([\"Submit\", \"Cancel\"], press, 3, 0, 2)    # Row 3, Column 0, Span 2\n\napp.setEntryFocus(\"user\")\n\napp.go()",
            "title": "Foot-long sub?"
        },
        {
            "location": "/#any-extras",
            "text": "It's possible to make changes to how the GUI looks \nFor starters, you can specify a name and size for your GUI when you make it:     app=gui(\"Login Window\", \"400x200\")      And, you can choose what kind of bread, and whether it's toasted:      app.setBg(\"Brown\")  app.setFont(20)   See here  for more.",
            "title": "Any extras?"
        },
        {
            "location": "/#make-your-own",
            "text": "That's about it for now. \nHave a look around, discover all of the different fillings available. \nAnd, investigate how best to  present   your sandwich!",
            "title": "Make your own!"
        },
        {
            "location": "/Widgets/",
            "text": "Widgets\n\n\n\n\nIn a GUI, the fillings are known as \nwidgets\n.\n\nThere are lots of different widgets to chose from, each suited to a specific task.  \n\n\nEvery widget needs a \nTITLE\n.\n\nThis is a unique name for the widget, so that later you can get information from that widget, or change it.  \n\n\nGeneral Usage\n\n\n\n\nNearly all widgets provide the same three functions:\n\n\n\n\nAlways - \nADD\n a widget (with a unique title) - this creates the widget\n\n\nSometimes - \nGET\n the widget (using its unique title) - this gets the contents of the widget (usually done in a function)\n\n\nRarely - \nSET\n the widget (using its unique title) - this changes what's in the widget\n\n\n\n\nOn top of these, there is a common set of functions for \nchanging widgets\n.\n\nAs well as some specialist functions, unique to each widget (see below).  \n\n\nLabel\n\n\n\n\nLabels\n are used for displaying text in the GUI.  \n\n\n\n\nThey are great for titles, at the top of the GUI, usually spanning multiple columns.  \n\n\nThey are really useful before \nEntries\n and \nDrop-downs\n to explain their purpose.  \n\n\nAnd, they're very helpful at the bottom of the GUI, to show the results of an action.\n\n\n  \n\n\n\n\nfrom rwbatools import gui\n\napp = gui()\n\napp.addLabel(\"l1\", \"Label 1\")\napp.addLabel(\"l2\", \"Label 2\")\napp.addLabel(\"l3\", \"Label 3\")\napp.addLabel(\"l4\", \"Label 4\")\n# common set functions\napp.setLabelBg(\"l1\", \"red\")\napp.setLabelBg(\"l2\", \"yellow\")\napp.setLabelBg(\"l3\", \"purple\")\napp.setLabelBg(\"l4\", \"orange\")\n\napp.go()\n\n\n\n\nAdd Labels\n\n\n\n\n\n\n.addLabel(title, text=None)\n\n    As with all widgets, when you add a \nlabel\n, a title must be provided - to identify the \nlabel\n. This is then followed by an optional piece of text to display.\n\n\n\n\n\n\n.addEmptyLabel(title)\n\n    Does the same as add a \nlabel\n, except there''s no parameter to set any text.\n\n\n\n\n\n\n.addFlashLabel(title, text=None)\n\n    This adds a flashing \nlabel\n, that will alternate between the foreground and background colours.\n\n\n\n\n\n\nSet Labels\n\n\n\n\n\n\n.setLabel(title, text)\n\n    Change the contents of the \nlabel\n.\n\n\n\n\n\n\n.clearLabel(title)\n\n    Clear the contents of the \nlabel\n.\n\n\n\n\n\n\nGet Labels\n\n\n\n\n.getLabel(title)\n\n    Get the contents of the \nlabel\n.\n\n\n\n\nAuto-Labelled Widgets\n\n\n\n\nIt's possible to automatically include a \nlabel\n alongside some widgets.\n\nBoth the label and widget will be placed in the same grid space.\n\nSimply add the word \nLabel\n to the command when adding the widget:  \n\n\n\n\n.addLabelEntry(title)\n\n\n.addLabelNumericlEntry(title)\n\n\n.addLabelSecretlEntry(title)\n\n\n.addLabelOptionBox(title, values)\n\n\n.addLabelSpinBox(title, values)\n\n\n.addLabelSpinBoxRange(title, from, to)\n  \n\n\n\n\nSee the relevant section for a description of what the widget does.\n\n\nEntry\n\n\n\n\nEntries are used to capture input from the user. They take a single parameter - a title.\n\n\nThere are two special-case entries:\n\n\n\n\nNumericEntry - this only allows numbrs to be typed in.\n\n\nSecretEntry - this will show stars, instead of the letters typed - useful for capturing passwords.\n\n\n\n\n\n\nfrom rwbatools import gui\n\napp=gui()\n\napp.addEntry(\"e1\")\napp.addEntry(\"e2\")\napp.addEntry(\"e3\")\napp.addLabelEntry(\"Name\")\n\napp.setEntryDefault(\"e2\", \"Age here\")\n\napp.go()\n\n\n\n\nAdd Entries\n\n\n\n\n.addEntry(title)\n\n\n.addNumericEntry(title)\n\n\n\n\n.addSecretEntry(title)\n\n\nEach of these will add the specified type of Entry, using the title provided.\n\n\n\n\n\n\nSet Entries\n\n\n\n\n\n\n.setEntry(title, text)\n\n    This sets the contents of the specified entry box.\n\n\n\n\n\n\n.setEntryDefault(title, text)\n\n    This sets a default value to display in an entry box.\n\n    Once the user starts typing, it will disappear.\n\n    The text is centered, shown in a light gray font, and will not be returned by \n.getEntry(title)\n  \n\n\n\n\n\n\n.clearEntry(title)\n\n    This will clear the contents of the specified entry box.\n\n\n\n\n\n\n.clearAllEntries()\n\n    This will clear all the entry boxes in the GUI.\n\n\n\n\n\n\n.setFocus(title)\n\n    This will put the cursor in the specified entry box, so that the user can start typing without needing to click.\n\n\n\n\n\n\nGet Entries\n\n\n\n\n.getEntry(title)\n\n    This will return the contents of the spcified entry box.\n\n\n\n\nButton\n\n\n\n\nA clickable button, that will call a function.\n\nThese are the key to starting an interactive application.\n\nThe GUI is looping, waiting for something to happen.\n\nA button click is the classic way to start interacting with a GUI.\n\n\nWhenever any function is called by the GUI, the title of the widget that called it is passed as a parameter.\n\nThat way, multiple widgets can use the same function, but diffrent actions can be performed, depening on the name passed as a parameter.\n\n\nAdd Buttons\n\n\n\n\n.addButton(title, function)\n\n    Add a single button to the GUI, the text on the button will be the same as the button's title.\n\n    A function should be specified, which will be called when the button is clicked.\n\n\n\n\n\n\n    from rwbatools import gui\n\n    def press(btn):                 # the title of the button will be received as a parameter\n        print(btn)\n\n    app=gui()\n    app.addButton(\"One\", press)     # 3 buttons, each calling the same function\n    app.addButton(\"Two\", press)\n    app.addButton(\"Three\", press)\n    app.go()\n\n\n\n\n\n\n\n\n.addButtons(titles, functions)\n\n    It's possible to add a list of buttons to the GUI.\n\n    Pass a 1-dimensional or 2-dimensional list, and they will be rendered accordingly.\n    A single funciton can be passed, to use for all buttons.\n    Or a list of functions can be passed, which MUST correspond to the buttons.\n\n\n\n\n\n\n.addNamedButton(name, title, function)\n\n    By default, it's not possible to have two buttons with the same text.\n\n    If that's required, a named button should be used.\n\n    This allows a name and title to be set for a button.\n\n    The name will be displayed on the button, and the title passed to the function.\n\n\n\n\n\n\nSet Buttons\n\n\n\n\n\n\n.setButton(name, text)\n\n    This will change the text displayed on a button, but \nNOT\n the value passed as a paramter to the function.\n\n\n\n\n\n\n.setButtonImage(title, image)\n\n    This allows an image to be placed on a button, instead of the usual text.\n\n\n\n\n\n\nRadioButton\n\n\n\n\nA group of round boxes, only one of which can be selected.\n\nThese are great for getting a single value, for a multiple choice question.\n\n\n  \n\n\nfrom rwbatools import gui\n\napp=gui()\napp.addRadioButton(\"song\", \"Killer Queen\")\napp.addRadioButton(\"song\", \"Paradise City\")\napp.addRadioButton(\"song\", \"Parklife\")\napp.go()\n\n\n\n\nAdd RadioButtons\n\n\n\n\n.addRadioButton(title, name)\n\n    This will create a RadioButton grouped by the specified title.\n\n    This button will have the value of name.\n\n    Radio buttons are usually used in groups:\n\n\n\n\nSet RadioButtons\n\n\n\n\n\n\n.setRadioButton(title, value)\n\n    This will tick the specified RadioButton.\n\n\n\n\n\n\n.setRadioTick(title, tick=True)\n\n    It is possible to use tick-boxes instead of the classic circular radio-button.\n\n    Setting tick to True will convert all the radio-buttons for this title to tick boxes.\n\n\n\n\n\n\nGet RadioButtons\n\n\n\n\n.getRadioButton(title)\n\n    Gets the value of the selcted RadioButton, for the specified title.\n\n\n\n\n    from rwbatools import gui\n\n    def press(rb):\n        print(app.getRadioButton(\"song\"))\n\n    app=gui()\n    app.addRadioButton(\"song\", \"Killer Queen\")\n    app.addRadioButton(\"song\", \"Paradise City\")\n    app.setRadioButtonFunction(\"song\", press)   # call this funciton, when the RadioButton changes\n    app.addButton(\"PLAY\", press)\n    app.go()\n\n\n\n\nCheckBox\n\n\n\n\nA simple tick-box, with a label, that can be either ON or OFF.\n\n\n  \n\n\nfrom rwbatools import gui\n\napp=gui()\napp.setFont(20)\n\napp.addCheckBox(\"Apples\")\napp.addCheckBox(\"Pears\")\napp.addCheckBox(\"Oranges\")\napp.addCheckBox(\"Kiwis\")\n\napp.setCheckBox(\"Oranges\")\n\napp.go()\n\n\n\n\nAdd CheckBoxes\n\n\n\n\n.addCheckBox(title)\n\n    This creates a CheckBox, with the specified title.\n\n\n\n\nSet CheckBoxes\n\n\n\n\n.setCheckBox(title, ticked=True)\n\n    This will tick the CheckBox, or untick it if ticked is set to False.\n\n\n\n\nGet CheckBoxes\n\n\n\n\n.getCheckBox(title)\n\n    This will return True or False, depending on the state of the CheckBox.\n\n\n\n\nOptionBox\n\n\n\n\nA drop-down single-select option\n\n\nAdd OptionBoxes\n\n\n\n\n.addOptionBox(title, values)\n\n    This will create an OptionBox, adding the contents of the values list, in the order specified.\n\n\n\n\nSet OptionBoxes\n\n\n\n\n\n\n.changeOptionBox(title, newOptions)\n\n    This will replace the contents of the OptionBox, with the new list provided.\n\n\n\n\n\n\n.setOptionBox(title, position)\n\n    This will select the item in the list, at the position specified.\n\n\n\n\n\n\nGet OptionBoxes\n\n\n\n\n.getOptionBox(title)\n\n\n\n\nSpinBox\n\n\n\n\nA scrollable option\n\n\nAdd SpinBoxes\n\n\n\n\n.addSpinBox(title, values)\n\n\n.addSpinBoxRange(title, from, to)\n\n\n\n\nSet SpinBoxes\n\n\n\n\n.setSpinBox(title, value)\n\n\n.setSpinBoxPos(title, pos)\n\n\n\n\nGet SpinBoxes\n\n\n\n\n.getSpinBox(title)\n\n\n\n\nListBox\n\n\n\n\nA box containing a list of items, single or multi-select\n\n\nAdd ListBoxes\n\n\n\n\n.addListBox(title, values)\n\n\n.addListItem(title, item)\n\n\n.addListItems(title, items)\n\n\n\n\nSet ListBoxes\n\n\n\n\n.setListBoxRows(title)\n\n\n.setListSingle(list, single)\n\n\n.selectListItem(title, item)\n\n\n.updateListItems(title, items)\n\n\n.removeListItem(title, item)\n\n\n.clearListBox(title)\n\n\n\n\nGet ListBoxes\n\n\n\n\n.getListItems(title)\n\n\n\n\nScale\n\n\n\n\nA slider, that has a minimum & maximum value\n\n\nAdd Scales\n\n\n\n\n.addScale(title)\n\n\n\n\nSet Scales\n\n\n\n\n.setScaleRange(title from, to, curr=0)\n\n\n.orientScaleHor(title, hor=True)\n\n\n.setScale(title, pos)\n\n\n.showScaleValue(title, show=True)\n\n\n\n\nGet Scales\n\n\n\n\n.getScale(title)\n\n\n\n\nMessage\n\n\n\n\nLike a multi-line label\n\n\nAdd Messages\n\n\n\n\n.addMessage(title, text)\n\n\n.addEmptyMessage(title)\n\n\n\n\nSet Messages\n\n\n\n\n.clearMessage(title)\n\n\n.setMessage(title, text)\n\n\n\n\nTextArea\n\n\n\n\nA multi-line box for typing text\n\n\nAdd TextAreas\n\n\n\n\n.addTextArea(title)\n\n\n.addScrolledTextArea(title)\n\n\n\n\nSet TextAreas\n\n\n\n\n.setTextArea(title, text)\n\n\n.clearTextArea(title)\n\n\n.logTextArea(title)\n\n\n.textAreaChanged(title)\n\n\n\n\nGet TextAreas\n\n\n\n\n.getTextArea(title)\n\n\n\n\nMeter\n\n\n\n\nUsed for showing progress\n\n\n\n\n\n\nMeter\n\n\nShows a simple progress meter:  \n\n\n\n\n\n\naddMeter(name)\n\n    Adds a meter with the specified name.\n\n\n\n\n\n\nsetMeter(name, value, text=None)\n\n    Changes the specified meter to the specified value, between 0 and 100, with the optional text.\n\n\n\n\n\n\nsetMeterFill(name, colour)\n\n    Changes the fill colour of the specified meter.\n\n\n\n\n\n\ngetMeter(name)\n\n    Gets the value of the specified meter.\n\n\n\n\n\n\n\n\n\n\nSplitMeter\n\n\nShows two values, left & right\n\n\n\n\n\n\nDualMeter\n\n\nShows percentage left & right\n\n\n\n\n\n\nSeparator\n\n\n\n\nShows a horizontal line\n\n\n\n\n.addSeparator()\n\n\n\n\nLink/WebLink\n\n\n\n\nClickable text to call a function or launch a URL\n\n\nAdd Links\n\n\n\n\n\n\n.addLink(title, func)\n\n    Adds a \nhyperlink\n, that when clicked, will call the spcified function.\n\n\n\n\n\n\n.addWebLink(title, page)\n\n    Adds a \nhyperlink\n, that when clicked, will launch the default browser, and load the page parameter.",
            "title": "Widgets"
        },
        {
            "location": "/Widgets/#widgets",
            "text": "In a GUI, the fillings are known as  widgets . \nThere are lots of different widgets to chose from, each suited to a specific task.    Every widget needs a  TITLE . \nThis is a unique name for the widget, so that later you can get information from that widget, or change it.",
            "title": "Widgets"
        },
        {
            "location": "/Widgets/#general-usage",
            "text": "Nearly all widgets provide the same three functions:   Always -  ADD  a widget (with a unique title) - this creates the widget  Sometimes -  GET  the widget (using its unique title) - this gets the contents of the widget (usually done in a function)  Rarely -  SET  the widget (using its unique title) - this changes what's in the widget   On top of these, there is a common set of functions for  changing widgets . \nAs well as some specialist functions, unique to each widget (see below).",
            "title": "General Usage"
        },
        {
            "location": "/Widgets/#label",
            "text": "Labels  are used for displaying text in the GUI.     They are great for titles, at the top of the GUI, usually spanning multiple columns.    They are really useful before  Entries  and  Drop-downs  to explain their purpose.    And, they're very helpful at the bottom of the GUI, to show the results of an action.       from rwbatools import gui\n\napp = gui()\n\napp.addLabel(\"l1\", \"Label 1\")\napp.addLabel(\"l2\", \"Label 2\")\napp.addLabel(\"l3\", \"Label 3\")\napp.addLabel(\"l4\", \"Label 4\")\n# common set functions\napp.setLabelBg(\"l1\", \"red\")\napp.setLabelBg(\"l2\", \"yellow\")\napp.setLabelBg(\"l3\", \"purple\")\napp.setLabelBg(\"l4\", \"orange\")\n\napp.go()",
            "title": "Label"
        },
        {
            "location": "/Widgets/#add-labels",
            "text": ".addLabel(title, text=None) \n    As with all widgets, when you add a  label , a title must be provided - to identify the  label . This is then followed by an optional piece of text to display.    .addEmptyLabel(title) \n    Does the same as add a  label , except there''s no parameter to set any text.    .addFlashLabel(title, text=None) \n    This adds a flashing  label , that will alternate between the foreground and background colours.",
            "title": "Add Labels"
        },
        {
            "location": "/Widgets/#set-labels",
            "text": ".setLabel(title, text) \n    Change the contents of the  label .    .clearLabel(title) \n    Clear the contents of the  label .",
            "title": "Set Labels"
        },
        {
            "location": "/Widgets/#get-labels",
            "text": ".getLabel(title) \n    Get the contents of the  label .",
            "title": "Get Labels"
        },
        {
            "location": "/Widgets/#auto-labelled-widgets",
            "text": "It's possible to automatically include a  label  alongside some widgets. \nBoth the label and widget will be placed in the same grid space. \nSimply add the word  Label  to the command when adding the widget:     .addLabelEntry(title)  .addLabelNumericlEntry(title)  .addLabelSecretlEntry(title)  .addLabelOptionBox(title, values)  .addLabelSpinBox(title, values)  .addLabelSpinBoxRange(title, from, to)      See the relevant section for a description of what the widget does.",
            "title": "Auto-Labelled Widgets"
        },
        {
            "location": "/Widgets/#entry",
            "text": "Entries are used to capture input from the user. They take a single parameter - a title.  There are two special-case entries:   NumericEntry - this only allows numbrs to be typed in.  SecretEntry - this will show stars, instead of the letters typed - useful for capturing passwords.    from rwbatools import gui\n\napp=gui()\n\napp.addEntry(\"e1\")\napp.addEntry(\"e2\")\napp.addEntry(\"e3\")\napp.addLabelEntry(\"Name\")\n\napp.setEntryDefault(\"e2\", \"Age here\")\n\napp.go()",
            "title": "Entry"
        },
        {
            "location": "/Widgets/#add-entries",
            "text": ".addEntry(title)  .addNumericEntry(title)   .addSecretEntry(title)  Each of these will add the specified type of Entry, using the title provided.",
            "title": "Add Entries"
        },
        {
            "location": "/Widgets/#set-entries",
            "text": ".setEntry(title, text) \n    This sets the contents of the specified entry box.    .setEntryDefault(title, text) \n    This sets a default value to display in an entry box. \n    Once the user starts typing, it will disappear. \n    The text is centered, shown in a light gray font, and will not be returned by  .getEntry(title)       .clearEntry(title) \n    This will clear the contents of the specified entry box.    .clearAllEntries() \n    This will clear all the entry boxes in the GUI.    .setFocus(title) \n    This will put the cursor in the specified entry box, so that the user can start typing without needing to click.",
            "title": "Set Entries"
        },
        {
            "location": "/Widgets/#get-entries",
            "text": ".getEntry(title) \n    This will return the contents of the spcified entry box.",
            "title": "Get Entries"
        },
        {
            "location": "/Widgets/#button",
            "text": "A clickable button, that will call a function. \nThese are the key to starting an interactive application. \nThe GUI is looping, waiting for something to happen. \nA button click is the classic way to start interacting with a GUI.  Whenever any function is called by the GUI, the title of the widget that called it is passed as a parameter. \nThat way, multiple widgets can use the same function, but diffrent actions can be performed, depening on the name passed as a parameter.",
            "title": "Button"
        },
        {
            "location": "/Widgets/#add-buttons",
            "text": ".addButton(title, function) \n    Add a single button to the GUI, the text on the button will be the same as the button's title. \n    A function should be specified, which will be called when the button is clicked.        from rwbatools import gui\n\n    def press(btn):                 # the title of the button will be received as a parameter\n        print(btn)\n\n    app=gui()\n    app.addButton(\"One\", press)     # 3 buttons, each calling the same function\n    app.addButton(\"Two\", press)\n    app.addButton(\"Three\", press)\n    app.go()    .addButtons(titles, functions) \n    It's possible to add a list of buttons to the GUI. \n    Pass a 1-dimensional or 2-dimensional list, and they will be rendered accordingly.\n    A single funciton can be passed, to use for all buttons.\n    Or a list of functions can be passed, which MUST correspond to the buttons.    .addNamedButton(name, title, function) \n    By default, it's not possible to have two buttons with the same text. \n    If that's required, a named button should be used. \n    This allows a name and title to be set for a button. \n    The name will be displayed on the button, and the title passed to the function.",
            "title": "Add Buttons"
        },
        {
            "location": "/Widgets/#set-buttons",
            "text": ".setButton(name, text) \n    This will change the text displayed on a button, but  NOT  the value passed as a paramter to the function.    .setButtonImage(title, image) \n    This allows an image to be placed on a button, instead of the usual text.",
            "title": "Set Buttons"
        },
        {
            "location": "/Widgets/#radiobutton",
            "text": "A group of round boxes, only one of which can be selected. \nThese are great for getting a single value, for a multiple choice question.      from rwbatools import gui\n\napp=gui()\napp.addRadioButton(\"song\", \"Killer Queen\")\napp.addRadioButton(\"song\", \"Paradise City\")\napp.addRadioButton(\"song\", \"Parklife\")\napp.go()",
            "title": "RadioButton"
        },
        {
            "location": "/Widgets/#add-radiobuttons",
            "text": ".addRadioButton(title, name) \n    This will create a RadioButton grouped by the specified title. \n    This button will have the value of name. \n    Radio buttons are usually used in groups:",
            "title": "Add RadioButtons"
        },
        {
            "location": "/Widgets/#set-radiobuttons",
            "text": ".setRadioButton(title, value) \n    This will tick the specified RadioButton.    .setRadioTick(title, tick=True) \n    It is possible to use tick-boxes instead of the classic circular radio-button. \n    Setting tick to True will convert all the radio-buttons for this title to tick boxes.",
            "title": "Set RadioButtons"
        },
        {
            "location": "/Widgets/#get-radiobuttons",
            "text": ".getRadioButton(title) \n    Gets the value of the selcted RadioButton, for the specified title.       from rwbatools import gui\n\n    def press(rb):\n        print(app.getRadioButton(\"song\"))\n\n    app=gui()\n    app.addRadioButton(\"song\", \"Killer Queen\")\n    app.addRadioButton(\"song\", \"Paradise City\")\n    app.setRadioButtonFunction(\"song\", press)   # call this funciton, when the RadioButton changes\n    app.addButton(\"PLAY\", press)\n    app.go()",
            "title": "Get RadioButtons"
        },
        {
            "location": "/Widgets/#checkbox",
            "text": "A simple tick-box, with a label, that can be either ON or OFF.      from rwbatools import gui\n\napp=gui()\napp.setFont(20)\n\napp.addCheckBox(\"Apples\")\napp.addCheckBox(\"Pears\")\napp.addCheckBox(\"Oranges\")\napp.addCheckBox(\"Kiwis\")\n\napp.setCheckBox(\"Oranges\")\n\napp.go()",
            "title": "CheckBox"
        },
        {
            "location": "/Widgets/#add-checkboxes",
            "text": ".addCheckBox(title) \n    This creates a CheckBox, with the specified title.",
            "title": "Add CheckBoxes"
        },
        {
            "location": "/Widgets/#set-checkboxes",
            "text": ".setCheckBox(title, ticked=True) \n    This will tick the CheckBox, or untick it if ticked is set to False.",
            "title": "Set CheckBoxes"
        },
        {
            "location": "/Widgets/#get-checkboxes",
            "text": ".getCheckBox(title) \n    This will return True or False, depending on the state of the CheckBox.",
            "title": "Get CheckBoxes"
        },
        {
            "location": "/Widgets/#optionbox",
            "text": "A drop-down single-select option",
            "title": "OptionBox"
        },
        {
            "location": "/Widgets/#add-optionboxes",
            "text": ".addOptionBox(title, values) \n    This will create an OptionBox, adding the contents of the values list, in the order specified.",
            "title": "Add OptionBoxes"
        },
        {
            "location": "/Widgets/#set-optionboxes",
            "text": ".changeOptionBox(title, newOptions) \n    This will replace the contents of the OptionBox, with the new list provided.    .setOptionBox(title, position) \n    This will select the item in the list, at the position specified.",
            "title": "Set OptionBoxes"
        },
        {
            "location": "/Widgets/#get-optionboxes",
            "text": ".getOptionBox(title)",
            "title": "Get OptionBoxes"
        },
        {
            "location": "/Widgets/#spinbox",
            "text": "A scrollable option",
            "title": "SpinBox"
        },
        {
            "location": "/Widgets/#add-spinboxes",
            "text": ".addSpinBox(title, values)  .addSpinBoxRange(title, from, to)",
            "title": "Add SpinBoxes"
        },
        {
            "location": "/Widgets/#set-spinboxes",
            "text": ".setSpinBox(title, value)  .setSpinBoxPos(title, pos)",
            "title": "Set SpinBoxes"
        },
        {
            "location": "/Widgets/#get-spinboxes",
            "text": ".getSpinBox(title)",
            "title": "Get SpinBoxes"
        },
        {
            "location": "/Widgets/#listbox",
            "text": "A box containing a list of items, single or multi-select",
            "title": "ListBox"
        },
        {
            "location": "/Widgets/#add-listboxes",
            "text": ".addListBox(title, values)  .addListItem(title, item)  .addListItems(title, items)",
            "title": "Add ListBoxes"
        },
        {
            "location": "/Widgets/#set-listboxes",
            "text": ".setListBoxRows(title)  .setListSingle(list, single)  .selectListItem(title, item)  .updateListItems(title, items)  .removeListItem(title, item)  .clearListBox(title)",
            "title": "Set ListBoxes"
        },
        {
            "location": "/Widgets/#get-listboxes",
            "text": ".getListItems(title)",
            "title": "Get ListBoxes"
        },
        {
            "location": "/Widgets/#scale",
            "text": "A slider, that has a minimum & maximum value",
            "title": "Scale"
        },
        {
            "location": "/Widgets/#add-scales",
            "text": ".addScale(title)",
            "title": "Add Scales"
        },
        {
            "location": "/Widgets/#set-scales",
            "text": ".setScaleRange(title from, to, curr=0)  .orientScaleHor(title, hor=True)  .setScale(title, pos)  .showScaleValue(title, show=True)",
            "title": "Set Scales"
        },
        {
            "location": "/Widgets/#get-scales",
            "text": ".getScale(title)",
            "title": "Get Scales"
        },
        {
            "location": "/Widgets/#message",
            "text": "Like a multi-line label",
            "title": "Message"
        },
        {
            "location": "/Widgets/#add-messages",
            "text": ".addMessage(title, text)  .addEmptyMessage(title)",
            "title": "Add Messages"
        },
        {
            "location": "/Widgets/#set-messages",
            "text": ".clearMessage(title)  .setMessage(title, text)",
            "title": "Set Messages"
        },
        {
            "location": "/Widgets/#textarea",
            "text": "A multi-line box for typing text",
            "title": "TextArea"
        },
        {
            "location": "/Widgets/#add-textareas",
            "text": ".addTextArea(title)  .addScrolledTextArea(title)",
            "title": "Add TextAreas"
        },
        {
            "location": "/Widgets/#set-textareas",
            "text": ".setTextArea(title, text)  .clearTextArea(title)  .logTextArea(title)  .textAreaChanged(title)",
            "title": "Set TextAreas"
        },
        {
            "location": "/Widgets/#get-textareas",
            "text": ".getTextArea(title)",
            "title": "Get TextAreas"
        },
        {
            "location": "/Widgets/#meter",
            "text": "Used for showing progress",
            "title": "Meter"
        },
        {
            "location": "/Widgets/#meter_1",
            "text": "Shows a simple progress meter:      addMeter(name) \n    Adds a meter with the specified name.    setMeter(name, value, text=None) \n    Changes the specified meter to the specified value, between 0 and 100, with the optional text.    setMeterFill(name, colour) \n    Changes the fill colour of the specified meter.    getMeter(name) \n    Gets the value of the specified meter.",
            "title": "Meter"
        },
        {
            "location": "/Widgets/#splitmeter",
            "text": "Shows two values, left & right",
            "title": "SplitMeter"
        },
        {
            "location": "/Widgets/#dualmeter",
            "text": "Shows percentage left & right",
            "title": "DualMeter"
        },
        {
            "location": "/Widgets/#separator",
            "text": "Shows a horizontal line   .addSeparator()",
            "title": "Separator"
        },
        {
            "location": "/Widgets/#linkweblink",
            "text": "Clickable text to call a function or launch a URL",
            "title": "Link/WebLink"
        },
        {
            "location": "/Widgets/#add-links",
            "text": ".addLink(title, func) \n    Adds a  hyperlink , that when clicked, will call the spcified function.    .addWebLink(title, page) \n    Adds a  hyperlink , that when clicked, will launch the default browser, and load the page parameter.",
            "title": "Add Links"
        },
        {
            "location": "/Images/",
            "text": "Images\n\n\n\n\nDefault image support in RWBAtools assumes no extra libraries. That means it should only support \n.GIF\n and \n.PPM\n images.\n\nHowever, code is included to allow the use of \n.PNG\n and \n.JPG\n files. RWBAtools will convert these to \n.GIF\n files, before loading.\n\nConverting image files is \nSLOW\n, so it's best to stick to \n.GIF\n files!\n\n\nGetting the path for images right can be \nTRICKY\n\nIt's therefore best to put images in the same folder as your Python code.\n\n\nAdd Images\n\n\n\n\n\n\n.addImage(title, file)\n\n    Adding an image is exactly the same as adding any other widget.\n\n    Simply give the image a title, and pass the filename.\n\n\nRWBAtools will confirm the file is valid, and will also check the file contains the type specified.\n\n\nIf an animated \n.GIF\n is found, then it will be animated within the GUI.\n\n\n\n\n\n\nChange Images\n\n\n\n\n\n\n.setImage(title, image)\n\n    This will replace the existing image with the new one.\n\n\n\n\n\n\n.setImageMouseOver(title, image)\n\n    Set an image to show, instead of the stored image, while the mouse is over this widget.  \n\n\n\n\n\n\n.setImageSize(title, width, height)\n\n    This will set the size of the container for the image, cropping anything that doesn't fit.\n\n\n\n\n\n\n.zoomImage(title, mod)\n\n    This will attempt to change the size of the image.\n\n    It's very rudimentary, and usually doesn't look good - but is fun to play around with (try adding a slider under an image...)\n\n    Negative values will shrink the image, positive will enlarge the image.  \n\n\n\n\n\n\n.shrinkImage(title, mod)\n & \n.growImage(title, mod)\n\n    These are wrappers for the above function, simply causing the image to shrink or grow accordingly.\n\n\n\n\n\n\nChange Image Animation\n\n\nIf an image is animated, it's possible to control it.\n\n\n\n\n\n\n.setAnimationSpeed(title, speed)\n\n    This will change the speed an image is animated at.\n\n\n\n\n\n\n.stopAnimation(title)\n & \n.startAnimation(title)\n\n    These will start and stop the animation of an image.\n\n\n\n\n\n\nSet Background Images\n\n\nIt's also possible to add a background image to your GUI.\n\nIf you have lots of grouped widgets, this can look quite \nUGLY\n, as all of the widgets are drawn on top.  \n\n\n\n\n\n\n.setBgImage(image)\n\n    Set the image for the background.\n\n\n\n\n\n\n.removeBgImage(image)\n\n    Remove the image form the background.",
            "title": "Images"
        },
        {
            "location": "/Images/#images",
            "text": "Default image support in RWBAtools assumes no extra libraries. That means it should only support  .GIF  and  .PPM  images. \nHowever, code is included to allow the use of  .PNG  and  .JPG  files. RWBAtools will convert these to  .GIF  files, before loading. \nConverting image files is  SLOW , so it's best to stick to  .GIF  files!  Getting the path for images right can be  TRICKY \nIt's therefore best to put images in the same folder as your Python code.",
            "title": "Images"
        },
        {
            "location": "/Images/#add-images",
            "text": ".addImage(title, file) \n    Adding an image is exactly the same as adding any other widget. \n    Simply give the image a title, and pass the filename.  RWBAtools will confirm the file is valid, and will also check the file contains the type specified.  If an animated  .GIF  is found, then it will be animated within the GUI.",
            "title": "Add Images"
        },
        {
            "location": "/Images/#change-images",
            "text": ".setImage(title, image) \n    This will replace the existing image with the new one.    .setImageMouseOver(title, image) \n    Set an image to show, instead of the stored image, while the mouse is over this widget.      .setImageSize(title, width, height) \n    This will set the size of the container for the image, cropping anything that doesn't fit.    .zoomImage(title, mod) \n    This will attempt to change the size of the image. \n    It's very rudimentary, and usually doesn't look good - but is fun to play around with (try adding a slider under an image...) \n    Negative values will shrink the image, positive will enlarge the image.      .shrinkImage(title, mod)  &  .growImage(title, mod) \n    These are wrappers for the above function, simply causing the image to shrink or grow accordingly.",
            "title": "Change Images"
        },
        {
            "location": "/Images/#change-image-animation",
            "text": "If an image is animated, it's possible to control it.    .setAnimationSpeed(title, speed) \n    This will change the speed an image is animated at.    .stopAnimation(title)  &  .startAnimation(title) \n    These will start and stop the animation of an image.",
            "title": "Change Image Animation"
        },
        {
            "location": "/Images/#set-background-images",
            "text": "It's also possible to add a background image to your GUI. \nIf you have lots of grouped widgets, this can look quite  UGLY , as all of the widgets are drawn on top.      .setBgImage(image) \n    Set the image for the background.    .removeBgImage(image) \n    Remove the image form the background.",
            "title": "Set Background Images"
        },
        {
            "location": "/Sound/",
            "text": "Sound\n\n\n\n\nSound is only supported in Windows, using the Winsound API.\n\nTherefore, only \n.WAV\n files will work.\n\n\nPlaying Sound Files\n\n\n\n\n\n\n\n\n.playSound(sound, wait=False)\n\n\nPlay the named sound file.\n\nBy default, the sound is played asynchronously, meaning the function will return immediately, even though the sound hasn't finished playing.\n\nIt is possible to override this, by setting wait to True. This is not recommended though, as the GUI will become unresponsive.\n\n\n\n\n\n\n.stopSound()\n\n\nThis will stop whatever sound is currently being played.\n\n\n\n\n\n\n.loopSound(sound)\n\n\nThis will play the named sound in a loop.\n\n\n\n\n\n\nPlaying Built-In Sounds\n\n\n\n\n\n\n\n\n.soundError()\n\n\nThis will sound a simple error beep.\n\n\n\n\n\n\n.soundWarning()\n\n\nThis will sound a simple warning beep.\n\n\n\n\n\n\nPlaying Musical Notes\n\n\n\n\n\n\n\n\n.playNote(note, duration=200)\n\n\nSupport is built in for playing musical notes, using winsound.\nThe note can be a numeric frequency, or a String note.\nThe duration can be a number in milliseconds, or a String duration.\n\n\nOver 50 String notes are available, such as:\n\n\n\n\nf#1 = 46\n\n\nb7 = 3951\n\n\ng9 = 12543  \n\n\n\n\nThe following String durations are supported:\n\n\n\n\nBREVE = 2000\n\n\nSEMIBREVE = 1000\n\n\nMINIM = 500\n\n\nCROTCHET = 250\n\n\nQUAVER = 125\n\n\nSEMIQUAVER = 63\n\n\nDEMISEMIQUAVER = 32\n\n\nHEMIDEMISEMIQUAVER = 16\n\n\n\n\nThese can be accessed through the variables \ngui.NOTES\n and \ngui.DURATIONS",
            "title": "Sounds"
        },
        {
            "location": "/Sound/#sound",
            "text": "Sound is only supported in Windows, using the Winsound API. \nTherefore, only  .WAV  files will work.",
            "title": "Sound"
        },
        {
            "location": "/Sound/#playing-sound-files",
            "text": ".playSound(sound, wait=False)  Play the named sound file. \nBy default, the sound is played asynchronously, meaning the function will return immediately, even though the sound hasn't finished playing. \nIt is possible to override this, by setting wait to True. This is not recommended though, as the GUI will become unresponsive.    .stopSound()  This will stop whatever sound is currently being played.    .loopSound(sound)  This will play the named sound in a loop.",
            "title": "Playing Sound Files"
        },
        {
            "location": "/Sound/#playing-built-in-sounds",
            "text": ".soundError()  This will sound a simple error beep.    .soundWarning()  This will sound a simple warning beep.",
            "title": "Playing Built-In Sounds"
        },
        {
            "location": "/Sound/#playing-musical-notes",
            "text": ".playNote(note, duration=200)  Support is built in for playing musical notes, using winsound.\nThe note can be a numeric frequency, or a String note.\nThe duration can be a number in milliseconds, or a String duration.  Over 50 String notes are available, such as:   f#1 = 46  b7 = 3951  g9 = 12543     The following String durations are supported:   BREVE = 2000  SEMIBREVE = 1000  MINIM = 500  CROTCHET = 250  QUAVER = 125  SEMIQUAVER = 63  DEMISEMIQUAVER = 32  HEMIDEMISEMIQUAVER = 16   These can be accessed through the variables  gui.NOTES  and  gui.DURATIONS",
            "title": "Playing Musical Notes"
        },
        {
            "location": "/Bars/",
            "text": "Toolbars, Menubars & Statusbars\n\n\n\n\nToolbars and Menubars are features common to most GUIs, you'll be used to seeing them along the top of apps, such as MS Word.\n\nStatusbars are also useful features, they allow you to show information about what's going on in a GUI, usually along the bottom of the app.  \n\n\nToolbar\n\n\n\n\nToolbars (sometimes known as ribbons) appear across the top og a GUI.\n\nThey offer a series of buttons to click, which change settings/functionality in a GUI.\n\n\nCreate Toolbars\n\n\n\n\n.addToolbar(names, funcs)\n\n    Will add a list of buttons along the top, in a toolbar. Each button will call the corresponding function.\n\n    If only one function is supplied, they will all call the same function.\n\n    A bundle of free images is available, if the name used for the toolbar matches the nam of an image, an image will be used.  \n\n\n\n\nSet Toolbars\n\n\n\n\n.setToolbarImage(name, image)\n\nWill set an image for the corresponding button in the toolbar.\n\n\n\n\nMenubar\n\n\n\n\nAdds a standard Menubar along the top of the GUI\nThe menubar will show, once the first menu has been added.\nYou can add a single menu option, or a list of menu options.\n\n\nCreate Menus\n\n\n\n\n\n\n.addMenu(title, function)\n\n    Adds a single menu option, that will call the specified function.\n\n\n\n\n\n\n.addMenuList(title, names, functions, tearable=False)\n\n    Will create a top-level menu, with the specified title.\n\n    Within the menu will be the list of names, each calling the corresponding function in the function list.\n\n    If only one function is provided, all menus will call the same function.\n\n    If the menu name is a '-', then a separator will be added to the menu.\n\n    If tearable is set to True, then the menu can be undocked.  \n\n\n\n\n\n\n.createMenu(title, tearable=False)\n\n    Will create a top-level menu, to add memnu items to.\n\n\n\n\n\n\n.addMenuItem(title, item, func=None)\n\n    Add a sub-menu to the named top-level menu, with the specified function\n    If the menu name is a '-', then a separator will be added to the menu.\n\n\n\n\n\n\n.addMenuSeparator(title)\n\n    Add a separator to the named menu.\n\n\n\n\n\n\n.addMenuCheckBox(title, name)\n\n    Add a check box, to the named menu, with the specified name.\n\n\n\n\n\n\n.addMenuRadioButton(title, menu, name, value)\n\n    Add a radio button, to the named menu, grouped by name, with the specified value.\n\n\n\n\n\n\nSet Menus\n\n\n\n\n\n\n.setMenuCheckBox(title, menu)\n\n    Inverts the specified check box, in the named menu.\n\n\n\n\n\n\n.setMenuRadioButton(title, menu, value)\n\n    Selects the specified value, of the specified radio button, in the named menu.\n\n\n\n\n\n\nGet Menus\n\n\n\n\n\n\n.getMenuCheckBox(title, menu)\n\n    Get the value of the specified check box, from the named menu.\n\n    Returns True or False.\n\n\n\n\n\n\n.getMenuRadioButton(title, menu)\n\n    Get the value of the specified radio button, from the named menu.\n\n    Returns the value of the checked radio button.\n\n\n\n\n\n\nStatusbar\n\n\n\n\nAdds a statusbar along the bottom of the GUI.\nThis can be used for easy debugging, or as info for the user.\n\n\nCreate Statuses\n\n\n\n\n.addStatus(header=\"\", fields=1, side=None)\n\n    This turns the statusbar on, and if a header is supplied, will prepend the header before every message.\n\n    If fields is populated, it''s possible to have multiple status bixes, each addressable by a number.\n\n    Side can be set as LEFT/RIGHT to make the fields appear rom the left or rigt side, otherwise they will stretch equally.\n\n\n\n\nSet Statuses\n\n\n\n\n\n\n.setStatus(text, field=0)\n\n    This updates the contents of the statusbar. Again, if a header was set when adding the statusbar, that will be prepended to the message.\n\n    If multiple fields were created, a position can be supplied to populate.\n\n\n\n\n\n\n.clearStatus(field=0)\n\n    Clear anything displayed in the statusbar, along with any header that might be set.\n\n\n\n\n\n\n.setStatusWidth(width, field=0)\n\n    Set the width of the specified status field.",
            "title": "Bars"
        },
        {
            "location": "/Bars/#toolbars-menubars-statusbars",
            "text": "Toolbars and Menubars are features common to most GUIs, you'll be used to seeing them along the top of apps, such as MS Word. \nStatusbars are also useful features, they allow you to show information about what's going on in a GUI, usually along the bottom of the app.",
            "title": "Toolbars, Menubars &amp; Statusbars"
        },
        {
            "location": "/Bars/#toolbar",
            "text": "Toolbars (sometimes known as ribbons) appear across the top og a GUI. \nThey offer a series of buttons to click, which change settings/functionality in a GUI.",
            "title": "Toolbar"
        },
        {
            "location": "/Bars/#create-toolbars",
            "text": ".addToolbar(names, funcs) \n    Will add a list of buttons along the top, in a toolbar. Each button will call the corresponding function. \n    If only one function is supplied, they will all call the same function. \n    A bundle of free images is available, if the name used for the toolbar matches the nam of an image, an image will be used.",
            "title": "Create Toolbars"
        },
        {
            "location": "/Bars/#set-toolbars",
            "text": ".setToolbarImage(name, image) \nWill set an image for the corresponding button in the toolbar.",
            "title": "Set Toolbars"
        },
        {
            "location": "/Bars/#menubar",
            "text": "Adds a standard Menubar along the top of the GUI\nThe menubar will show, once the first menu has been added.\nYou can add a single menu option, or a list of menu options.",
            "title": "Menubar"
        },
        {
            "location": "/Bars/#create-menus",
            "text": ".addMenu(title, function) \n    Adds a single menu option, that will call the specified function.    .addMenuList(title, names, functions, tearable=False) \n    Will create a top-level menu, with the specified title. \n    Within the menu will be the list of names, each calling the corresponding function in the function list. \n    If only one function is provided, all menus will call the same function. \n    If the menu name is a '-', then a separator will be added to the menu. \n    If tearable is set to True, then the menu can be undocked.      .createMenu(title, tearable=False) \n    Will create a top-level menu, to add memnu items to.    .addMenuItem(title, item, func=None) \n    Add a sub-menu to the named top-level menu, with the specified function\n    If the menu name is a '-', then a separator will be added to the menu.    .addMenuSeparator(title) \n    Add a separator to the named menu.    .addMenuCheckBox(title, name) \n    Add a check box, to the named menu, with the specified name.    .addMenuRadioButton(title, menu, name, value) \n    Add a radio button, to the named menu, grouped by name, with the specified value.",
            "title": "Create Menus"
        },
        {
            "location": "/Bars/#set-menus",
            "text": ".setMenuCheckBox(title, menu) \n    Inverts the specified check box, in the named menu.    .setMenuRadioButton(title, menu, value) \n    Selects the specified value, of the specified radio button, in the named menu.",
            "title": "Set Menus"
        },
        {
            "location": "/Bars/#get-menus",
            "text": ".getMenuCheckBox(title, menu) \n    Get the value of the specified check box, from the named menu. \n    Returns True or False.    .getMenuRadioButton(title, menu) \n    Get the value of the specified radio button, from the named menu. \n    Returns the value of the checked radio button.",
            "title": "Get Menus"
        },
        {
            "location": "/Bars/#statusbar",
            "text": "Adds a statusbar along the bottom of the GUI.\nThis can be used for easy debugging, or as info for the user.",
            "title": "Statusbar"
        },
        {
            "location": "/Bars/#create-statuses",
            "text": ".addStatus(header=\"\", fields=1, side=None) \n    This turns the statusbar on, and if a header is supplied, will prepend the header before every message. \n    If fields is populated, it''s possible to have multiple status bixes, each addressable by a number. \n    Side can be set as LEFT/RIGHT to make the fields appear rom the left or rigt side, otherwise they will stretch equally.",
            "title": "Create Statuses"
        },
        {
            "location": "/Bars/#set-statuses",
            "text": ".setStatus(text, field=0) \n    This updates the contents of the statusbar. Again, if a header was set when adding the statusbar, that will be prepended to the message. \n    If multiple fields were created, a position can be supplied to populate.    .clearStatus(field=0) \n    Clear anything displayed in the statusbar, along with any header that might be set.    .setStatusWidth(width, field=0) \n    Set the width of the specified status field.",
            "title": "Set Statuses"
        },
        {
            "location": "/Dialogs/",
            "text": "Pop-ups\n\n\n\n\nA number of pop-ups (aka dialogs) are available, to add a different user experience, notify the user of information, or get one off pieces of data.\n\n\nMessage Boxes\n\n\n\n\n\n\n.infoBox(title, message)\n\n    Shows a simple information message, with an OK button.\n\n\n\n\n\n\n\n\n.errorBox(title, message)\n\n    Shows a simple error message, with an OK button.\n\n\n\n\n\n\n\n\n.warningBox(title, message)\n\n    Shows a simple warning message, with an OK message.\n\n\n\n\n\n\n\n\nQuestion Boxes\n\n\n\n\n\n\n.yesNoBox(title, message)\n\n    Shows a question, with Yes/No buttons. Returns True/False.\n\n\n\n\n\n\n\n\n.questionBox(title, message)\n\n    Shows a question, with Yes/No buttons. Returns True/False.\n\n\n\n\n\n\n\n\n.okBox(title, message)\n\n    Shows a question, with OK/Cancel buttons. Returns True/False.\n\n\n\n\n\n\n\n\n.retryBox(title, message)\n\n    Shows a question, with Cancel/Retry buttons. Returns True/False.\n\n\n\n\n\n\n\n\n.textBox(title, message)\n\n    Shows a question requesting a text response. Returns a String, or None if Cancel pressed.\n\n\n\n\n\n\n\n\n.numberBox(title, message)\n\n    Shows a question requesting a numeric response. Returns a number, or None if Cancel pressed.\n\n\n\n\n\n\n\n\nFile Boxes\n\n\n\n\n.openBox()\n\n\n.saveBox()\n\n\n.directoryBox()\n\n\n\n\nOther Boxes\n\n\n\n\n.colourBox()",
            "title": "Pop-ups"
        },
        {
            "location": "/Dialogs/#pop-ups",
            "text": "A number of pop-ups (aka dialogs) are available, to add a different user experience, notify the user of information, or get one off pieces of data.",
            "title": "Pop-ups"
        },
        {
            "location": "/Dialogs/#message-boxes",
            "text": ".infoBox(title, message) \n    Shows a simple information message, with an OK button.     .errorBox(title, message) \n    Shows a simple error message, with an OK button.     .warningBox(title, message) \n    Shows a simple warning message, with an OK message.",
            "title": "Message Boxes"
        },
        {
            "location": "/Dialogs/#question-boxes",
            "text": ".yesNoBox(title, message) \n    Shows a question, with Yes/No buttons. Returns True/False.     .questionBox(title, message) \n    Shows a question, with Yes/No buttons. Returns True/False.     .okBox(title, message) \n    Shows a question, with OK/Cancel buttons. Returns True/False.     .retryBox(title, message) \n    Shows a question, with Cancel/Retry buttons. Returns True/False.     .textBox(title, message) \n    Shows a question requesting a text response. Returns a String, or None if Cancel pressed.     .numberBox(title, message) \n    Shows a question requesting a numeric response. Returns a number, or None if Cancel pressed.",
            "title": "Question Boxes"
        },
        {
            "location": "/Dialogs/#file-boxes",
            "text": ".openBox()  .saveBox()  .directoryBox()",
            "title": "File Boxes"
        },
        {
            "location": "/Dialogs/#other-boxes",
            "text": ".colourBox()",
            "title": "Other Boxes"
        },
        {
            "location": "/DevWidgets/",
            "text": "Widgets Under Development\n\n\n\n\nThe following widgets are \nunder development\n. They're included in the library, but offer limited functionality, and are stilll quite buggy.\n\n\nPieChart\n\n\n\n\nShows a pie chart  \n\n\n\n\n.addPieChart(name, values, size=100)\n\n    Takes a list of integers, which will be converted to percentages, and plotted on the chart.\n\n    An optional size parameter can be passed, to adjust the size of the chart.  \n\n\n\n\n  \n\n\n    from rwbatools import gui\n\n    app=gui()\n    app.addPieChart(\"p1\", [50, 200, 75, 300, 150], size=300)\n    app.go()\n\n\n\n\nTree\n\n\n\n\nTakes an arbitrary XML string, and converts it into a tree structure.  \n\n\n\n\n.addTree(title, xml_data)\n\n    Create a tree from the specified XML data  \n\n\n.addTreeFunction(title, func)\n\n    Register a function to call when an item is double-clicked  \n\n\n.getTree(title)\n\n    Return the tree as XML  \n\n\n\n\n\n\nfrom rwbatools import gui\n\napp=gui()\napp.addTree(\"t1\",\n            \"\"\"<people>\n            <person><name>Fred</name><age>45</age><gender>Male</gender></person>\n            <person><name>Tina</name><age>37</age><gender>Female</gender></person>\n            <person><name>CLive</name><age>28</age><gender>Male</gender></person>\n            <person><name>Betty</name><age>51</age><gender>Female</gender></person>\n            </people>\"\"\")\napp.go()\n\n\n\n\nGrid\n\n\n\n\nUsed to create a spreadsheet like interface.\n\n* \n.addGrid(title, data, action=None, addRow=False)\n\n    Receives a (jagged) 2D list of values. The first list should be the headers for the grid, the rest will contain each row of values.\n\n    If action is set, a button will be created, calling the specified function. If addRow is True, then an additional row will appear, at the end, with Entry boxes.  \n\n\n\n\n.updateGrid(title, data, addRow=False)\n  \n\n\n.setGridGeom(title, width, height)\n  \n\n\n.getGridEntries(title)\n  \n\n\n.setGridBackground(title, colour)\n  \n\n\n\n\n  \n\n\n    from rwbatools import gui\n\n    app=gui()\n    app.setFont(20)\n    app.addGrid(\"g1\",\n        [[\"Name\", \"Age\", \"Gender\"],\n        [\"Fred\", 45, \"Male\"],\n        [\"Tina\", 37, \"Female\"],\n        [\"Clive\", 28, \"Male\"],\n        [\"Betty\", 51, \"Female\"]])\n    app.go()\n\n\n\n\nProperties\n\n\n\n\nA quick-to-create set of radio/check boxes.  \n\n\n\n\n.addProperties(props)\n\n    Creates the properties box, with the list of properties.\n\n    The properties can be passed in as dictionary, but the order will be random.  \n\n\n.addProperty(title, value=False)\n\n    Adds the named property to the end of the properties list.  \n\n\n.getProperties()\n\n    Returns the properties as a dictionary.  \n\n\n.getProperty(title)\n\n    Gets the named property.  \n\n\n.setProperty(title, value=True)\n\n    Sets the named property.",
            "title": "Still to come..."
        },
        {
            "location": "/DevWidgets/#widgets-under-development",
            "text": "The following widgets are  under development . They're included in the library, but offer limited functionality, and are stilll quite buggy.",
            "title": "Widgets Under Development"
        },
        {
            "location": "/DevWidgets/#piechart",
            "text": "Shows a pie chart     .addPieChart(name, values, size=100) \n    Takes a list of integers, which will be converted to percentages, and plotted on the chart. \n    An optional size parameter can be passed, to adjust the size of the chart.             from rwbatools import gui\n\n    app=gui()\n    app.addPieChart(\"p1\", [50, 200, 75, 300, 150], size=300)\n    app.go()",
            "title": "PieChart"
        },
        {
            "location": "/DevWidgets/#tree",
            "text": "Takes an arbitrary XML string, and converts it into a tree structure.     .addTree(title, xml_data) \n    Create a tree from the specified XML data    .addTreeFunction(title, func) \n    Register a function to call when an item is double-clicked    .getTree(title) \n    Return the tree as XML      from rwbatools import gui\n\napp=gui()\napp.addTree(\"t1\",\n            \"\"\"<people>\n            <person><name>Fred</name><age>45</age><gender>Male</gender></person>\n            <person><name>Tina</name><age>37</age><gender>Female</gender></person>\n            <person><name>CLive</name><age>28</age><gender>Male</gender></person>\n            <person><name>Betty</name><age>51</age><gender>Female</gender></person>\n            </people>\"\"\")\napp.go()",
            "title": "Tree"
        },
        {
            "location": "/DevWidgets/#grid",
            "text": "Used to create a spreadsheet like interface. \n*  .addGrid(title, data, action=None, addRow=False) \n    Receives a (jagged) 2D list of values. The first list should be the headers for the grid, the rest will contain each row of values. \n    If action is set, a button will be created, calling the specified function. If addRow is True, then an additional row will appear, at the end, with Entry boxes.     .updateGrid(title, data, addRow=False)     .setGridGeom(title, width, height)     .getGridEntries(title)     .setGridBackground(title, colour)              from rwbatools import gui\n\n    app=gui()\n    app.setFont(20)\n    app.addGrid(\"g1\",\n        [[\"Name\", \"Age\", \"Gender\"],\n        [\"Fred\", 45, \"Male\"],\n        [\"Tina\", 37, \"Female\"],\n        [\"Clive\", 28, \"Male\"],\n        [\"Betty\", 51, \"Female\"]])\n    app.go()",
            "title": "Grid"
        },
        {
            "location": "/DevWidgets/#properties",
            "text": "A quick-to-create set of radio/check boxes.     .addProperties(props) \n    Creates the properties box, with the list of properties. \n    The properties can be passed in as dictionary, but the order will be random.    .addProperty(title, value=False) \n    Adds the named property to the end of the properties list.    .getProperties() \n    Returns the properties as a dictionary.    .getProperty(title) \n    Gets the named property.    .setProperty(title, value=True) \n    Sets the named property.",
            "title": "Properties"
        },
        {
            "location": "/Layout/",
            "text": "Arranging Widgets\n\n\n\n\nSequential programming\n\n\n\n\nBy default, each new widget is simply added on a new line. That way, you can very quickly, create a simple GUI:\n\n\nfrom rwbatools import gui  \n\ndef changeLabel(btn):  \n    app.setLabel(\"l2\", app.getEntry(\"text\"))  \n\napp = gui()  \napp.addLabel(\"l1\", \"Simple Demo\")\napp.addEntry(\"text\")\napp.addButton(\"OK\", changeLabel)\napp.addEmptyLabel(\"l2\")\napp.go()\n\n\n\n\n\n\nGrid Layout\n\n\n\n\nIf, however, you want more than that, then a basic GRID layout is supported.\n\n\nEach time you add a widget, you can specify a column, row, and even a column-span to position it in.\n\n\nfrom rwbatools import gui\n\ndef press(btn):\n    if btn==\"Save\":\n        n=app.getEntry(\"name\")\n        a=app.getEntry(\"age\")\n        r=app.getOptionBox(\"role\")\n        app.infoBox(\"Details\", \"You entered: {}, {}, {}\".format(n, str(a), r))\n    elif btn==\"Quit\":\n        app.stop()\n\napp=gui()\n\napp.addLabel(\"l1\", \"Name\", 0, 0)\napp.addLabel(\"l2\", \"Age\", 1, 0)\napp.addLabel(\"l3\", \"Role\", 2, 0)\n\napp.addEntry(\"name\", 0, 1)\napp.addNumericEntry(\"age\", 1, 1)\napp.addOptionBox(\"role\", [\"Teacher\", \"Student\", \"Developer\", \"Volunteer\"], 2, 1)\n\napp.addButtons([\"Save\", \"Quit\"], press, 3, 0, 2)\n\napp.go()",
            "title": "Arranging widgets"
        },
        {
            "location": "/Layout/#arranging-widgets",
            "text": "",
            "title": "Arranging Widgets"
        },
        {
            "location": "/Layout/#sequential-programming",
            "text": "By default, each new widget is simply added on a new line. That way, you can very quickly, create a simple GUI:  from rwbatools import gui  \n\ndef changeLabel(btn):  \n    app.setLabel(\"l2\", app.getEntry(\"text\"))  \n\napp = gui()  \napp.addLabel(\"l1\", \"Simple Demo\")\napp.addEntry(\"text\")\napp.addButton(\"OK\", changeLabel)\napp.addEmptyLabel(\"l2\")\napp.go()",
            "title": "Sequential programming"
        },
        {
            "location": "/Layout/#grid-layout",
            "text": "If, however, you want more than that, then a basic GRID layout is supported.  Each time you add a widget, you can specify a column, row, and even a column-span to position it in.  from rwbatools import gui\n\ndef press(btn):\n    if btn==\"Save\":\n        n=app.getEntry(\"name\")\n        a=app.getEntry(\"age\")\n        r=app.getOptionBox(\"role\")\n        app.infoBox(\"Details\", \"You entered: {}, {}, {}\".format(n, str(a), r))\n    elif btn==\"Quit\":\n        app.stop()\n\napp=gui()\n\napp.addLabel(\"l1\", \"Name\", 0, 0)\napp.addLabel(\"l2\", \"Age\", 1, 0)\napp.addLabel(\"l3\", \"Role\", 2, 0)\n\napp.addEntry(\"name\", 0, 1)\napp.addNumericEntry(\"age\", 1, 1)\napp.addOptionBox(\"role\", [\"Teacher\", \"Student\", \"Developer\", \"Volunteer\"], 2, 1)\n\napp.addButtons([\"Save\", \"Quit\"], press, 3, 0, 2)\n\napp.go()",
            "title": "Grid Layout"
        },
        {
            "location": "/Grouping/",
            "text": "Container Options\n\n\n\n\nLabel Frame\n\n\n\n\nA way of grouping widgets into a box, with a label at the top of the box.\n\n\n\n\n\n\nPosition the \nLabelFrame\n within the grid, then position widgets inside the \nLabelFrame\n\n\n.startLabelFrame(name)\n  \n\n\n.stopLabelFrame()\n\n    Used to start and stop a labelFrame  \n\n\n.setSticky(coords)\n\n    Used to specify how widgets should be positioned inside the \nLabelFrame\n  \n\n\n\n\nNoteBook\n\n\n\n\nA way to create a (basic) tabbed-style interface.\n\n\n  \n\n\n\n\nPosition the \nNoteBook\n within the grid, start a \nTab\n, then position widgets inside the \nTab\n  \n\n\n.startNoteBook(name)\n  \n\n\n.stopNoteBook()\n\n    Used to start & stop the main \nNoteBook\n  \n\n\n.startNoteTab(name)\n\n\n.stopNoteTab()\n\n    Used to start and stop each of the tabs in the \nNoteBook\n.  \n\n\n\n\nPanedWindow\n\n\n\n\nA way to arrange re-sizable frames, with drag-bars.  \n\n\n\n\nCall \n.startPanedWindow(name)\n to create the initial pane  \n\n\nThen keep calling it to add additional panes  \n\n\nCalling \n.setPanedWindowVertical(name)\n will change the layout to vertical, allowing more configurations.  \n\n\n\n\nHorizontal Panes\n\n\n\n\nCreate an initial pane  \n\n\nKeep adding panes to the initial pane\n\n\n  \n\n\n\n\nVertical Panes\n\n\n\n\nCreate an initial pane  \n\n\nMake it vertical  \n\n\nAdd a second pane  \n\n\nKeep adding panes to the inittial pane\n\n\n  \n\n\n\n\nE-Pane\n\n\n\n\nCreate an initial pane  \n\n\nAdd a second pane\n\n\nMake the second pane vertical  \n\n\nThe remaining panes are added to frame 2\n\n\n  \n\n\n\n\nT-Pane\n\n\n\n\nCreate an initial pane\n\n\nMake it vertical\n\n\nAdd a second pane\n\n\nAdd the remaining panes to pane 2\n\n\n  \n\n\n\n\nSubWindow\n\n\n\n\nA way to add additional windows, which can be hidden and shown.  \n\n\n\n\n.startSubwindow(name)\n  \n\n\n.stopSubwindow()\n\n    Used to start and stop defining a \nSubWindow\n  \n\n\n.showSubWindow(name)\n  \n\n\n.hideSubWindow(name)\n\n    Used to show and hide the specified \nSubWindow",
            "title": "Grouping widgets"
        },
        {
            "location": "/Grouping/#container-options",
            "text": "",
            "title": "Container Options"
        },
        {
            "location": "/Grouping/#label-frame",
            "text": "A way of grouping widgets into a box, with a label at the top of the box.    Position the  LabelFrame  within the grid, then position widgets inside the  LabelFrame  .startLabelFrame(name)     .stopLabelFrame() \n    Used to start and stop a labelFrame    .setSticky(coords) \n    Used to specify how widgets should be positioned inside the  LabelFrame",
            "title": "Label Frame"
        },
        {
            "location": "/Grouping/#notebook",
            "text": "A way to create a (basic) tabbed-style interface.       Position the  NoteBook  within the grid, start a  Tab , then position widgets inside the  Tab     .startNoteBook(name)     .stopNoteBook() \n    Used to start & stop the main  NoteBook     .startNoteTab(name)  .stopNoteTab() \n    Used to start and stop each of the tabs in the  NoteBook .",
            "title": "NoteBook"
        },
        {
            "location": "/Grouping/#panedwindow",
            "text": "A way to arrange re-sizable frames, with drag-bars.     Call  .startPanedWindow(name)  to create the initial pane    Then keep calling it to add additional panes    Calling  .setPanedWindowVertical(name)  will change the layout to vertical, allowing more configurations.",
            "title": "PanedWindow"
        },
        {
            "location": "/Grouping/#horizontal-panes",
            "text": "Create an initial pane    Keep adding panes to the initial pane",
            "title": "Horizontal Panes"
        },
        {
            "location": "/Grouping/#vertical-panes",
            "text": "Create an initial pane    Make it vertical    Add a second pane    Keep adding panes to the inittial pane",
            "title": "Vertical Panes"
        },
        {
            "location": "/Grouping/#e-pane",
            "text": "Create an initial pane    Add a second pane  Make the second pane vertical    The remaining panes are added to frame 2",
            "title": "E-Pane"
        },
        {
            "location": "/Grouping/#t-pane",
            "text": "Create an initial pane  Make it vertical  Add a second pane  Add the remaining panes to pane 2",
            "title": "T-Pane"
        },
        {
            "location": "/Grouping/#subwindow",
            "text": "A way to add additional windows, which can be hidden and shown.     .startSubwindow(name)     .stopSubwindow() \n    Used to start and stop defining a  SubWindow     .showSubWindow(name)     .hideSubWindow(name) \n    Used to show and hide the specified  SubWindow",
            "title": "SubWindow"
        },
        {
            "location": "/WidgetOptions/",
            "text": "Widget Options\n\n\n\n\nThere are a lot of things that can be configured on a widget.\n\nThere is a pattern to how this works, you simply specify the widget type and the parameter, eg:\n\n\n\n\n.setLabelBg(name, value)\n\n\n.setButtonFg(name, value)\n\n\n.setListBoxState(name, value)\n\n\n\n\nThe list of widgets is defined in \ngui.WIDGETS\n, it contains:\nLabel, Message, Button, Entry, Scale, SpinBox, OptionBox, TextArea, Link, Meter, Image, RadioButton, CheckBox, ListBox, LabelFrame, PanedWindow, NoteBook\n\n\nBasic Appearance\n\n\n\n\nThe following options are available for all widgets:\n\n\n\n\n\n\nset XXX Bg(name, value)\n\n    Sets the background colour of the named widget.\n\n\n\n\n\n\nset XXX Fg(name, value)\n\n    Sets the foregound colour (usually the text) of the named widget.\n\n\n\n\n\n\nset XXX DisabledFg(name, value)\n\n    Sets the disabled foreground colour (usually the text) of the named widget.\n\n\n\n\n\n\nset XXX Width(name, value)\n\n    Sets the width of the named widget.\n\n\n\n\n\n\nset XXX Height(name, value)\n\n    Set the height of the named widget.\n\n\n\n\n\n\nExtended Appearance\n\n\n\n\n\n\n\n\nset XXX Tooltip(name, value)\n\n    Sets a tooltip for the widget.\n    The specified text will be displayed in a small pop-up, when the mouse is left over the widget.\n\n\n\n\n\n\nset XXX Cursor(name, value)\n\n    Sets the cursor shown, when the mouse goes over this widget.\n\n    There are lots of cursors avalable, for different platforms, see \nhere\n\n\n\n\n\n\nset XXX Relief(name, value)\n\n    Sets the border for the widget. One of: \nSUNKEN\n, \nRAISED\n, \nGROOVE\n, \nRIDGE\n, \nFLAT\n  \n\n\n\n\n\n\nset XXX State(name, value)\n\n    Sets the state of the named widget. One of: \nNORMAL\n, \nACTIVE\n, \nDISABLED\n  \n\n\n\n\n\n\nAdvanced Appearance\n\n\n\n\nThe following are supported by most widgets:\n\n\n\n\n\n\nset XXX Align(name, value)\n\n    Specifies how to align text within the widget: \nLEFT\n, \nRIGHT\n, \nCENTER\n\n\n\n\n\n\nset XXX Anchor(name, value)\n\n    Sets where the text is positioned within the widget. One of: \nCENTER\n, \nN\n, \nS\n, \nE\n, \nW\n, \nNE\n, \nNW\n, \nSE\n, \nSW\n  \n\n\n\n\n\n\nset XXX Sticky(name, value)\n\n    Specifies which side of the cell to stick the widget to, as the GUI expands: \nLEFT\n, \nRIGHT\n, \nBOTH\n\n\n\n\n\n\nWidget Interaction\n\n\n\n\nThe following allow widgets to be interacted with:\n\n\n\n\n\n\nset XXX Focus(name)\n\n    Gives focus to the specified widget. This is the widget where the user will be able to start typing.\n\n\n\n\n\n\nset XXX Function(name, value, key=None)\n\n    This binds a function to the widget.\n\n    The function will be called every time an interactive-widget changes. \n    The funcion will be called when some widgets are clicked.  \n\n\n\n\n\n\nset XXX OverFunction(name, values)\n\n    Set functions to call whenever the mouse enters (goes over) or leaves the specified widget.\n\n    The first function is called when the mouse first enters the widget.\n\n    The second function is called when the mouse leaves the widget.\n\n    If you only want a function to be called when the mouse leaves the widget, pass an array like: \n[None, leave]\n  \n\n\n\n\n\n\n    from rwbatools import gui\n\n    def enter(wdgt): \n        print(\"IN\", wdgt)\n    def leave(wdgt):\n        print(\"OUT\", wdgt)\n\n    app=gui()\n    app.addLabel(\"l1\", \"Testing...\")\n    app.setLabelOverFunction(\"l1\", [enter, leave])\n    app.go()\n\n\n\n\n\n\nset XXX DragFunction(name, values)\n\n    Set functions to call whenever the mouse button is clicked and dragged.\n\n    The first function will be called when the mouse is initially clicked.\n\n    The second function will be called when the mouse is released.\n\n    The same rules for passing functions apply as above.  \n\n\n\n\nWidget Manipulaiton\n\n\n\n\nThe following allow widgets to be manipulated on screen:\n\n\n\n\n\n\n.hide XXX (name)\n\n    Temporarily hides the widget form view.\n\n\n\n\n\n\n.show XXX (name)\n\n    Show the widget, if it was already hidden.\n\n\n\n\n\n\n.remove XXX (name)\n\n    Permanently remove the widget (deletes it).\n\n\n\n\n\n\n.removeAllWidgets()\n\n    Permanenently remove all widgets.\n\n\n\n\n\n\n.disable XXX (name)\n\n    Disable the widget - stops the user from interacting with it, but keeps it visible.\n\n\n\n\n\n\n.enable XXX (name)\n\n    Enable a disabled widget.\n\n\n\n\n\n\nGrouped Options\n\n\n\n\nThe following are convenience functions, for modifying a group of widgets:\n\n\n\n\nset XXX Widths(names, val)\n  \n\n\n\n\nset XXX Heights(names, val)\n\n    Sets the widths/heights of the specified widgets.\n\n\n\n\n\n\nsetAll XXX Widths(val)\n  \n\n\n\n\nsetAll XXX Heights(val)\n\n    Sets the widths/heights of all widgets of the specified type.",
            "title": "Changing widgets"
        },
        {
            "location": "/WidgetOptions/#widget-options",
            "text": "There are a lot of things that can be configured on a widget. \nThere is a pattern to how this works, you simply specify the widget type and the parameter, eg:   .setLabelBg(name, value)  .setButtonFg(name, value)  .setListBoxState(name, value)   The list of widgets is defined in  gui.WIDGETS , it contains:\nLabel, Message, Button, Entry, Scale, SpinBox, OptionBox, TextArea, Link, Meter, Image, RadioButton, CheckBox, ListBox, LabelFrame, PanedWindow, NoteBook",
            "title": "Widget Options"
        },
        {
            "location": "/WidgetOptions/#basic-appearance",
            "text": "The following options are available for all widgets:    set XXX Bg(name, value) \n    Sets the background colour of the named widget.    set XXX Fg(name, value) \n    Sets the foregound colour (usually the text) of the named widget.    set XXX DisabledFg(name, value) \n    Sets the disabled foreground colour (usually the text) of the named widget.    set XXX Width(name, value) \n    Sets the width of the named widget.    set XXX Height(name, value) \n    Set the height of the named widget.",
            "title": "Basic Appearance"
        },
        {
            "location": "/WidgetOptions/#extended-appearance",
            "text": "set XXX Tooltip(name, value) \n    Sets a tooltip for the widget.\n    The specified text will be displayed in a small pop-up, when the mouse is left over the widget.    set XXX Cursor(name, value) \n    Sets the cursor shown, when the mouse goes over this widget. \n    There are lots of cursors avalable, for different platforms, see  here    set XXX Relief(name, value) \n    Sets the border for the widget. One of:  SUNKEN ,  RAISED ,  GROOVE ,  RIDGE ,  FLAT       set XXX State(name, value) \n    Sets the state of the named widget. One of:  NORMAL ,  ACTIVE ,  DISABLED",
            "title": "Extended Appearance"
        },
        {
            "location": "/WidgetOptions/#advanced-appearance",
            "text": "The following are supported by most widgets:    set XXX Align(name, value) \n    Specifies how to align text within the widget:  LEFT ,  RIGHT ,  CENTER    set XXX Anchor(name, value) \n    Sets where the text is positioned within the widget. One of:  CENTER ,  N ,  S ,  E ,  W ,  NE ,  NW ,  SE ,  SW       set XXX Sticky(name, value) \n    Specifies which side of the cell to stick the widget to, as the GUI expands:  LEFT ,  RIGHT ,  BOTH",
            "title": "Advanced Appearance"
        },
        {
            "location": "/WidgetOptions/#widget-interaction",
            "text": "The following allow widgets to be interacted with:    set XXX Focus(name) \n    Gives focus to the specified widget. This is the widget where the user will be able to start typing.    set XXX Function(name, value, key=None) \n    This binds a function to the widget. \n    The function will be called every time an interactive-widget changes. \n    The funcion will be called when some widgets are clicked.      set XXX OverFunction(name, values) \n    Set functions to call whenever the mouse enters (goes over) or leaves the specified widget. \n    The first function is called when the mouse first enters the widget. \n    The second function is called when the mouse leaves the widget. \n    If you only want a function to be called when the mouse leaves the widget, pass an array like:  [None, leave]           from rwbatools import gui\n\n    def enter(wdgt): \n        print(\"IN\", wdgt)\n    def leave(wdgt):\n        print(\"OUT\", wdgt)\n\n    app=gui()\n    app.addLabel(\"l1\", \"Testing...\")\n    app.setLabelOverFunction(\"l1\", [enter, leave])\n    app.go()   set XXX DragFunction(name, values) \n    Set functions to call whenever the mouse button is clicked and dragged. \n    The first function will be called when the mouse is initially clicked. \n    The second function will be called when the mouse is released. \n    The same rules for passing functions apply as above.",
            "title": "Widget Interaction"
        },
        {
            "location": "/WidgetOptions/#widget-manipulaiton",
            "text": "The following allow widgets to be manipulated on screen:    .hide XXX (name) \n    Temporarily hides the widget form view.    .show XXX (name) \n    Show the widget, if it was already hidden.    .remove XXX (name) \n    Permanently remove the widget (deletes it).    .removeAllWidgets() \n    Permanenently remove all widgets.    .disable XXX (name) \n    Disable the widget - stops the user from interacting with it, but keeps it visible.    .enable XXX (name) \n    Enable a disabled widget.",
            "title": "Widget Manipulaiton"
        },
        {
            "location": "/WidgetOptions/#grouped-options",
            "text": "The following are convenience functions, for modifying a group of widgets:   set XXX Widths(names, val)      set XXX Heights(names, val) \n    Sets the widths/heights of the specified widgets.    setAll XXX Widths(val)      setAll XXX Heights(val) \n    Sets the widths/heights of all widgets of the specified type.",
            "title": "Grouped Options"
        },
        {
            "location": "/GuiOptions/",
            "text": "GUI Options\n\n\n\n\nThere are a number of generic configurations available, which will affect the whole GUI.\n\nSome of these are also available at a widghet level, where you can specify individual configurations tor specified widgets.  \n\n\nConfiguration\n\n\n\n\nSome basic configuration for the size, position, transparency, etc. of the GUI.\n\n\nLook & Feel\n\n\n\n\n\n\nsetTitle(title)\n\n    Sets the title of the GUI. By default it is the name of the script.\n\n\n\n\n\n\nsetIcon(fileName)\n\n    Sets an icon for the GUI.\n\n\n\n\n\n\nsetTransparency(percentage)\n\n    Sets how transparent the GUI is. Between 0 and 100%.\n\n\n\n\n\n\nSize & Locaiton\n\n\n\n\nsetGeometry(geom)\n  \n\n\n\n\nsetGeometry(width, height)\n\n    Sets the height & width of the GUI:  \n\n\n\n\nEither as a single String \n.setGeometry(\"200x100\")\n (widthxheight)  \n\n\nAs two seperate parameters \n.setGeometry(200,100)\n\n\nOr to go \nFullscreen\n \n.setGeometry(\"Fullscreen\")\n  \n\n\n\n\n\n\n\n\nexitFullscreen()\n\n    Leave fullscreen, if set in the geometry.  \n\n\n<Escape>\n will call this automatically, while in fullscreen.  \n\n\n\n\n\n\nsetResizable(canResize=True)\n\n    Sets whether the GUI can be resized or not.  \n\n\n\n\n\n\nsetLocation(x, y)\n\n    Sets the position of the GUI  \n\n\n\n\n\n\nDesign\n\n\n\n\nIt's possible to change the default colours and fonts for widgets in the GUI.\n\n\nColour\n\n\n\n\nsetBg(colour)\n\n    Set the background colour for the entire GUI. This should affect all widgets, and will override any backgrounds set before.\n\n\n\n\nFont\n\n\n\n\n\n\nsetFont(size, font=None)\n\n    This can be used to set the font size and style for all widgets.\n\n\n\n\n\n\ndecreaseFont()\n & \nincreaseFont()\n\n    These can be used to increase or decrease the font of all widgets.\n\n\n\n\n\n\nsetLabelFont(size, family=None)\n\n    This can be used to set the font size and style for all label-type widgets.\n\n\n\n\n\n\nincreaseLabelFont()\n & \ndecreaseLabelFont()\n\n    These can be used to increase or decrease the font of all label-type widgets.\n\n\n\n\n\n\nsetButtonFont()\n\n    This can be used to set the font size and style for all button-type widgets.\n\n\n\n\n\n\nincreaseButtonFont()\n & \ndecreaseButtonFont()\n\n    These can be used to increase or decrease the font of all butotn-type widgets.\n\n\n\n\n\n\nWidget Positioning\n\n\n\n\nThe below commands allow the user to change how RWBAtools lays out widgets on the screen.\n\n\nLocation\n\n\n\n\n\n\nsetPadX()\n & \nsetPadY()\n\n    These set how much empty padding is included around a widget, within its grid-cell.\n\n\n\n\n\n\nsetSticky()\n\n    This determines which side of the grid-cell the widget will stick to:\n\n\n\n\nleft\n - stick to the left side\n\n\nright\n - stick to the right side\n\n\nboth\n - stick to both sides, stretch the widget\n\n\n\n\n\n\n\n\nResize\n\n\n\n\n\n\nsetExpand()\n\n    This tells widgets what to do when the GUI is resized.\n\n    It allows widgets to be configured to stretch or not:\n\n\n\n\nnone\n - don't expand\n\n\nrow\n - expand with rows only\n\n\ncolumn\n - expand with columns only\n\n\nall\n - expand in all directions\n\n\n\n\n\n\n\n\nRow Helpers\n\n\n\n\n\n\ngetRow()\n\n    Returns the row number currently being used.\n\n\n\n\n\n\ngetNextRow()\n\n    Returns the current row number, before adding one to it.\n\n\n\n\n\n\nGUI Actions\n\n\n\n\nRepeated Events\n\n\nWhen you start the GUI, it kicks off an infinte loop that is waiting for the user to do something.\n\nThat means, you should never have your own loops running, as that will stop the GUI from working properly.\n\nInstead, if you want your own loop to run, you need to ask the GUi to run it for you:  \n\n\n\n\n\n\nregisterEvent(func)\n\n    Pass this a function, and the GUI will call that function every second.\n\n\n\n\n\n\nsetPollTime(time)\n\n    If you want your events to be called more or less frequently, set the frequency here.\n\n\n\n\n\n\nEnter Key\n\n\n\n\n\n\nenableEnter(func)\n\n    Link a function to the \n<Enter>\n key\n\n\n\n\n\n\ndisableEnter()\n\n    Unlink a function form the \n<Enter>\n  key\n\n\n\n\n\n\nOther Keys\n\n\n\n\n\n\nbindKey(key, func)\n\n    Link the specified key to the specified function.\n\n\n\n\n\n\nunbindKey(key)\n\n    Unlink the specified key from any functions bound to it.",
            "title": "Extras"
        },
        {
            "location": "/GuiOptions/#gui-options",
            "text": "There are a number of generic configurations available, which will affect the whole GUI. \nSome of these are also available at a widghet level, where you can specify individual configurations tor specified widgets.",
            "title": "GUI Options"
        },
        {
            "location": "/GuiOptions/#configuration",
            "text": "Some basic configuration for the size, position, transparency, etc. of the GUI.",
            "title": "Configuration"
        },
        {
            "location": "/GuiOptions/#look-feel",
            "text": "setTitle(title) \n    Sets the title of the GUI. By default it is the name of the script.    setIcon(fileName) \n    Sets an icon for the GUI.    setTransparency(percentage) \n    Sets how transparent the GUI is. Between 0 and 100%.",
            "title": "Look &amp; Feel"
        },
        {
            "location": "/GuiOptions/#size-locaiton",
            "text": "setGeometry(geom)      setGeometry(width, height) \n    Sets the height & width of the GUI:     Either as a single String  .setGeometry(\"200x100\")  (widthxheight)    As two seperate parameters  .setGeometry(200,100)  Or to go  Fullscreen   .setGeometry(\"Fullscreen\")        exitFullscreen() \n    Leave fullscreen, if set in the geometry.    <Escape>  will call this automatically, while in fullscreen.      setResizable(canResize=True) \n    Sets whether the GUI can be resized or not.      setLocation(x, y) \n    Sets the position of the GUI",
            "title": "Size &amp; Locaiton"
        },
        {
            "location": "/GuiOptions/#design",
            "text": "It's possible to change the default colours and fonts for widgets in the GUI.",
            "title": "Design"
        },
        {
            "location": "/GuiOptions/#colour",
            "text": "setBg(colour) \n    Set the background colour for the entire GUI. This should affect all widgets, and will override any backgrounds set before.",
            "title": "Colour"
        },
        {
            "location": "/GuiOptions/#font",
            "text": "setFont(size, font=None) \n    This can be used to set the font size and style for all widgets.    decreaseFont()  &  increaseFont() \n    These can be used to increase or decrease the font of all widgets.    setLabelFont(size, family=None) \n    This can be used to set the font size and style for all label-type widgets.    increaseLabelFont()  &  decreaseLabelFont() \n    These can be used to increase or decrease the font of all label-type widgets.    setButtonFont() \n    This can be used to set the font size and style for all button-type widgets.    increaseButtonFont()  &  decreaseButtonFont() \n    These can be used to increase or decrease the font of all butotn-type widgets.",
            "title": "Font"
        },
        {
            "location": "/GuiOptions/#widget-positioning",
            "text": "The below commands allow the user to change how RWBAtools lays out widgets on the screen.",
            "title": "Widget Positioning"
        },
        {
            "location": "/GuiOptions/#location",
            "text": "setPadX()  &  setPadY() \n    These set how much empty padding is included around a widget, within its grid-cell.    setSticky() \n    This determines which side of the grid-cell the widget will stick to:   left  - stick to the left side  right  - stick to the right side  both  - stick to both sides, stretch the widget",
            "title": "Location"
        },
        {
            "location": "/GuiOptions/#resize",
            "text": "setExpand() \n    This tells widgets what to do when the GUI is resized. \n    It allows widgets to be configured to stretch or not:   none  - don't expand  row  - expand with rows only  column  - expand with columns only  all  - expand in all directions",
            "title": "Resize"
        },
        {
            "location": "/GuiOptions/#row-helpers",
            "text": "getRow() \n    Returns the row number currently being used.    getNextRow() \n    Returns the current row number, before adding one to it.",
            "title": "Row Helpers"
        },
        {
            "location": "/GuiOptions/#gui-actions",
            "text": "",
            "title": "GUI Actions"
        },
        {
            "location": "/GuiOptions/#repeated-events",
            "text": "When you start the GUI, it kicks off an infinte loop that is waiting for the user to do something. \nThat means, you should never have your own loops running, as that will stop the GUI from working properly. \nInstead, if you want your own loop to run, you need to ask the GUi to run it for you:      registerEvent(func) \n    Pass this a function, and the GUI will call that function every second.    setPollTime(time) \n    If you want your events to be called more or less frequently, set the frequency here.",
            "title": "Repeated Events"
        },
        {
            "location": "/GuiOptions/#enter-key",
            "text": "enableEnter(func) \n    Link a function to the  <Enter>  key    disableEnter() \n    Unlink a function form the  <Enter>   key",
            "title": "Enter Key"
        },
        {
            "location": "/GuiOptions/#other-keys",
            "text": "bindKey(key, func) \n    Link the specified key to the specified function.    unbindKey(key) \n    Unlink the specified key from any functions bound to it.",
            "title": "Other Keys"
        },
        {
            "location": "/empty/",
            "text": "",
            "title": "Lesson 1"
        },
        {
            "location": "/Install/",
            "text": "Installation Instructions\n\n\n\n\nThis library is designed to be as simple as possible to \ninstall\n.\n\nAs long as the \nrwbatools\n folder is in Python's path, you are good to go.  \n\n\nPreparing the library\n\n\n\n\nAll installations start the same:\n\n\n\n\nDownload the ZIP file.\n\n\nUnzip it.\n\n\nMake sure the folder is called \nrwbatools\n (it might be called rwbatools-master if you got it from github)\n\n\nPut the folder in a sensible place \n~/Documents/PYLIB/\n\n\n\n\nNow, it's ready to go, at the top of your code, you can include the following:\n\n\n# add the rwbatools folder to your PATH\nimport sys\nsys.path.append(\"~/Documents/PYLIB\") # replce this with the correct path\n# import the library\nfrom rwbatools import gui\n\n\n\n\nIf you want a more permanent solution, you can add the above folder to your path. See below. \n\n\nWindows Installation\n\n\n\n\n\n\nOpen \nControl Panel\n\n\nNavigate to \nSystem -> Advanced System Settings\n\n\n\n\nClick the \nAdvanced\n tab\n\n\n\nUnder \nSystem vartiables\n, click the \nNew..\n button\n\n\n\nSet the \nVariable name:\n to be \nPYTHONPATH\n\n\nSet the \nPath:\n as the folder you put \nrwbatools\n in (eg. c:\\COMPUTINC\\PYLIB\")\n\n\n\nPress \nOK\n, and you're ready to go:\n\n\n\n\nLinux Installation\n\n\n\n\n\n\nLaunch a \nTerminal\n\n\nType the following:\n\n\n\n\n    echo 'export PYTHONPATH=\"${PYTHONPATH}:~Documents/PYLIB\"' >> ~/.bashrc\n\n\n\n\n\n\nClose the terminal, and you're ready to go\n\n\n\n\nMAC Installation\n\n\n\n\n\n\nIt's a little trickier on MAC\n\n\nFirst off, run the Linux installation above. That will make it available form the command line.\n\n\nIn OSX<=10.9:\n\n\nEdit the \n/etc/launchd.conf\n file\n\n\nAdd the line: \nsetenv PYTHONPATH /Users/myname/Documents/PYLIB\n\n\nAnd you're done\n\n\n\n\n\n\n\n\nUsing the library\n\n\n\n\nIf the rwbatools folder is in your path, you can access it simply though an import:\n\n\n# import the library\nfrom rwbatools import gui",
            "title": "Installation"
        },
        {
            "location": "/Install/#installation-instructions",
            "text": "This library is designed to be as simple as possible to  install . \nAs long as the  rwbatools  folder is in Python's path, you are good to go.",
            "title": "Installation Instructions"
        },
        {
            "location": "/Install/#preparing-the-library",
            "text": "All installations start the same:   Download the ZIP file.  Unzip it.  Make sure the folder is called  rwbatools  (it might be called rwbatools-master if you got it from github)  Put the folder in a sensible place  ~/Documents/PYLIB/   Now, it's ready to go, at the top of your code, you can include the following:  # add the rwbatools folder to your PATH\nimport sys\nsys.path.append(\"~/Documents/PYLIB\") # replce this with the correct path\n# import the library\nfrom rwbatools import gui  If you want a more permanent solution, you can add the above folder to your path. See below.",
            "title": "Preparing the library"
        },
        {
            "location": "/Install/#windows-installation",
            "text": "Open  Control Panel  Navigate to  System -> Advanced System Settings   Click the  Advanced  tab  Under  System vartiables , click the  New..  button  Set the  Variable name:  to be  PYTHONPATH  Set the  Path:  as the folder you put  rwbatools  in (eg. c:\\COMPUTINC\\PYLIB\")  Press  OK , and you're ready to go:",
            "title": "Windows Installation"
        },
        {
            "location": "/Install/#linux-installation",
            "text": "Launch a  Terminal  Type the following:       echo 'export PYTHONPATH=\"${PYTHONPATH}:~Documents/PYLIB\"' >> ~/.bashrc   Close the terminal, and you're ready to go",
            "title": "Linux Installation"
        },
        {
            "location": "/Install/#mac-installation",
            "text": "It's a little trickier on MAC  First off, run the Linux installation above. That will make it available form the command line.  In OSX<=10.9:  Edit the  /etc/launchd.conf  file  Add the line:  setenv PYTHONPATH /Users/myname/Documents/PYLIB  And you're done",
            "title": "MAC Installation"
        },
        {
            "location": "/Install/#using-the-library",
            "text": "If the rwbatools folder is in your path, you can access it simply though an import:  # import the library\nfrom rwbatools import gui",
            "title": "Using the library"
        },
        {
            "location": "/Thanks/",
            "text": "Thanks to:\n\n\n\n\nHelpful Resources\n\n\n\n\nhttp://effbot.org/tkinterbook/ - The GURU of all things tkinter & Python\n\n\nhttp://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html - another great resource\n\n\nhttp://tkinter.unpythonic.net/wiki/FrontPage - another good resource\n\n\n\n\nIncorporated Libraries\n\n\n\n\nhttps://github.com/drj11/pypng - supplies basic PNG support\n\n\nhttps://bitbucket.org/hokaze/tkinter-png - allows PNGs to be treated as PhotoImages\n\n\nhttps://github.com/sullerandras/nanojpeg-python - provides BASIC jpeg support\n\n\nhttp://tkinter.unpythonic.net/wiki/ToolTip - provides ToolTips\n\n\n\n\nDocumentation\n\n\n\n\nhttp://www.mkdocs.org - used to generate this documentation",
            "title": "Acknowledgements"
        },
        {
            "location": "/Thanks/#thanks-to",
            "text": "",
            "title": "Thanks to:"
        },
        {
            "location": "/Thanks/#helpful-resources",
            "text": "http://effbot.org/tkinterbook/ - The GURU of all things tkinter & Python  http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html - another great resource  http://tkinter.unpythonic.net/wiki/FrontPage - another good resource",
            "title": "Helpful Resources"
        },
        {
            "location": "/Thanks/#incorporated-libraries",
            "text": "https://github.com/drj11/pypng - supplies basic PNG support  https://bitbucket.org/hokaze/tkinter-png - allows PNGs to be treated as PhotoImages  https://github.com/sullerandras/nanojpeg-python - provides BASIC jpeg support  http://tkinter.unpythonic.net/wiki/ToolTip - provides ToolTips",
            "title": "Incorporated Libraries"
        },
        {
            "location": "/Thanks/#documentation",
            "text": "http://www.mkdocs.org - used to generate this documentation",
            "title": "Documentation"
        },
        {
            "location": "/License/",
            "text": "License",
            "title": "License"
        },
        {
            "location": "/License/#license",
            "text": "",
            "title": "License"
        }
    ]
}