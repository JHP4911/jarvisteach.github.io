{
    "docs": [
        {
            "location": "/",
            "text": "To Begin\n\n\nTo build a GUI, requires a minimum of three steps:\n\n\n1) \nIMPORT\n the library\n\n2) \nCREATE\n the GUI\n\n3) \nSTART\n the GUI  \n\n\nfrom rwbatools import gui   # import the library\napp = gui()                 # create the GUI\napp.go()                    # start the GUI  \n\n\n\n\nIn-between creating & starting the GUI, you \nADD\n any widgets you want, and \nSET\n their properties.  \n\n\nWhen adding a widget, you usually have to give it a title - this is used later if you want to change the widget.  \n\n\nThen, you set any appropriate properties, for the widget, using its title.\n\n\nfrom rwbatools import gui\n\napp = gui()\napp.addLabel(\"title\", \"Welcome to RWBAtools\")   # add a label\napp.setLabelBg(\"title\", \"red\")                           # set the label's background to be red\napp.go()\n\n\n\n\nWidgets will be added consecutively, each on a new line:\n\nSimple Layout\n\n\nIf you want more than that, you will need to consider their layout.\n\nGrid Layout\n\n\nWidgets can be positioned in a grid, simply by providing a \nROW\n and \nCOLUMN\n position for each widget. It's also possible to specify how many columns to \nSPAN\n.\n\n\nThere are also a number of things you can configure about the GUI:\n\nGUI Options\n\n\n\n\nWidgets\n\n\nThe following widgets are available:\n\n\n\n\nLabel\n - Used for displaying writing\n\n\nFlashLabel - a label that flashes\n\n\n\n\n\n\nEntry\n - A single line box for typing text\n\n\nSecretEntry - an entry box that displays stars as the user types\n\n\nNumericEntry - an entry box that only accepts numbers\n\n\n\n\n\n\nButton\n - A clickable button, that will call a function\n\n\nRadioButton\n - A group of round boxes, only one of which can be selected\n\n\nCheckBox\n - A box, with a label, that can be either ON or OFF\n\n\nOptionBox\n - A drop-down single-select option\n\n\nSpinBox\n - A scrollable option\n\n\nListBox\n - A box containing a list of items, single or multi-select\n\n\nScale\n - A slider, that has a minimum & maximum value\n\n\nMessage\n - Like a multi-line label\n\n\nTextArea\n - A multi-line box for typing text\n\n\nMeter\n - Used for showing progress\n\n\nSplitMeter\n - Shows two values, left & right\n\n\nDualMeter\n - shows percentage left & right\n\n\n\n\n\n\nSeparator\n - shows a horizontal line\n\n\nLink/WebLink\n - Clickable text to call a function or launch a URL\n\n\nImage\n - shows an image\n\n\n\n\nThe following widgets are under deveopment\n\n\n\n\nPieChart\n - will show a pie chart\n\n\nTree\n - will show a tree-style interface\n\n\nGrid\n - will show a table interface\n\n\n\n\n\n\nBar Widgets\n\n\nThere are 3 bars available to add extra functionality to your GUI:\n\n\n\n\nToolBar\n - adds a toolbar along the top of the GUI\n\n\nMenu\n - adds a standard Menu bar along the top of the GUI\n\n\nStatus\n - adds a status bar along the bottom of the GUI\n\n\n\n\n\n\nDialogs\n\n\nA number of dialogs are available:\n\n\n\n\ninfoBox\n\n\nerrorBox\n\n\nwarningBox\n\n\nyesNoBox\n\n\nquestionBox\n\n\nokBox\n\n\nretryBox\n\n\nopenBox\n\n\nsaveBox\n\n\ndirectoryBox\n\n\ncolourBox\n\n\ntextBox\n\n\nnumBox\n\n\n\n\n\n\nLayouts\n\n\nFinally, a number of layouts are available:\n\n\n\n\nLabelFrame\n - will put a border around the widgets, with a title\n\n\nNoteBook\n - will create a tabbed interface, with a number of pages\n\n\nPanedWindow\n - will create a split view, with draggable panes\n\n\nSubWindow\n - used to create additional windows\n\n\n\n\n\n\nSound\n\n\nThe GUI can also make SOUND (on Windows)\n\n\n\n\n.playSound(sound, wait=False)\n\n\n.stopSound()\n\n\n.loopSound()\n\n\n.soundError()\n\n\n.soundWarning()\n\n\n.playNote(note, duration=200)",
            "title": "Home"
        },
        {
            "location": "/#to-begin",
            "text": "To build a GUI, requires a minimum of three steps:  1)  IMPORT  the library \n2)  CREATE  the GUI \n3)  START  the GUI    from rwbatools import gui   # import the library\napp = gui()                 # create the GUI\napp.go()                    # start the GUI    In-between creating & starting the GUI, you  ADD  any widgets you want, and  SET  their properties.    When adding a widget, you usually have to give it a title - this is used later if you want to change the widget.    Then, you set any appropriate properties, for the widget, using its title.  from rwbatools import gui\n\napp = gui()\napp.addLabel(\"title\", \"Welcome to RWBAtools\")   # add a label\napp.setLabelBg(\"title\", \"red\")                           # set the label's background to be red\napp.go()  Widgets will be added consecutively, each on a new line: Simple Layout  If you want more than that, you will need to consider their layout. Grid Layout  Widgets can be positioned in a grid, simply by providing a  ROW  and  COLUMN  position for each widget. It's also possible to specify how many columns to  SPAN .  There are also a number of things you can configure about the GUI: GUI Options",
            "title": "To Begin"
        },
        {
            "location": "/#widgets",
            "text": "The following widgets are available:   Label  - Used for displaying writing  FlashLabel - a label that flashes    Entry  - A single line box for typing text  SecretEntry - an entry box that displays stars as the user types  NumericEntry - an entry box that only accepts numbers    Button  - A clickable button, that will call a function  RadioButton  - A group of round boxes, only one of which can be selected  CheckBox  - A box, with a label, that can be either ON or OFF  OptionBox  - A drop-down single-select option  SpinBox  - A scrollable option  ListBox  - A box containing a list of items, single or multi-select  Scale  - A slider, that has a minimum & maximum value  Message  - Like a multi-line label  TextArea  - A multi-line box for typing text  Meter  - Used for showing progress  SplitMeter  - Shows two values, left & right  DualMeter  - shows percentage left & right    Separator  - shows a horizontal line  Link/WebLink  - Clickable text to call a function or launch a URL  Image  - shows an image   The following widgets are under deveopment   PieChart  - will show a pie chart  Tree  - will show a tree-style interface  Grid  - will show a table interface",
            "title": "Widgets"
        },
        {
            "location": "/#bar-widgets",
            "text": "There are 3 bars available to add extra functionality to your GUI:   ToolBar  - adds a toolbar along the top of the GUI  Menu  - adds a standard Menu bar along the top of the GUI  Status  - adds a status bar along the bottom of the GUI",
            "title": "Bar Widgets"
        },
        {
            "location": "/#dialogs",
            "text": "A number of dialogs are available:   infoBox  errorBox  warningBox  yesNoBox  questionBox  okBox  retryBox  openBox  saveBox  directoryBox  colourBox  textBox  numBox",
            "title": "Dialogs"
        },
        {
            "location": "/#layouts",
            "text": "Finally, a number of layouts are available:   LabelFrame  - will put a border around the widgets, with a title  NoteBook  - will create a tabbed interface, with a number of pages  PanedWindow  - will create a split view, with draggable panes  SubWindow  - used to create additional windows",
            "title": "Layouts"
        },
        {
            "location": "/#sound",
            "text": "The GUI can also make SOUND (on Windows)   .playSound(sound, wait=False)  .stopSound()  .loopSound()  .soundError()  .soundWarning()  .playNote(note, duration=200)",
            "title": "Sound"
        },
        {
            "location": "/Layout/",
            "text": "Background\n\n\nRWBAtools was designed to make building a functional GUI as simple as possible.  \n\n\nIt is designed with teaching in mind. Rather than pupils having to focus on the GUI code, they should be focusing on the algorithms that get the work done.\n\n\nTo that end, at it's simplest, you simply keep adding widgets to the GUI, and they will render in sequence.\n\n\nSimple Layout\n\n\nBy default, each new widget is simply added on a new line. That way, you can very quickly, create a simple GUI:\n\n\nfrom rwbatools import gui  \n\ndef changeLabel(btn):  \n    app.setLabel(\"l2\", app.getEntry(\"text\"))  \n\napp = gui()  \napp.addLabel(\"l1\", \"Simple Demo\")\napp.addEntry(\"text\")\napp.addButton(\"OK\", changeLabel)\napp.addEmptyLabel(\"l2\")\napp.go()\n\n\n\n\n\n\nGrid Layout\n\n\nIf, however, you want more than that, then a basic GRID layout is supported.\n\n\nEach time you add a widget, you can specify a column, row, and even a column-span to position it in.\n\n\nfrom rwbatools import gui\n\ndef press(btn):\n    if btn==\"Save\":\n        n=app.getEntry(\"name\")\n        a=app.getEntry(\"age\")\n        r=app.getOptionBox(\"role\")\n        app.infoBox(\"Details\", \"You entered: {}, {}, {}\".format(n, str(a), r))\n    elif btn==\"Quit\":\n        app.stop()\n\napp=gui()\n\napp.addLabel(\"l1\", \"Name\", 0, 0)\napp.addLabel(\"l2\", \"Age\", 1, 0)\napp.addLabel(\"l3\", \"Role\", 2, 0)\n\napp.addEntry(\"name\", 0, 1)\napp.addNumericEntry(\"age\", 1, 1)\napp.addOptionBox(\"role\", [\"Teacher\", \"Student\", \"Developer\", \"Volunteer\"], 2, 1)\n\napp.addButtons([\"Save\", \"Quit\"], press, 3, 0, 2)\n\napp.go()",
            "title": "Layout"
        },
        {
            "location": "/Layout/#background",
            "text": "RWBAtools was designed to make building a functional GUI as simple as possible.    It is designed with teaching in mind. Rather than pupils having to focus on the GUI code, they should be focusing on the algorithms that get the work done.  To that end, at it's simplest, you simply keep adding widgets to the GUI, and they will render in sequence.",
            "title": "Background"
        },
        {
            "location": "/Layout/#simple-layout",
            "text": "By default, each new widget is simply added on a new line. That way, you can very quickly, create a simple GUI:  from rwbatools import gui  \n\ndef changeLabel(btn):  \n    app.setLabel(\"l2\", app.getEntry(\"text\"))  \n\napp = gui()  \napp.addLabel(\"l1\", \"Simple Demo\")\napp.addEntry(\"text\")\napp.addButton(\"OK\", changeLabel)\napp.addEmptyLabel(\"l2\")\napp.go()",
            "title": "Simple Layout"
        },
        {
            "location": "/Layout/#grid-layout",
            "text": "If, however, you want more than that, then a basic GRID layout is supported.  Each time you add a widget, you can specify a column, row, and even a column-span to position it in.  from rwbatools import gui\n\ndef press(btn):\n    if btn==\"Save\":\n        n=app.getEntry(\"name\")\n        a=app.getEntry(\"age\")\n        r=app.getOptionBox(\"role\")\n        app.infoBox(\"Details\", \"You entered: {}, {}, {}\".format(n, str(a), r))\n    elif btn==\"Quit\":\n        app.stop()\n\napp=gui()\n\napp.addLabel(\"l1\", \"Name\", 0, 0)\napp.addLabel(\"l2\", \"Age\", 1, 0)\napp.addLabel(\"l3\", \"Role\", 2, 0)\n\napp.addEntry(\"name\", 0, 1)\napp.addNumericEntry(\"age\", 1, 1)\napp.addOptionBox(\"role\", [\"Teacher\", \"Student\", \"Developer\", \"Volunteer\"], 2, 1)\n\napp.addButtons([\"Save\", \"Quit\"], press, 3, 0, 2)\n\napp.go()",
            "title": "Grid Layout"
        },
        {
            "location": "/Widgets/",
            "text": "Widgets\n\n\n\n\nBelow is a comprehensive list of all the widgets that can be included in a GUI.\n\n\nThey are all used in the same way:\n\n\n\n\nFirst, \nADD\n a widget\n\n\nThen, \nSET\n any paramters for the widget\n\n\nFinally, if needed, \nGET\n the contents of the widget\n\n\n\n\nLabel\n\n\nLabels are used for displaying basic text on the screen.\n\n\nAdd Labels\n\n\n\n\n\n\n.addLabel(title, text=None)\n\n\nAt a minimum, a title must be provided - to identify the label. This is then followed by an optional piece of text to display.\n\n\n\n\n\n\n.addEmptyLabel(title)\n\n\nDoes the same as add a label, except there''s no parameter to set any text.\n\n\n\n\n\n\n.addFlashLabel(title, text=None)\n\n\nThis adds a flashing label, that will alternate between the foreground and background colours.\n\n\n\n\n\n\nChange Labels\n\n\n\n\n\n\n.setLabel(title, text)\n\n\nChange the contents of the label.\n\n\n\n\n\n\n.clearLabel(title)\n\n\nClear the contents of the label.\n\n\n\n\n\n\nGet Labels\n\n\n\n\n\n\n.getLabel(title)\n\n\nGet the contents of the label.\n\n\n\n\n\n\nAuto-Labelled Widgets\n\n\nIt's possible to autoimatically include a label alongside some widgets.\n\nBoth the label and widget will be placed in the same grid space.\n\nSimply add the word \nLabel\n to the command when adding the widget:  \n\n\n\n\n.addLabelEntry(title)\n\n\n.addLabelNumericlEntry(title)\n\n\n.addLabelSecretlEntry(title)\n\n\n.addLabelOptionBox(title, values)\n\n\n.addLabelSpinBox(title, values)\n\n\n.addLabelSpinBoxRange(title, from, to)\n  \n\n\n\n\nSee the relevant section for a description of what the widget does.\n\n\nEntry\n\n\nEntries are used to capture input from the user. They take a single parameter - a title.\n\n\nThere are two special-case entries:\n\n\n\n\nNumericEntry - this only allows numbrs to be typed in.\n\n\nSecretEntry - this will show stars, instead of the letters typed - useful for capturing passwords.\n\n\n\n\nAdd Entries\n\n\n\n\n.addEntry(title)\n\n\n.addNumericEntry(title)\n\n\n.addSecretEntry(title)\n\n\n\n\nChange Entries\n\n\n\n\n\n\n.setEntry(title, text)\n\n\nThis sets the contents of the specified entry box.\n\n\n\n\n\n\n.setEntryDefault(title, text)\n\n\nThis sets a default value to display in an entry box.\n\nOnce the user starts typing, it will disappear.\n\nThe text is centered, shown in a light gray font, and will not be returned by \n.getEntry(title)\n  \n\n\n\n\n\n\n.clearEntry(title)\n\n\nThis will clear the contents of the specified entry box.\n\n\n\n\n\n\n.clearAllEntries()\n\n\nThis will clear all the entry boxes in the GUI.\n\n\n\n\n\n\n.setFocus(title)\n\n\nThis will put the cursor in the specified entry box, so that the user can start typing without needing to click.\n\n\n\n\n\n\nGet Entries\n\n\n\n\n\n\n.getEntry(title)\n\n\nThis will return the contents of the spcified entry box.\n\n\n\n\n\n\nButton\n\n\nA clickable button, that will call a function.\n\nThese are the key to starting an interactive application.\n\nThe GUI is looping, waiting for something to happen.\n\nA button click is the classic way to start interacting with a GUI.\n\n\nWhenever any function is called by the GUI, the title of the widget that called it is passed as a parameter.\n\nThat way, multiple widgets can use the same function, but diffrent actions can be performed, depening on the name passed as a parameter.\n\n\nAdd Buttons\n\n\n\n\n\n\n.addButton(title, function)\n\n\nAdd a single button to the GUI, the text on the button will be the same as the button's title.\n\nA function should be specified, which will be called when the button is clicked.\n\n\n\n\n\n\n    from rwbatools import gui\n\n    def press(btn):                 # the title of the button will be received as a parameter\n        print(btn)\n\n    app=gui()\n    app.addButton(\"One\", press)     # 3 buttons, each calling the same function\n    app.addButton(\"Two\", press)\n    app.addButton(\"Three\", press)\n    app.go()\n\n\n\n\n\n\n\n\n.addButtons(titles, functions)\n\n\nIt's possible to add a list of buttons to the GUI.\n\nPass a 1-dimensional or 2-dimensional list, and they will be rendered accordingly.\nA single funciton can be passed, to use for all buttons.\nOr a list of functions can be passed, which MUST correspond to the buttons.\n\n\n\n\n\n\n.addNamedButton(name, title, function)\n\n\nBy default, it's not possible to have two buttons with the same text.\n\nIf that's required, a named button should be used.\n\nThis allows a name and title to be set for a button.\n\nThe name will be displayed on the button, and the title passed to the function.\n\n\n\n\n\n\nChange Buttons\n\n\n\n\n\n\n.setButton(name, text)\n\n\nThis will change the text displayed on a button, but \nNOT\n the value passed as a paramter to the function.\n\n\n\n\n\n\n.setButtonImage(title, image)\n\n\nThis allows an image to be placed on a button, instead of the usual text.\n\n\n\n\n\n\nRadioButton\n\n\nA group of round boxes, only one of which can be selected.\n\nThese are great for getting a single value, for a multiple choice question.\n\n\nAdd RadioButtons\n\n\n\n\n\n\n.addRadioButton(title, name)\n\n\nThis will create a RadioButton grouped by the specified title.\n\nThis button will have the value of name.\n\nRadio buttons are usually used in groups:\n\n\n\n\n\n\n    from rwbatools import gui\n\n    app=gui()\n    app.addRadioButton(\"song\", \"Killer Queen\")\n    app.addRadioButton(\"song\", \"Paradise City\")\n    app.addRadioButton(\"song\", \"Parklife\")\n    app.go()\n\n\n\n\nChange RadioButtons\n\n\n\n\n\n\n.setRadioButton(title, value)\n\n\nThis will tick the specified RadioButton.\n\n\n\n\n\n\n.setRadioTick(title, tick=True)\n\n\nIt is possible to use tick-boxes instead of the classic circular radio-button.\n\nSetting tick to True will convert all the radio-buttons for this title to tick boxes.\n\n\n\n\n\n\nGet RadioButtons\n\n\n\n\n\n\n.getRadioButton(title)\n\n\nGets the value of the selcted RadioButton, for the specified title.\n\n\n\n\n\n\n    from rwbatools import gui\n\n    def press(rb):\n        print(app.getRadioButton(\"song\"))\n\n    app=gui()\n    app.addRadioButton(\"song\", \"Killer Queen\")\n    app.addRadioButton(\"song\", \"Paradise City\")\n    app.setRadioButtonFunction(\"song\", press)   # call this funciton, when the RadioButton changes\n    app.addButton(\"PLAY\", press)\n    app.go()\n\n\n\n\nCheckBox\n\n\nA simple tick-box, with a label, that can be either ON or OFF.\n\n\nAdd CheckBoxes\n\n\n\n\n\n\n.addCheckBox(title)\n\n\nThis creates a CheckBox, with the specified title.\n\n\n\n\n\n\nChange CheckBoxes\n\n\n\n\n\n\n.setCheckBox(title, ticked=True)\n\n\nThis will tick the CheckBox, or untick it if ticked is set to False.\n\n\n\n\n\n\nGet CheckBoxes\n\n\n\n\n\n\n.getCheckBox(title)\n\n\nThis will return True or False, depending on the state of the CheckBox.\n\n\n\n\n\n\nOptionBox\n\n\nA drop-down single-select option\n\n\nAdd OptionBoxes\n\n\n\n\n\n\n.addOptionBox(title, values)\n\n\nThis will create an OptionBox, adding the contents of the values list, in the order specified.\n\n\n\n\n\n\nChange OptionBoxes\n\n\n\n\n\n\n.changeOptionBox(title, newOptions)\n\n\nThis will replace the contents of the OptionBox, with the new list provided.\n\n\n\n\n\n\n.setOptionBox(title, position)\n\n\nThis will select the item in the list, at the position specified.\n\n\n\n\n\n\nGet OptionBoxes\n\n\n\n\n.getOptionBox(title)\n\n\n\n\nSpinBox\n\n\nA scrollable option\n\n\nAdd SpinBoxes\n\n\n\n\n.addSpinBox(title, values)\n\n\n.addSpinBoxRange(title, from, to)\n\n\n\n\nChange SpinBoxes\n\n\n\n\n.setSpinBox(title, value)\n\n\n.setSpinBoxPos(title, pos)\n\n\n\n\nGet SpinBoxes\n\n\n\n\n.getSpinBox(title)\n\n\n\n\nListBox\n\n\nA box containing a list of items, single or multi-select\n\n\nAdd ListBoxes\n\n\n\n\n.addListBox(title, values)\n\n\n.addListItem(title, item)\n\n\n.addListItems(title, items)\n\n\n\n\nChange ListBoxes\n\n\n\n\n.setListBoxRows(title)\n\n\n.setListSingle(list, single)\n\n\n.selectListItem(title, item)\n\n\n.updateListItems(title, items)\n\n\n.removeListItem(title, item)\n\n\n.clearListBox(title)\n\n\n\n\nGet ListBoxes\n\n\n\n\n.getListItems(title)\n\n\n\n\nScale\n\n\nA slider, that has a minimum & maximum value\n\n\nAdd Scales\n\n\n\n\n.addScale(title)\n\n\n\n\nChange Scales\n\n\n\n\n.setScaleRange(title from, to, curr=0)\n\n\n.orientScaleHor(title, hor=True)\n\n\n.setScale(title, pos)\n\n\n.showScaleValue(title, show=True)\n\n\n\n\nGet Scales\n\n\n\n\n.getScale(title)\n\n\n\n\nMessage\n\n\nLike a multi-line label\n\n\nAdd Messages\n\n\n\n\n.addMessage(title, text)\n\n\n.addEmptyMessage(title)\n\n\n\n\nChange Messages\n\n\n\n\n.clearMessage(title)\n\n\n.setMessage(title, text)\n\n\n\n\nTextArea\n\n\nA multi-line box for typing text\n\n\nAdd TextAreas\n\n\n\n\n.addTextArea(title)\n\n\n.addScrolledTextArea(title)\n\n\n\n\nChange TextAreas\n\n\n\n\n.setTextArea(title, text)\n\n\n.clearTextArea(title)\n\n\n.logTextArea(title)\n\n\n.textAreaChanged(title)\n\n\n\n\nGet TextAreas\n\n\n\n\n.getTextArea(title)\n\n\n\n\nMeter\n\n\nUsed for showing progress\n\n\n\n\n\n\nMeter\n\n\nShows a simple progress meter\n\n\n\n\n\n\naddMeter(name)\n\n\nAdds a meter with the specified name.\n\n\n\n\n\n\nsetMeter(name, value, text=None)\n\n\nChanges the specified meter to the specified value, between 0 and 100, with the optional text.\n\n\n\n\n\n\nsetMeterFill(name, colour)\n\n\nChanges the fill colour of the specified meter.\n\n\n\n\n\n\ngetMeter(name)\n\n\nGets the value of the specified meter.\n\n\n\n\n\n\n\n\n\n\nSplitMeter\n\n\nShows two values, left & right\n\n\n\n\n\n\nDualMeter\n\n\nShows percentage left & right\n\n\n\n\n\n\nSeparator\n\n\nShows a horizontal line\n\n\n\n\n.addSeparator()\n\n\n\n\nLink/WebLink\n\n\nClickable text to call a function or launch a URL\n\n\nAdd Links\n\n\n\n\n\n\n.addLink(title, func)\n\n\nAdds a \nhyperlink\n, that when clicked, will call the spcified function.\n\n\n\n\n\n\n.addWebLink(title, page)\n\n\nAdds a \nhyperlink\n, that when clicked, will launch the default browser, and load the page parameter.\n\n\n\n\n\n\nImage\n\n\nShows an image, there are lots of things you can do with an image.\n\n\nAdd Images\n\n\n\n\n.addImage(name, file)\n\n\n.addAnimatedImage(name, file)\n \n\n\n\n\nChange Images\n\n\n\n\n.setImage(name, image)\n\n\n.setImageSize(name, width, height)\n\n\n\n\n.zoomImage(name, mod)\n\n\nNegative will shrink, positive will grow.\n\n\n\n\n\n\n.shrinkImage(name, mod)\n\n\n\n\n.growImage(name, mod)\n\n\n\n\nChange Image Animation\n\n\n\n\n.setAnimationSpeed(name, speed)\n\n\n.stopAnimation(name)\n\n\n.startAnimation(name)\n\n\n\n\nChange Background Images\n\n\n\n\n.setBgImage(image)\n\n\n.removeBgImage(image)",
            "title": "Widgets"
        },
        {
            "location": "/Widgets/#widgets",
            "text": "Below is a comprehensive list of all the widgets that can be included in a GUI.  They are all used in the same way:   First,  ADD  a widget  Then,  SET  any paramters for the widget  Finally, if needed,  GET  the contents of the widget",
            "title": "Widgets"
        },
        {
            "location": "/Widgets/#label",
            "text": "Labels are used for displaying basic text on the screen.",
            "title": "Label"
        },
        {
            "location": "/Widgets/#add-labels",
            "text": ".addLabel(title, text=None)  At a minimum, a title must be provided - to identify the label. This is then followed by an optional piece of text to display.    .addEmptyLabel(title)  Does the same as add a label, except there''s no parameter to set any text.    .addFlashLabel(title, text=None)  This adds a flashing label, that will alternate between the foreground and background colours.",
            "title": "Add Labels"
        },
        {
            "location": "/Widgets/#change-labels",
            "text": ".setLabel(title, text)  Change the contents of the label.    .clearLabel(title)  Clear the contents of the label.",
            "title": "Change Labels"
        },
        {
            "location": "/Widgets/#get-labels",
            "text": ".getLabel(title)  Get the contents of the label.",
            "title": "Get Labels"
        },
        {
            "location": "/Widgets/#auto-labelled-widgets",
            "text": "It's possible to autoimatically include a label alongside some widgets. \nBoth the label and widget will be placed in the same grid space. \nSimply add the word  Label  to the command when adding the widget:     .addLabelEntry(title)  .addLabelNumericlEntry(title)  .addLabelSecretlEntry(title)  .addLabelOptionBox(title, values)  .addLabelSpinBox(title, values)  .addLabelSpinBoxRange(title, from, to)      See the relevant section for a description of what the widget does.",
            "title": "Auto-Labelled Widgets"
        },
        {
            "location": "/Widgets/#entry",
            "text": "Entries are used to capture input from the user. They take a single parameter - a title.  There are two special-case entries:   NumericEntry - this only allows numbrs to be typed in.  SecretEntry - this will show stars, instead of the letters typed - useful for capturing passwords.",
            "title": "Entry"
        },
        {
            "location": "/Widgets/#add-entries",
            "text": ".addEntry(title)  .addNumericEntry(title)  .addSecretEntry(title)",
            "title": "Add Entries"
        },
        {
            "location": "/Widgets/#change-entries",
            "text": ".setEntry(title, text)  This sets the contents of the specified entry box.    .setEntryDefault(title, text)  This sets a default value to display in an entry box. \nOnce the user starts typing, it will disappear. \nThe text is centered, shown in a light gray font, and will not be returned by  .getEntry(title)       .clearEntry(title)  This will clear the contents of the specified entry box.    .clearAllEntries()  This will clear all the entry boxes in the GUI.    .setFocus(title)  This will put the cursor in the specified entry box, so that the user can start typing without needing to click.",
            "title": "Change Entries"
        },
        {
            "location": "/Widgets/#get-entries",
            "text": ".getEntry(title)  This will return the contents of the spcified entry box.",
            "title": "Get Entries"
        },
        {
            "location": "/Widgets/#button",
            "text": "A clickable button, that will call a function. \nThese are the key to starting an interactive application. \nThe GUI is looping, waiting for something to happen. \nA button click is the classic way to start interacting with a GUI.  Whenever any function is called by the GUI, the title of the widget that called it is passed as a parameter. \nThat way, multiple widgets can use the same function, but diffrent actions can be performed, depening on the name passed as a parameter.",
            "title": "Button"
        },
        {
            "location": "/Widgets/#add-buttons",
            "text": ".addButton(title, function)  Add a single button to the GUI, the text on the button will be the same as the button's title. \nA function should be specified, which will be called when the button is clicked.        from rwbatools import gui\n\n    def press(btn):                 # the title of the button will be received as a parameter\n        print(btn)\n\n    app=gui()\n    app.addButton(\"One\", press)     # 3 buttons, each calling the same function\n    app.addButton(\"Two\", press)\n    app.addButton(\"Three\", press)\n    app.go()    .addButtons(titles, functions)  It's possible to add a list of buttons to the GUI. \nPass a 1-dimensional or 2-dimensional list, and they will be rendered accordingly.\nA single funciton can be passed, to use for all buttons.\nOr a list of functions can be passed, which MUST correspond to the buttons.    .addNamedButton(name, title, function)  By default, it's not possible to have two buttons with the same text. \nIf that's required, a named button should be used. \nThis allows a name and title to be set for a button. \nThe name will be displayed on the button, and the title passed to the function.",
            "title": "Add Buttons"
        },
        {
            "location": "/Widgets/#change-buttons",
            "text": ".setButton(name, text)  This will change the text displayed on a button, but  NOT  the value passed as a paramter to the function.    .setButtonImage(title, image)  This allows an image to be placed on a button, instead of the usual text.",
            "title": "Change Buttons"
        },
        {
            "location": "/Widgets/#radiobutton",
            "text": "A group of round boxes, only one of which can be selected. \nThese are great for getting a single value, for a multiple choice question.",
            "title": "RadioButton"
        },
        {
            "location": "/Widgets/#add-radiobuttons",
            "text": ".addRadioButton(title, name)  This will create a RadioButton grouped by the specified title. \nThis button will have the value of name. \nRadio buttons are usually used in groups:        from rwbatools import gui\n\n    app=gui()\n    app.addRadioButton(\"song\", \"Killer Queen\")\n    app.addRadioButton(\"song\", \"Paradise City\")\n    app.addRadioButton(\"song\", \"Parklife\")\n    app.go()",
            "title": "Add RadioButtons"
        },
        {
            "location": "/Widgets/#change-radiobuttons",
            "text": ".setRadioButton(title, value)  This will tick the specified RadioButton.    .setRadioTick(title, tick=True)  It is possible to use tick-boxes instead of the classic circular radio-button. \nSetting tick to True will convert all the radio-buttons for this title to tick boxes.",
            "title": "Change RadioButtons"
        },
        {
            "location": "/Widgets/#get-radiobuttons",
            "text": ".getRadioButton(title)  Gets the value of the selcted RadioButton, for the specified title.        from rwbatools import gui\n\n    def press(rb):\n        print(app.getRadioButton(\"song\"))\n\n    app=gui()\n    app.addRadioButton(\"song\", \"Killer Queen\")\n    app.addRadioButton(\"song\", \"Paradise City\")\n    app.setRadioButtonFunction(\"song\", press)   # call this funciton, when the RadioButton changes\n    app.addButton(\"PLAY\", press)\n    app.go()",
            "title": "Get RadioButtons"
        },
        {
            "location": "/Widgets/#checkbox",
            "text": "A simple tick-box, with a label, that can be either ON or OFF.",
            "title": "CheckBox"
        },
        {
            "location": "/Widgets/#add-checkboxes",
            "text": ".addCheckBox(title)  This creates a CheckBox, with the specified title.",
            "title": "Add CheckBoxes"
        },
        {
            "location": "/Widgets/#change-checkboxes",
            "text": ".setCheckBox(title, ticked=True)  This will tick the CheckBox, or untick it if ticked is set to False.",
            "title": "Change CheckBoxes"
        },
        {
            "location": "/Widgets/#get-checkboxes",
            "text": ".getCheckBox(title)  This will return True or False, depending on the state of the CheckBox.",
            "title": "Get CheckBoxes"
        },
        {
            "location": "/Widgets/#optionbox",
            "text": "A drop-down single-select option",
            "title": "OptionBox"
        },
        {
            "location": "/Widgets/#add-optionboxes",
            "text": ".addOptionBox(title, values)  This will create an OptionBox, adding the contents of the values list, in the order specified.",
            "title": "Add OptionBoxes"
        },
        {
            "location": "/Widgets/#change-optionboxes",
            "text": ".changeOptionBox(title, newOptions)  This will replace the contents of the OptionBox, with the new list provided.    .setOptionBox(title, position)  This will select the item in the list, at the position specified.",
            "title": "Change OptionBoxes"
        },
        {
            "location": "/Widgets/#get-optionboxes",
            "text": ".getOptionBox(title)",
            "title": "Get OptionBoxes"
        },
        {
            "location": "/Widgets/#spinbox",
            "text": "A scrollable option",
            "title": "SpinBox"
        },
        {
            "location": "/Widgets/#add-spinboxes",
            "text": ".addSpinBox(title, values)  .addSpinBoxRange(title, from, to)",
            "title": "Add SpinBoxes"
        },
        {
            "location": "/Widgets/#change-spinboxes",
            "text": ".setSpinBox(title, value)  .setSpinBoxPos(title, pos)",
            "title": "Change SpinBoxes"
        },
        {
            "location": "/Widgets/#get-spinboxes",
            "text": ".getSpinBox(title)",
            "title": "Get SpinBoxes"
        },
        {
            "location": "/Widgets/#listbox",
            "text": "A box containing a list of items, single or multi-select",
            "title": "ListBox"
        },
        {
            "location": "/Widgets/#add-listboxes",
            "text": ".addListBox(title, values)  .addListItem(title, item)  .addListItems(title, items)",
            "title": "Add ListBoxes"
        },
        {
            "location": "/Widgets/#change-listboxes",
            "text": ".setListBoxRows(title)  .setListSingle(list, single)  .selectListItem(title, item)  .updateListItems(title, items)  .removeListItem(title, item)  .clearListBox(title)",
            "title": "Change ListBoxes"
        },
        {
            "location": "/Widgets/#get-listboxes",
            "text": ".getListItems(title)",
            "title": "Get ListBoxes"
        },
        {
            "location": "/Widgets/#scale",
            "text": "A slider, that has a minimum & maximum value",
            "title": "Scale"
        },
        {
            "location": "/Widgets/#add-scales",
            "text": ".addScale(title)",
            "title": "Add Scales"
        },
        {
            "location": "/Widgets/#change-scales",
            "text": ".setScaleRange(title from, to, curr=0)  .orientScaleHor(title, hor=True)  .setScale(title, pos)  .showScaleValue(title, show=True)",
            "title": "Change Scales"
        },
        {
            "location": "/Widgets/#get-scales",
            "text": ".getScale(title)",
            "title": "Get Scales"
        },
        {
            "location": "/Widgets/#message",
            "text": "Like a multi-line label",
            "title": "Message"
        },
        {
            "location": "/Widgets/#add-messages",
            "text": ".addMessage(title, text)  .addEmptyMessage(title)",
            "title": "Add Messages"
        },
        {
            "location": "/Widgets/#change-messages",
            "text": ".clearMessage(title)  .setMessage(title, text)",
            "title": "Change Messages"
        },
        {
            "location": "/Widgets/#textarea",
            "text": "A multi-line box for typing text",
            "title": "TextArea"
        },
        {
            "location": "/Widgets/#add-textareas",
            "text": ".addTextArea(title)  .addScrolledTextArea(title)",
            "title": "Add TextAreas"
        },
        {
            "location": "/Widgets/#change-textareas",
            "text": ".setTextArea(title, text)  .clearTextArea(title)  .logTextArea(title)  .textAreaChanged(title)",
            "title": "Change TextAreas"
        },
        {
            "location": "/Widgets/#get-textareas",
            "text": ".getTextArea(title)",
            "title": "Get TextAreas"
        },
        {
            "location": "/Widgets/#meter",
            "text": "Used for showing progress",
            "title": "Meter"
        },
        {
            "location": "/Widgets/#meter_1",
            "text": "Shows a simple progress meter    addMeter(name)  Adds a meter with the specified name.    setMeter(name, value, text=None)  Changes the specified meter to the specified value, between 0 and 100, with the optional text.    setMeterFill(name, colour)  Changes the fill colour of the specified meter.    getMeter(name)  Gets the value of the specified meter.",
            "title": "Meter"
        },
        {
            "location": "/Widgets/#splitmeter",
            "text": "Shows two values, left & right",
            "title": "SplitMeter"
        },
        {
            "location": "/Widgets/#dualmeter",
            "text": "Shows percentage left & right",
            "title": "DualMeter"
        },
        {
            "location": "/Widgets/#separator",
            "text": "Shows a horizontal line   .addSeparator()",
            "title": "Separator"
        },
        {
            "location": "/Widgets/#linkweblink",
            "text": "Clickable text to call a function or launch a URL",
            "title": "Link/WebLink"
        },
        {
            "location": "/Widgets/#add-links",
            "text": ".addLink(title, func)  Adds a  hyperlink , that when clicked, will call the spcified function.    .addWebLink(title, page)  Adds a  hyperlink , that when clicked, will launch the default browser, and load the page parameter.",
            "title": "Add Links"
        },
        {
            "location": "/Widgets/#image",
            "text": "Shows an image, there are lots of things you can do with an image.",
            "title": "Image"
        },
        {
            "location": "/Widgets/#add-images",
            "text": ".addImage(name, file)  .addAnimatedImage(name, file)",
            "title": "Add Images"
        },
        {
            "location": "/Widgets/#change-images",
            "text": ".setImage(name, image)  .setImageSize(name, width, height)   .zoomImage(name, mod)  Negative will shrink, positive will grow.    .shrinkImage(name, mod)   .growImage(name, mod)",
            "title": "Change Images"
        },
        {
            "location": "/Widgets/#change-image-animation",
            "text": ".setAnimationSpeed(name, speed)  .stopAnimation(name)  .startAnimation(name)",
            "title": "Change Image Animation"
        },
        {
            "location": "/Widgets/#change-background-images",
            "text": ".setBgImage(image)  .removeBgImage(image)",
            "title": "Change Background Images"
        },
        {
            "location": "/WidgetOptions/",
            "text": "Widget Options\n\n\n\n\nThere are a lot of things that can be configured on a widget.\n\n\nThere is a pattern to how this works, you simply specify the widget type and the parameter, eg:\n\n\n\n\n.setLabelBg(name, value)\n\n\n.setButtonFg(name, value)\n\n\n.setListBoxState(name, value)\n\n\n\n\nThe list of widgets is defined in \ngui.WIDGETS\n, it contains:\nLabel, Message, Button, Entry, Scale, SpinBox, OptionBox, TextArea, Link, Meter, Image, RadioButton, CheckBox, ListBox, LabelFrame, PanedWindow, NoteBook\n\n\nBasic Configuration\n\n\n\n\nThe following options are available for all widgets:\n\n\n\n\n\n\nset XXX Bg(name, value)\n\n\nSets the background colour of the named widget.\n\n\n\n\n\n\nset XXX Fg(name, value)\n\n\nSets the foregound colour (usually the text) of the named widget.\n\n\n\n\n\n\nset XXX DisabledBg(name, value)\n\n\nSets the disabled background colour of the named widget.\n\n\n\n\n\n\nset XXX EnabledFg(name, value)\n\n\nSets the disabled foreground colour (usually the text) of the named widget.\n\n\n\n\n\n\nset XXX Width(name, value)\n\n\nSets the width of the named widget.\n\n\n\n\n\n\nset XXX Height(name, value)\n\n\nSet the height of the named widget.\n\n\n\n\n\n\nset XXX State(name, value)\n\n\nSets the state of the named widget.\n\nOne of: NORMAL, ACTIVE, DISABLED  \n\n\n\n\n\n\nAdvanced Configuration\n\n\n\n\nThe following are supported by most widgets:\n\n\n\n\n\n\nset XXX Relief(name, value)\n\n\nSets the border for the widget.\n\nOne of: SUNKEN, RAISED, GROOVE, RIDGE, FLAT  \n\n\n\n\n\n\nset XXX Align(name, value)\n\n\n\n\n\n\nset XXX Anchor(name, value)\n\n\nSets where the text is positioned within the widget.\n\nOne of: CENTER, N, S, E, W, NE, SE, SW, NW  \n\n\n\n\n\n\nset XXX Tooltip(name, value)\n\n\nSets a tooltip for the widget.\nThe specified text will be displayed in a small pop-up, when the mouse is left over the widget.\n\n\n\n\n\n\nset XXX Function(name, value, key=None)\n\n\nThis binds a function to the widget.\n\nThe function will be called every time an interactive-widget changes. \nThe funcion will be called when some widgets are clicked.  \n\n\n\n\n\n\nset XXX DragFunction(name, value, key=None)\n\n\n\n\nset XXX OverFunction(name, value, key=None)\n\n\nset XXX Cursor(name, value)\n\n\n\n\nset XXX Focus(name)\n\n\nGives focus to the specified widget.\n\n\n\n\n\n\nset XXX Sticky(name, value)\n\n\n\n\n\n\nWidget Manipulaiton\n\n\n\n\nThe following allow widgets to be manipulated:\n\n\n\n\n.show XXX (name)\n\n\n.hide XXX (name)\n\n\n.remove XXX (name)\n\n\n.removeAllWidgets()\n\n\n.enable XXX (name)\n\n\n.disable XXX (name)\n\n\n\n\nGrouped Options\n\n\n\n\n\n\nset XXX Widths(names, val)\n\n\nset XXX Heights(names, val)\n\n\nsetAll XXX Widths(val)\n\n\nsetAll XXX Heights(val)",
            "title": "Widget Options"
        },
        {
            "location": "/WidgetOptions/#widget-options",
            "text": "There are a lot of things that can be configured on a widget.  There is a pattern to how this works, you simply specify the widget type and the parameter, eg:   .setLabelBg(name, value)  .setButtonFg(name, value)  .setListBoxState(name, value)   The list of widgets is defined in  gui.WIDGETS , it contains:\nLabel, Message, Button, Entry, Scale, SpinBox, OptionBox, TextArea, Link, Meter, Image, RadioButton, CheckBox, ListBox, LabelFrame, PanedWindow, NoteBook",
            "title": "Widget Options"
        },
        {
            "location": "/WidgetOptions/#basic-configuration",
            "text": "The following options are available for all widgets:    set XXX Bg(name, value)  Sets the background colour of the named widget.    set XXX Fg(name, value)  Sets the foregound colour (usually the text) of the named widget.    set XXX DisabledBg(name, value)  Sets the disabled background colour of the named widget.    set XXX EnabledFg(name, value)  Sets the disabled foreground colour (usually the text) of the named widget.    set XXX Width(name, value)  Sets the width of the named widget.    set XXX Height(name, value)  Set the height of the named widget.    set XXX State(name, value)  Sets the state of the named widget. \nOne of: NORMAL, ACTIVE, DISABLED",
            "title": "Basic Configuration"
        },
        {
            "location": "/WidgetOptions/#advanced-configuration",
            "text": "The following are supported by most widgets:    set XXX Relief(name, value)  Sets the border for the widget. \nOne of: SUNKEN, RAISED, GROOVE, RIDGE, FLAT      set XXX Align(name, value)    set XXX Anchor(name, value)  Sets where the text is positioned within the widget. \nOne of: CENTER, N, S, E, W, NE, SE, SW, NW      set XXX Tooltip(name, value)  Sets a tooltip for the widget.\nThe specified text will be displayed in a small pop-up, when the mouse is left over the widget.    set XXX Function(name, value, key=None)  This binds a function to the widget. \nThe function will be called every time an interactive-widget changes. \nThe funcion will be called when some widgets are clicked.      set XXX DragFunction(name, value, key=None)   set XXX OverFunction(name, value, key=None)  set XXX Cursor(name, value)   set XXX Focus(name)  Gives focus to the specified widget.    set XXX Sticky(name, value)",
            "title": "Advanced Configuration"
        },
        {
            "location": "/WidgetOptions/#widget-manipulaiton",
            "text": "The following allow widgets to be manipulated:   .show XXX (name)  .hide XXX (name)  .remove XXX (name)  .removeAllWidgets()  .enable XXX (name)  .disable XXX (name)",
            "title": "Widget Manipulaiton"
        },
        {
            "location": "/WidgetOptions/#grouped-options",
            "text": "set XXX Widths(names, val)  set XXX Heights(names, val)  setAll XXX Widths(val)  setAll XXX Heights(val)",
            "title": "Grouped Options"
        },
        {
            "location": "/Bars/",
            "text": "Toolbars, Menus & StatusBars\n\n\n\n\nToolBar\n\n\nAdds a toolbar along the top of the GUI\n\n\nCreate Toolbars\n\n\n\n\n\n\n.addToolbar(names, funcs)\n\n\nWill add a list of buttons along the top, in a toolbar. Each button will call the corresponding function.\n\nIf only one function is supplied, they will all call the same function.\n\nA bundle of free images is available, if the name used for the toolbar matches the nam of an image, an image will be used.  \n\n\n\n\n\n\nChange Toolbars\n\n\n\n\n.setToolbarImage(name, image)\n\nWill set an image for the corresponding button in the toolbar.\n\n\n\n\nMenu\n\n\nAdds a standard Menu bar along the top of the GUI\nThe menu bar will show, once the first menu has been added.\nYou can add a single menu option, or a list of menu options.\n\n\nCreate Menus\n\n\n\n\n\n\n.addMenu(title, function)\n\n\nAdds a single menu option, that will call the specified function.\n\n\n\n\n\n\n.addMenuList(title, names, functions, tearable=False)\n\n\nWill create a top-level menu, with the specified title.\n\nWithin the menu will be the list of names, each calling the corresponding function in the function list.\n\nIf only one function is provided, all menus will call the same function.\n\nIf the menu name is a '-', then a separator will be added to the menu.\n\nIf tearable is set to True, then the menu can be undocked.  \n\n\n\n\n\n\n.createMenu(title, tearable=False)\n\n\nWill create a top-level menu, to add memnu items to.\n\n\n\n\n\n\n.addMenuItem(title, item, func=None)\n\n\nAdd a sub-menu to the named top-level menu, with the specified function\nIf the menu name is a '-', then a separator will be added to the menu.\n\n\n\n\n\n\n.addMenuSeparator(title)\n\n\nAdd a separator to the named menu.\n\n\n\n\n\n\n.addMenuCheckBox(title, name)\n\n\nAdd a check box, to the named menu, with the specified name.\n\n\n\n\n\n\n.addMenuRadioButton(title, menu, name, value)\n\n\nAdd a radio button, to the named menu, grouped by name, with the specified value.\n\n\n\n\n\n\nChange Menus\n\n\n\n\n\n\n.setMenuCheckBox(title, menu)\n\n\nInverts the specified check box, in the named menu.\n\n\n\n\n\n\n.setMenuRadioButton(title, menu, value)\n\n\nSelects the specified value, of the specified radio button, in the named menu.\n\n\n\n\n\n\nGet Menus\n\n\n\n\n\n\n.getMenuCheckBox(title, menu)\n\n\nGet the value of the specified check box, from the named menu.\n\n\nReturns True or False.\n\n\n\n\n\n\n.getMenuRadioButton(title, menu)\n\n\nGet the value of the specified radio button, from the named menu.\n\n\nReturns the value of the checked radio button.\n\n\n\n\n\n\nStatus\n\n\nAdds a status bar along the bottom of the GUI.\nThis can be used for easy debugging, or as info for the user.\n\n\nCreate Statuses\n\n\n\n\n\n\n.addStatus(header=\"\", fields=1, side=None)\n\n\nThis turns the status bar on, and if a header is supplied, will prepend the header before every message.\n\nIf fields is populated, it''s possible to have multiple status bixes, each addressable by a number.\n\nSide can be set as LEFT/RIGHT to make the fields appear rom the left or rigt side, otherwise they will stretch equally.\n\n\n\n\n\n\nChange Statuses\n\n\n\n\n\n\n.setStatus(text, field=0)\n\n\nThis updates the contents of the status bar. Again, if a header was set when adding the status bar, that will be prepended to the message.\n\nIf multiple fields were created, a position can be supplied to populate.\n\n\n\n\n\n\n.clearStatus(field=0)\n\n\nClear anything displayed in the status bar, along with any header that might be set.\n\n\n\n\n\n\n.setStatusWidth(width, field=0)\n\n\nSet the width of the specified status field.",
            "title": "Bars"
        },
        {
            "location": "/Bars/#toolbars-menus-statusbars",
            "text": "",
            "title": "Toolbars, Menus &amp; StatusBars"
        },
        {
            "location": "/Bars/#toolbar",
            "text": "Adds a toolbar along the top of the GUI",
            "title": "ToolBar"
        },
        {
            "location": "/Bars/#create-toolbars",
            "text": ".addToolbar(names, funcs)  Will add a list of buttons along the top, in a toolbar. Each button will call the corresponding function. \nIf only one function is supplied, they will all call the same function. \nA bundle of free images is available, if the name used for the toolbar matches the nam of an image, an image will be used.",
            "title": "Create Toolbars"
        },
        {
            "location": "/Bars/#change-toolbars",
            "text": ".setToolbarImage(name, image) \nWill set an image for the corresponding button in the toolbar.",
            "title": "Change Toolbars"
        },
        {
            "location": "/Bars/#menu",
            "text": "Adds a standard Menu bar along the top of the GUI\nThe menu bar will show, once the first menu has been added.\nYou can add a single menu option, or a list of menu options.",
            "title": "Menu"
        },
        {
            "location": "/Bars/#create-menus",
            "text": ".addMenu(title, function)  Adds a single menu option, that will call the specified function.    .addMenuList(title, names, functions, tearable=False)  Will create a top-level menu, with the specified title. \nWithin the menu will be the list of names, each calling the corresponding function in the function list. \nIf only one function is provided, all menus will call the same function. \nIf the menu name is a '-', then a separator will be added to the menu. \nIf tearable is set to True, then the menu can be undocked.      .createMenu(title, tearable=False)  Will create a top-level menu, to add memnu items to.    .addMenuItem(title, item, func=None)  Add a sub-menu to the named top-level menu, with the specified function\nIf the menu name is a '-', then a separator will be added to the menu.    .addMenuSeparator(title)  Add a separator to the named menu.    .addMenuCheckBox(title, name)  Add a check box, to the named menu, with the specified name.    .addMenuRadioButton(title, menu, name, value)  Add a radio button, to the named menu, grouped by name, with the specified value.",
            "title": "Create Menus"
        },
        {
            "location": "/Bars/#change-menus",
            "text": ".setMenuCheckBox(title, menu)  Inverts the specified check box, in the named menu.    .setMenuRadioButton(title, menu, value)  Selects the specified value, of the specified radio button, in the named menu.",
            "title": "Change Menus"
        },
        {
            "location": "/Bars/#get-menus",
            "text": ".getMenuCheckBox(title, menu)  Get the value of the specified check box, from the named menu.  Returns True or False.    .getMenuRadioButton(title, menu)  Get the value of the specified radio button, from the named menu.  Returns the value of the checked radio button.",
            "title": "Get Menus"
        },
        {
            "location": "/Bars/#status",
            "text": "Adds a status bar along the bottom of the GUI.\nThis can be used for easy debugging, or as info for the user.",
            "title": "Status"
        },
        {
            "location": "/Bars/#create-statuses",
            "text": ".addStatus(header=\"\", fields=1, side=None)  This turns the status bar on, and if a header is supplied, will prepend the header before every message. \nIf fields is populated, it''s possible to have multiple status bixes, each addressable by a number. \nSide can be set as LEFT/RIGHT to make the fields appear rom the left or rigt side, otherwise they will stretch equally.",
            "title": "Create Statuses"
        },
        {
            "location": "/Bars/#change-statuses",
            "text": ".setStatus(text, field=0)  This updates the contents of the status bar. Again, if a header was set when adding the status bar, that will be prepended to the message. \nIf multiple fields were created, a position can be supplied to populate.    .clearStatus(field=0)  Clear anything displayed in the status bar, along with any header that might be set.    .setStatusWidth(width, field=0)  Set the width of the specified status field.",
            "title": "Change Statuses"
        },
        {
            "location": "/Dialogs/",
            "text": "Dialogs\n\n\n\n\nA number of dialogs are available, to add a different user experience, notify the user of information, or get one off pieces of data.\n\n\nMessage Boxes\n\n\n\n\n\n\n.infoBox(title, message)\n\n\nShows a simple information message, with an OK button.\n\n\n\n\n\n\n\n\n.errorBox(title, message)\n\n\nShows a simple error message, with an OK button.\n\n\n\n\n\n\n\n\n.warningBox(title, message)\n\n\nShows a simple warning message, with an OK message.\n\n\n\n\n\n\n\n\nQuestion Boxes\n\n\n\n\n\n\n.yesNoBox(title, message)\n\n\nShows a question, with Yes/No buttons. Returns True/False.\n\n\n\n\n\n\n\n\n.questionBox(title, message)\n\n\nShows a question, with Yes/No buttons. Returns True/False.\n\n\n\n\n\n\n\n\n.okBox(title, message)\n\n\nShows a question, with OK/Cancel buttons. Returns True/False.\n\n\n\n\n\n\n\n\n.retryBox(title, message)\n\n\nShows a question, with Cancel/Retry buttons. Returns True/False.\n\n\n\n\n\n\n\n\n.textBox(title, message)\n\n\nShows a question requesting a text response. Returns a String, or None if Cancel pressed.\n\n\n\n\n\n\n\n\n.numberBox(title, message)\n\n    Shows a question requesting a numeric response. Returns a number, or None if Cancel pressed.\n\n\n\n\n\n\n\n\nFile Boxes\n\n\n\n\n.openBox()\n\n\n.saveBox()\n\n\n.directoryBox()\n\n\n\n\nOther Boxes\n\n\n\n\n.colourBox()",
            "title": "Dialogs"
        },
        {
            "location": "/Dialogs/#dialogs",
            "text": "A number of dialogs are available, to add a different user experience, notify the user of information, or get one off pieces of data.",
            "title": "Dialogs"
        },
        {
            "location": "/Dialogs/#message-boxes",
            "text": ".infoBox(title, message)  Shows a simple information message, with an OK button.     .errorBox(title, message)  Shows a simple error message, with an OK button.     .warningBox(title, message)  Shows a simple warning message, with an OK message.",
            "title": "Message Boxes"
        },
        {
            "location": "/Dialogs/#question-boxes",
            "text": ".yesNoBox(title, message)  Shows a question, with Yes/No buttons. Returns True/False.     .questionBox(title, message)  Shows a question, with Yes/No buttons. Returns True/False.     .okBox(title, message)  Shows a question, with OK/Cancel buttons. Returns True/False.     .retryBox(title, message)  Shows a question, with Cancel/Retry buttons. Returns True/False.     .textBox(title, message)  Shows a question requesting a text response. Returns a String, or None if Cancel pressed.     .numberBox(title, message) \n    Shows a question requesting a numeric response. Returns a number, or None if Cancel pressed.",
            "title": "Question Boxes"
        },
        {
            "location": "/Dialogs/#file-boxes",
            "text": ".openBox()  .saveBox()  .directoryBox()",
            "title": "File Boxes"
        },
        {
            "location": "/Dialogs/#other-boxes",
            "text": ".colourBox()",
            "title": "Other Boxes"
        },
        {
            "location": "/Sound/",
            "text": "Sound\n\n\n\n\nThe GUI can also make SOUND (on Windows).\n\nThis uses the winsound API, so is very limited - must be a WAV file.\n\n\nSound Files\n\n\n\n\n\n\n.playSound(sound, wait=False)\n\n\nPlay the named sound file.\n\nBy default, the sound is played asynchronously, meaning the function will return immediately, even though the sound hasn't finished playing.\n\nIt is possible to override this, by setting wait to True. This is not recommended though, as the GUI will become unresponsive.\n\n\n\n\n\n\n.stopSound()\n\n\nThis will stop whatever sound is currently being played.\n\n\n\n\n\n\n.loopSound(sound)\n\n\nThis will play the named sound in a loop.\n\n\n\n\n\n\nBuilt-In Sounds\n\n\n\n\n\n\n.soundError()\n\n\nThis will sound a simple error beep.\n\n\n\n\n\n\n.soundWarning()\n\n\nThis will sound a simple warning beep.\n\n\n\n\n\n\nMusical Notes\n\n\n\n\n\n\n.playNote(note, duration=200)\n\n\nSupport is built in for playing musical notes, using winsound.\nThe note can be a numeric frequency, or a String note.\nThe duration can be a number in milliseconds, or a String duration.\n\n\nOver 50 String notes are available, such as:\n\n\n\n\nf#1 = 46\n\n\nb7 = 3951\n\n\ng9 = 12543  \n\n\n\n\nThe following String durations are supported:\n\n\n\n\nBREVE = 2000\n\n\nSEMIBREVE = 1000\n\n\nMINIM = 500\n\n\nCROTCHET = 250\n\n\nQUAVER = 125\n\n\nSEMIQUAVER = 63\n\n\nDEMISEMIQUAVER = 32\n\n\nHEMIDEMISEMIQUAVER = 16\n\n\n\n\nThese can be accessed through the variables \ngui.NOTES\n and \ngui.DURATIONS",
            "title": "Sound"
        },
        {
            "location": "/Sound/#sound",
            "text": "The GUI can also make SOUND (on Windows). \nThis uses the winsound API, so is very limited - must be a WAV file.",
            "title": "Sound"
        },
        {
            "location": "/Sound/#sound-files",
            "text": ".playSound(sound, wait=False)  Play the named sound file. \nBy default, the sound is played asynchronously, meaning the function will return immediately, even though the sound hasn't finished playing. \nIt is possible to override this, by setting wait to True. This is not recommended though, as the GUI will become unresponsive.    .stopSound()  This will stop whatever sound is currently being played.    .loopSound(sound)  This will play the named sound in a loop.",
            "title": "Sound Files"
        },
        {
            "location": "/Sound/#built-in-sounds",
            "text": ".soundError()  This will sound a simple error beep.    .soundWarning()  This will sound a simple warning beep.",
            "title": "Built-In Sounds"
        },
        {
            "location": "/Sound/#musical-notes",
            "text": ".playNote(note, duration=200)  Support is built in for playing musical notes, using winsound.\nThe note can be a numeric frequency, or a String note.\nThe duration can be a number in milliseconds, or a String duration.  Over 50 String notes are available, such as:   f#1 = 46  b7 = 3951  g9 = 12543     The following String durations are supported:   BREVE = 2000  SEMIBREVE = 1000  MINIM = 500  CROTCHET = 250  QUAVER = 125  SEMIQUAVER = 63  DEMISEMIQUAVER = 32  HEMIDEMISEMIQUAVER = 16   These can be accessed through the variables  gui.NOTES  and  gui.DURATIONS",
            "title": "Musical Notes"
        },
        {
            "location": "/GuiOptions/",
            "text": "GUI Options\n\n\n\n\nConfiguration\n\n\nSome basic configuration for the size, position, transparency, etc. of the GUI.\n\n\nSize & Locaiton\n\n\n\n\nsetGeometry(geom)\n\n\n\n\nsetGeometry(width, height)\n\n\nSets the height & width of the GUI, either as a single String widthxheight.\n\nOr, sets it fullscreen\n\n\n\n\n\n\nexitFullscreen()\n\n\nLeave fullscreen, if set in the geometry.\n\n\n<Escape>\n will call this automatically, while in fullscreen.\n\n\n\n\n\n\nsetResizable(canResize=True)\n\n\nSets whether the GUI can be resized or not.\n\n\n\n\n\n\nsetLocation(x, y)\n\n\nSets the position of the GUI\n\n\n\n\n\n\nLook & Feel\n\n\n\n\n\n\nsetTitle(title)\n\n\nSets the title of the GUI. By default it is the name of the script.\n\n\n\n\n\n\nsetIcon(fileName)\n\n\nSets an icon for the GUI.\n\n\n\n\n\n\nsetTransparency(percentage)\n\n\nSets how transparent the GUI is. Between 0 and 100%.\n\n\n\n\n\n\nDesign\n\n\n\n\nIt's possible to change the default colours and fonts for widgets in the GUI.\n\n\nColour\n\n\n\n\n\n\nsetBg(colour)\n\n\nSet the background colour for the entire GUI. This should affect all widgets, and will override any backgrounds set before.\n\n\n\n\n\n\nFont\n\n\n\n\n\n\nsetFont(size, font=None)\n\n\nThis can be used to set the font size and style for all widgets.\n\n\n\n\n\n\ndecreaseFont()\n\n\n\n\n\n\nincreaseFont()\n\n\nThese can be used to increase or decrease the font of all widgets.\n\n\n\n\n\n\nsetLabelFont(size, family=None)\n\n\nThis can be used to set the font size and style for all label-type widgets.\n\n\n\n\n\n\nincreaseLabelFont()\n\n\n\n\n\n\ndecreaseLabelFont()\n\n\nThese can be used to increase or decrease the font of all label-type widgets.\n\n\n\n\n\n\nsetButtonFont()\n\n\nThis can be used to set the font size and style for all button-type widgets.\n\n\n\n\n\n\nincreaseButtonFont()\n\n\n\n\n\n\ndecreaseButtonFont()\n\n\nThese can be used to increase or decrease the font of all butotn-type widgets.\n\n\n\n\n\n\nWidget Positioning\n\n\n\n\nThe below commands allow the user to change how RWBAtools lays out widgets on the screen.\n\n\nLocation\n\n\n\n\nsetPadX()\n\n\n\n\nsetPadY()\n\n\nThese set how much empty padding is included around a widget, within its grid-cell.\n\n\n\n\n\n\nsetSticky()\n\n\nThis determines which side of the grid-cell the widget will stick to:\n\n\n\n\nleft - stick to the left side\n\n\nright - stick to the right side\n\n\nboth - stick to both sides, stretch the widget\n\n\n\n\n\n\n\n\nResize\n\n\n\n\n\n\nsetExpand()\n\n\nThis tells widgets what to do when the GUI is resized.\n\nIt allows widgets to be configured to stretch or not:\n\n\n\n\nnone - don't expand\n\n\nrow - expand with rows only\n\n\ncolumn - expand with columns only\n\n\nall - expand in all directions\n\n\n\n\n\n\n\n\nRow Helpers\n\n\n\n\n\n\ngetRow()\n\n\nReturns the row number currently being used.\n\n\n\n\n\n\ngetNextRow()\n\n\nReturns the current row number, before adding one to it.\n\n\n\n\n\n\nGUI Actions\n\n\n\n\nRepeated Events\n\n\nWhen you start the GUI, it kicks off an infinte loop that is waiting for the user to do something.\n\nThat means, you should never have your own loops running, as that will stop the GUI from working properly.\n\nInstead, if you want your own loop to run, you need to ask the GUi to run it for you:  \n\n\n\n\n\n\nregisterEvents(func)\n\n\nPass this a function, and the GUI will call that function every second.\n\n\n\n\n\n\nsetPollTime(time)\n\n\nIf you want your events to be called more or less frequently, set the frequency here.\n\n\n\n\n\n\nEnter Key\n\n\n\n\n\n\nenableEnter(func)\n\n\nLink a function to the \n<Enter>\n  key\n\n\n\n\n\n\ndisableEnter()\n\n\nUnlink a function form the \n<Enter>\n  key\n\n\n\n\n\n\nOther Keys\n\n\n\n\n\n\nbindKey(key, func)\n\n\nLink the specified key to the specified function.\n\n\n\n\n\n\nunbindKey(key)\n\n\nUnlink the specified key from any functions bound to it.",
            "title": "GUI Options"
        },
        {
            "location": "/GuiOptions/#gui-options",
            "text": "",
            "title": "GUI Options"
        },
        {
            "location": "/GuiOptions/#configuration",
            "text": "Some basic configuration for the size, position, transparency, etc. of the GUI.",
            "title": "Configuration"
        },
        {
            "location": "/GuiOptions/#size-locaiton",
            "text": "setGeometry(geom)   setGeometry(width, height)  Sets the height & width of the GUI, either as a single String widthxheight. \nOr, sets it fullscreen    exitFullscreen()  Leave fullscreen, if set in the geometry.  <Escape>  will call this automatically, while in fullscreen.    setResizable(canResize=True)  Sets whether the GUI can be resized or not.    setLocation(x, y)  Sets the position of the GUI",
            "title": "Size &amp; Locaiton"
        },
        {
            "location": "/GuiOptions/#look-feel",
            "text": "setTitle(title)  Sets the title of the GUI. By default it is the name of the script.    setIcon(fileName)  Sets an icon for the GUI.    setTransparency(percentage)  Sets how transparent the GUI is. Between 0 and 100%.",
            "title": "Look &amp; Feel"
        },
        {
            "location": "/GuiOptions/#design",
            "text": "It's possible to change the default colours and fonts for widgets in the GUI.",
            "title": "Design"
        },
        {
            "location": "/GuiOptions/#colour",
            "text": "setBg(colour)  Set the background colour for the entire GUI. This should affect all widgets, and will override any backgrounds set before.",
            "title": "Colour"
        },
        {
            "location": "/GuiOptions/#font",
            "text": "setFont(size, font=None)  This can be used to set the font size and style for all widgets.    decreaseFont()    increaseFont()  These can be used to increase or decrease the font of all widgets.    setLabelFont(size, family=None)  This can be used to set the font size and style for all label-type widgets.    increaseLabelFont()    decreaseLabelFont()  These can be used to increase or decrease the font of all label-type widgets.    setButtonFont()  This can be used to set the font size and style for all button-type widgets.    increaseButtonFont()    decreaseButtonFont()  These can be used to increase or decrease the font of all butotn-type widgets.",
            "title": "Font"
        },
        {
            "location": "/GuiOptions/#widget-positioning",
            "text": "The below commands allow the user to change how RWBAtools lays out widgets on the screen.",
            "title": "Widget Positioning"
        },
        {
            "location": "/GuiOptions/#location",
            "text": "setPadX()   setPadY()  These set how much empty padding is included around a widget, within its grid-cell.    setSticky()  This determines which side of the grid-cell the widget will stick to:   left - stick to the left side  right - stick to the right side  both - stick to both sides, stretch the widget",
            "title": "Location"
        },
        {
            "location": "/GuiOptions/#resize",
            "text": "setExpand()  This tells widgets what to do when the GUI is resized. \nIt allows widgets to be configured to stretch or not:   none - don't expand  row - expand with rows only  column - expand with columns only  all - expand in all directions",
            "title": "Resize"
        },
        {
            "location": "/GuiOptions/#row-helpers",
            "text": "getRow()  Returns the row number currently being used.    getNextRow()  Returns the current row number, before adding one to it.",
            "title": "Row Helpers"
        },
        {
            "location": "/GuiOptions/#gui-actions",
            "text": "",
            "title": "GUI Actions"
        },
        {
            "location": "/GuiOptions/#repeated-events",
            "text": "When you start the GUI, it kicks off an infinte loop that is waiting for the user to do something. \nThat means, you should never have your own loops running, as that will stop the GUI from working properly. \nInstead, if you want your own loop to run, you need to ask the GUi to run it for you:      registerEvents(func)  Pass this a function, and the GUI will call that function every second.    setPollTime(time)  If you want your events to be called more or less frequently, set the frequency here.",
            "title": "Repeated Events"
        },
        {
            "location": "/GuiOptions/#enter-key",
            "text": "enableEnter(func)  Link a function to the  <Enter>   key    disableEnter()  Unlink a function form the  <Enter>   key",
            "title": "Enter Key"
        },
        {
            "location": "/GuiOptions/#other-keys",
            "text": "bindKey(key, func)  Link the specified key to the specified function.    unbindKey(key)  Unlink the specified key from any functions bound to it.",
            "title": "Other Keys"
        },
        {
            "location": "/Grouping/",
            "text": "Grouping Widgets\n\n\nOnce you have got to grips with laying out your widgets, it is possible to group them together.\n\nEach of these groups is treated like an individual widget.\n\nWhen you \nSTART\n the group, you place it in a cell in your layout.\n\nThen, when you place widgets inside the group, you start a new grid.\n\nAfter you \nSTOP\n the group, you go back to your previous grid layout.\n\nThree main styles are currently supported:\n\n\nLabelFrame\n\n\nWill put a border around the widgets, with a title\n\n\n\n\n.startLabelFrame(title)\n\n\n.stopLabelFrame()\n\n\n.setLabelFrameAnchor(title, anchor)\n\n\n\n\n\n\nNoteBook\n\n\nWill create a tabbed interface, with a number of pages\n\n\n\n\n.startNoteBook(note)\n\n\n.startNoteTab(tab)\n\n\n.stopNoteTab()\n\n\n.stopNoteBook()\n\n\n.setNoteTab(note, tab)\n\n\n.setNoteBookBg(note, active, inactive)\n\n\n.setNoteBookFg(note, active, inactive)\n\n\n.setNoteTabBg(note, tab, bg)\n\n\n\n\n\n\nPanedWindow\n\n\nWill create a split view, with draggable panes\n\n\n\n\n.startPanedWindow(title)\n\n\n.stopPanedFrame()\n\n\n.setPanedWindowVertical(title)\n\n\n\n\nSubWindow\n\n\nAllows the creation of additional windows.\nThe window is hidden until \n.showSubWindow(title)\n is called.\n\n\n\n\n.startSubWindow(name, title=None)\n\n\n.stopSubWindow()\n\n\n.showSubWindow(title)\n\n\n.hideSubWindow(title)\n\n\n.destroySubWindow(title)",
            "title": "Grouping Widgets"
        },
        {
            "location": "/Grouping/#grouping-widgets",
            "text": "Once you have got to grips with laying out your widgets, it is possible to group them together. \nEach of these groups is treated like an individual widget. \nWhen you  START  the group, you place it in a cell in your layout. \nThen, when you place widgets inside the group, you start a new grid. \nAfter you  STOP  the group, you go back to your previous grid layout. \nThree main styles are currently supported:",
            "title": "Grouping Widgets"
        },
        {
            "location": "/Grouping/#labelframe",
            "text": "Will put a border around the widgets, with a title   .startLabelFrame(title)  .stopLabelFrame()  .setLabelFrameAnchor(title, anchor)",
            "title": "LabelFrame"
        },
        {
            "location": "/Grouping/#notebook",
            "text": "Will create a tabbed interface, with a number of pages   .startNoteBook(note)  .startNoteTab(tab)  .stopNoteTab()  .stopNoteBook()  .setNoteTab(note, tab)  .setNoteBookBg(note, active, inactive)  .setNoteBookFg(note, active, inactive)  .setNoteTabBg(note, tab, bg)",
            "title": "NoteBook"
        },
        {
            "location": "/Grouping/#panedwindow",
            "text": "Will create a split view, with draggable panes   .startPanedWindow(title)  .stopPanedFrame()  .setPanedWindowVertical(title)",
            "title": "PanedWindow"
        },
        {
            "location": "/Grouping/#subwindow",
            "text": "Allows the creation of additional windows.\nThe window is hidden until  .showSubWindow(title)  is called.   .startSubWindow(name, title=None)  .stopSubWindow()  .showSubWindow(title)  .hideSubWindow(title)  .destroySubWindow(title)",
            "title": "SubWindow"
        },
        {
            "location": "/DevWidgets/",
            "text": "Widgets Under Development\n\n\n\n\nPieChart\n\n\nShows a pie chart\n\n\n\n\n.addPieChart(name, values, size=100)\n\n\n\n\nTree\n\n\nThis widget is still in development. It takes an arbitrary XML string, and converts it into a tree structure.\n\n\n\n\n\n\n.addTree(title, xml_data)\n\n\nCreate a tree from the xml data\n\n\n\n\n\n\n.addTreeFunction(title, func)\n\n\nRegister he function with double click\n\n\n\n\n\n\n.getTree(title)\n\n\nReturn the tree\n\n\n\n\n\n\nGrid\n\n\nThis widget is still in development.  \n\n\n\n\n\n\n.addGrid(title, data, action=None, addRow=False)\n  \n\n\nReceives a (jagged) 2D list of values. The first list should be the headers for the grid, the rest will contain each row of values.  \n\n\nIf action is set, a button will be created, calling the specified function. If addRow is True, then an additional row will appear, at the end, with Entry boxes.  \n\n\n\n\n\n\n.updateGrid(title, data, addRow=False)\n\n\n\n\n.setGridGeom(title, width, height)\n\n\n.getGridEntries(title)\n\n\n.setGridBackground(title, colour)",
            "title": "Under Development"
        },
        {
            "location": "/DevWidgets/#widgets-under-development",
            "text": "",
            "title": "Widgets Under Development"
        },
        {
            "location": "/DevWidgets/#piechart",
            "text": "Shows a pie chart   .addPieChart(name, values, size=100)",
            "title": "PieChart"
        },
        {
            "location": "/DevWidgets/#tree",
            "text": "This widget is still in development. It takes an arbitrary XML string, and converts it into a tree structure.    .addTree(title, xml_data)  Create a tree from the xml data    .addTreeFunction(title, func)  Register he function with double click    .getTree(title)  Return the tree",
            "title": "Tree"
        },
        {
            "location": "/DevWidgets/#grid",
            "text": "This widget is still in development.      .addGrid(title, data, action=None, addRow=False)     Receives a (jagged) 2D list of values. The first list should be the headers for the grid, the rest will contain each row of values.    If action is set, a button will be created, calling the specified function. If addRow is True, then an additional row will appear, at the end, with Entry boxes.      .updateGrid(title, data, addRow=False)   .setGridGeom(title, width, height)  .getGridEntries(title)  .setGridBackground(title, colour)",
            "title": "Grid"
        },
        {
            "location": "/Empty/",
            "text": "",
            "title": "Empty"
        },
        {
            "location": "/License/",
            "text": "",
            "title": "License"
        },
        {
            "location": "/ReleaseNotes/",
            "text": "",
            "title": "Release Notes"
        },
        {
            "location": "/Thanks/",
            "text": "Thanks to:\n\n\n\n\nHelpful Resources\n\n\n\n\nhttp://effbot.org/tkinterbook/ - The GURU of all things tkinter & Python\n\n\nhttp://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html - another great resource\n\n\nhttp://tkinter.unpythonic.net/wiki/FrontPage - another good resource\n\n\n\n\nIncorporated Libraries\n\n\n\n\nhttps://github.com/drj11/pypng - supplies basic PNG support\n\n\nhttps://bitbucket.org/hokaze/tkinter-png - allows PNGs to be treated as PhotoImages\n\n\nhttps://github.com/sullerandras/nanojpeg-python - provides BASIC jpeg support\n\n\nhttp://tkinter.unpythonic.net/wiki/ToolTip - provides ToolTips\n\n\n\n\nDocumentation\n\n\n\n\nhttp://www.mkdocs.org - used to generate this documentation",
            "title": "Thanks"
        },
        {
            "location": "/Thanks/#thanks-to",
            "text": "",
            "title": "Thanks to:"
        },
        {
            "location": "/Thanks/#helpful-resources",
            "text": "http://effbot.org/tkinterbook/ - The GURU of all things tkinter & Python  http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html - another great resource  http://tkinter.unpythonic.net/wiki/FrontPage - another good resource",
            "title": "Helpful Resources"
        },
        {
            "location": "/Thanks/#incorporated-libraries",
            "text": "https://github.com/drj11/pypng - supplies basic PNG support  https://bitbucket.org/hokaze/tkinter-png - allows PNGs to be treated as PhotoImages  https://github.com/sullerandras/nanojpeg-python - provides BASIC jpeg support  http://tkinter.unpythonic.net/wiki/ToolTip - provides ToolTips",
            "title": "Incorporated Libraries"
        },
        {
            "location": "/Thanks/#documentation",
            "text": "http://www.mkdocs.org - used to generate this documentation",
            "title": "Documentation"
        }
    ]
}