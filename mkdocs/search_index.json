{
    "docs": [
        {
            "location": "/", 
            "text": "appJar\n\n\nThe easiest way to create GUIs in Python.\n  \n\n\n\n\nWritten by a teacher, in the classroom, for students.  \n\n\nappJar\n is designed to run on as many versions of \nPython\n as possible - so it should work in your school.  \n\n\nThere are no other dependencies - simply \ndownload\n, unzip, and put it in your code folder.\n\nCheck out the \ninstallation\n instructions for other ways to get \nappJar\n working.  \n\n\nHello appJar\n\n\n\n\nGUIs\n in \nappJar\n require three steps.  \n\n\n\n\nFirst, import the library \n create a GUI variable.\n\n    (from now on, we do everything to the GUI variable)  \n\n\n\n\n# import the library\nfrom appJar import gui\n# create a GUI variable called app\napp = gui()\n\n\n\n\n\n\nThen, using the gui variable, add and configure an output widget:\n\n    (if you've tried \nturtle\n this will all look very familiar)  \n\n\n\n\n# add \n configure widgets - widgets get a name, to help referencing them later\napp.addLabel(\ntitle\n, \nWelcome to appJar\n)\napp.setLabelBg(\ntitle\n, \nred\n)\n\n\n\n\n\n\nFinally, start the GUI:\n\n    (\nNB.\n don't put any code after this line)  \n\n\n\n\n# start the GUI\napp.go()\n\n\n\n\n\n\n\n\nAnd, that's it: \n\n\n  \n\n\n\n\n\n\nInteractivity\n\n\n\n\nOf course, the whole point of making a GUI, is to be interactive - this requires \nevents\n.  \n\n\nThe idea behind \nevent-driven programming\n is that each time the user clicks or types (an event) the GUI should respond.  \n\n\n\n\nSo, we add some input widgets (\nEntry Boxes\n), for the user to type in:\n\n\n\n\napp.addLabelEntry(\nUsername\n)\napp.addLabelSecretEntry(\nPassword\n)\n\n\n\n\n\n\nThen, we need a \nfunction\n - a block of code to call, when an event happens:  \n\n\n\n\ndef press(button):\n    if button == \nCancel\n:\n        app.stop()\n    else:\n        usr = app.getEntry(\nUsername\n)\n        pwd = app.getEntry(\nPassword\n)\n        print(\nUser:\n, usr, \nPass:\n, pwd)\n\n\n\n\n\n\nFinally, a \nbutton\n to create the event:  \n\n\n\n\n# link the buttons to the function called press\napp.addButtons([\nSubmit\n, \nCancel\n], press)\n\n\n\n\n\n\n\n\nWe now have an interactive GUI:  \n\n\n\n\n\n\n\n\nWhen the user presses a button, the \npress\n function is called, passing the name of the button as a parameter.  \n\n\nAppearance counts\n\n\n\n\nWe also want to change the way the \nGUI looks\n:  \n\n\n\n\nFor starters, you can specify a name and size for your GUI, when you create it:  \n\n\n\n\napp = gui(\nLogin Window\n, \n400x200\n)\n\n\n\n\n\n\nYou can change the general appearance of the GUI:  \n\n\n\n\napp.setBg(\norange\n)\napp.setFont(18)\n\n\n\n\n\n\nYou can even specify where you want the cursor to be when the GUI starts:  \n\n\n\n\napp.setFocus(\nUsername\n)\n\n\n\n\n\n\n\n\nIt now looks a bit better:  \n\n\n  \n\n\n(\nNB.\n We also set the fg/bg colours on the label - see \nbelow\n) \n\n\n\n\n\n\nMake your own\n\n\n\n\nAnd, that's all you need to know. Check out:  \n\n\n\n\nAll the different \ninput widgets\n \n \noutput widgets\n available.  \n\n\nOur support for \nimages\n and \nsound\n.  \n\n\nHow to include \ntoolbars, menubars \n statusbars\n.  \n\n\nHow to create simple \npop-ups\n.  \n\n\nHow to use a \ngrid layout\n.  \n\n\nHow to use \ncontainers\n for more advanced layouts.  \n\n\n\n\nFull code-listing\n\n\n\n\nBelow is the full code-listing for the above GUI:  \n\n\n# import the library\nfrom appJar import gui\n\n# handle button events\ndef press(button):\n    if button == \nCancel\n:\n        app.stop()\n    else:\n        usr = app.getEntry(\nUsername\n)\n        pwd = app.getEntry(\nPassword\n)\n        print(\nUser:\n, usr, \nPass:\n, pwd)\n\n# create a GUI variable called app\napp = gui(\nLogin Window\n, \n400x200\n)\napp.setBg(\norange\n)\napp.setFont(18)\n\n# add \n configure widgets - widgets get a name, to help referencing them later\napp.addLabel(\ntitle\n, \nWelcome to appJar\n)\napp.setLabelBg(\ntitle\n, \nblue\n)\napp.setLabelFg(\ntitle\n, \norange\n)\n\napp.addLabelEntry(\nUsername\n)\napp.addLabelSecretEntry(\nPassword\n)\n\n# link the buttons to the function called press\napp.addButtons([\nSubmit\n, \nCancel\n], press)\n\napp.setFocus(\nUsername\n)\n\n# start the GUI\napp.go()\n\n\n\n\nUpcoming in v1.0\n\n\n\n\nIn the upcoming 1.0 release, we're formally introducing a new set of options for buiding your GUI.  \n\n\nThese are targetted at our more experienced users:  \n\n\n\n\nContext Managers\n allow you to create the GUI and any containers, in a visibly more understandable way.  \n\n\nNew \nfunctions\n that allow you to add/get/set widgets all with the same command, including passing configuration paramters.  \n\n\nNew \nproperties\n for configuring the GUI.  \n\n\n\n\nMost of these are already live, and can be used, reducing the above GUI code to:  \n\n\nfrom appJar import gui \n\ndef press():\n    print(\nUser:\n, app.entry(\nUsername\n), \nPass:\n, app.entry(\nPassword\n))\n\nwith gui(\nLogin Window\n, \n400x200\n, bg='orange', font={'size':18}) as app:\n    app.label(\nWelcome to appJar\n, bg='blue', fg='orange')\n    app.entry(\nUsername\n, label=True, focus=True)\n    app.entry(\nPassword\n, label=True, secret=True)\n    app.buttons([\nSubmit\n, \nCancel\n], [press, app.stop])", 
            "title": "Welcome"
        }, 
        {
            "location": "/#appjar", 
            "text": "The easiest way to create GUIs in Python.      Written by a teacher, in the classroom, for students.    appJar  is designed to run on as many versions of  Python  as possible - so it should work in your school.    There are no other dependencies - simply  download , unzip, and put it in your code folder. \nCheck out the  installation  instructions for other ways to get  appJar  working.", 
            "title": "appJar"
        }, 
        {
            "location": "/#hello-appjar", 
            "text": "GUIs  in  appJar  require three steps.     First, import the library   create a GUI variable. \n    (from now on, we do everything to the GUI variable)     # import the library\nfrom appJar import gui\n# create a GUI variable called app\napp = gui()   Then, using the gui variable, add and configure an output widget: \n    (if you've tried  turtle  this will all look very familiar)     # add   configure widgets - widgets get a name, to help referencing them later\napp.addLabel( title ,  Welcome to appJar )\napp.setLabelBg( title ,  red )   Finally, start the GUI: \n    ( NB.  don't put any code after this line)     # start the GUI\napp.go()    And, that's it:", 
            "title": "Hello appJar"
        }, 
        {
            "location": "/#interactivity", 
            "text": "Of course, the whole point of making a GUI, is to be interactive - this requires  events .    The idea behind  event-driven programming  is that each time the user clicks or types (an event) the GUI should respond.     So, we add some input widgets ( Entry Boxes ), for the user to type in:   app.addLabelEntry( Username )\napp.addLabelSecretEntry( Password )   Then, we need a  function  - a block of code to call, when an event happens:     def press(button):\n    if button ==  Cancel :\n        app.stop()\n    else:\n        usr = app.getEntry( Username )\n        pwd = app.getEntry( Password )\n        print( User: , usr,  Pass: , pwd)   Finally, a  button  to create the event:     # link the buttons to the function called press\napp.addButtons([ Submit ,  Cancel ], press)    We now have an interactive GUI:       When the user presses a button, the  press  function is called, passing the name of the button as a parameter.", 
            "title": "Interactivity"
        }, 
        {
            "location": "/#appearance-counts", 
            "text": "We also want to change the way the  GUI looks :     For starters, you can specify a name and size for your GUI, when you create it:     app = gui( Login Window ,  400x200 )   You can change the general appearance of the GUI:     app.setBg( orange )\napp.setFont(18)   You can even specify where you want the cursor to be when the GUI starts:     app.setFocus( Username )    It now looks a bit better:        ( NB.  We also set the fg/bg colours on the label - see  below )", 
            "title": "Appearance counts"
        }, 
        {
            "location": "/#make-your-own", 
            "text": "And, that's all you need to know. Check out:     All the different  input widgets     output widgets  available.    Our support for  images  and  sound .    How to include  toolbars, menubars   statusbars .    How to create simple  pop-ups .    How to use a  grid layout .    How to use  containers  for more advanced layouts.", 
            "title": "Make your own"
        }, 
        {
            "location": "/#full-code-listing", 
            "text": "Below is the full code-listing for the above GUI:    # import the library\nfrom appJar import gui\n\n# handle button events\ndef press(button):\n    if button ==  Cancel :\n        app.stop()\n    else:\n        usr = app.getEntry( Username )\n        pwd = app.getEntry( Password )\n        print( User: , usr,  Pass: , pwd)\n\n# create a GUI variable called app\napp = gui( Login Window ,  400x200 )\napp.setBg( orange )\napp.setFont(18)\n\n# add   configure widgets - widgets get a name, to help referencing them later\napp.addLabel( title ,  Welcome to appJar )\napp.setLabelBg( title ,  blue )\napp.setLabelFg( title ,  orange )\n\napp.addLabelEntry( Username )\napp.addLabelSecretEntry( Password )\n\n# link the buttons to the function called press\napp.addButtons([ Submit ,  Cancel ], press)\n\napp.setFocus( Username )\n\n# start the GUI\napp.go()", 
            "title": "Full code-listing"
        }, 
        {
            "location": "/#upcoming-in-v10", 
            "text": "In the upcoming 1.0 release, we're formally introducing a new set of options for buiding your GUI.    These are targetted at our more experienced users:     Context Managers  allow you to create the GUI and any containers, in a visibly more understandable way.    New  functions  that allow you to add/get/set widgets all with the same command, including passing configuration paramters.    New  properties  for configuring the GUI.     Most of these are already live, and can be used, reducing the above GUI code to:    from appJar import gui \n\ndef press():\n    print( User: , app.entry( Username ),  Pass: , app.entry( Password ))\n\nwith gui( Login Window ,  400x200 , bg='orange', font={'size':18}) as app:\n    app.label( Welcome to appJar , bg='blue', fg='orange')\n    app.entry( Username , label=True, focus=True)\n    app.entry( Password , label=True, secret=True)\n    app.buttons([ Submit ,  Cancel ], [press, app.stop])", 
            "title": "Upcoming in v1.0"
        }, 
        {
            "location": "/outputWidgets/", 
            "text": "Output Widgets\n\n\n\n\nIn a GUI, the fillings are known as \nwidgets\n. There are lots of different widgets to choose from, each suited to a specific task - we've grouped them into \noutput widgets\n \n \ninput widgets\n.  \n\n\nOutput widgets are used for displaying information to a user.  \n\n\nThey usually provide three functions:  \n\n\n\n\nADD\n - this creates the widget\n\n\nGET\n - this gets the contents of the widget  \n\n\nSET\n - this changes the contents of the widget  \n\n\n\n\nAs well as options to change the way they \nlook/act\n.\n\n\nFor each of the above to work, we need to know which widget you are referring to - so every widget gets a \nunique title\n.\n\n\nLabel\n\n\n\n\nLabels\n are used for displaying text in the GUI.  \n\n\n\n\nThey are great for titles, at the top of the GUI, usually spanning multiple columns.  \n\n\nThey are really useful before \nEntries\n and \nDrop-downs\n to explain their purpose.  \n\n\nAnd, they're very helpful at the bottom of the GUI, to show the results of an action.\n\n\n  \n\n\n\n\nfrom appJar import gui\n\napp = gui()\n\napp.addLabel(\nl1\n, \nLabel 1\n)\napp.addLabel(\nl2\n, \nLabel 2\n)\napp.addLabel(\nl3\n, \nLabel 3\n)\napp.addLabel(\nl4\n, \nLabel 4\n)\n# common set functions\napp.setLabelBg(\nl1\n, \nred\n)\napp.setLabelBg(\nl2\n, \nyellow\n)\napp.setLabelBg(\nl3\n, \npurple\n)\napp.setLabelBg(\nl4\n, \norange\n)\n\napp.go()\n\n\n\n\nAdd Labels\n\n\n\n\n\n\n.addLabel(title, text=None)\n\n    This will create a label widget to display text in the GUI.\n\n    The \ntitle\n is used to uniquely identify the label, in case you want to change it later, and the \ntext\n is what gets displayed.\n\n    If \ntext\n is set to None, or no \ntext\n is provided, the \ntitle\n will be displayed in the label.  \n\n\n\n\n\n\n.addEmptyLabel(title)\n\n    Does the same as add a \nlabel\n, except there's no parameter to set any text.\n\n\n\n\n\n\n.addSelectableLabel(title, text=None)\n\n    This adds a label whose text can be selected with the mouse.\n\n    This is really just a \nread-only\n Entry, disguised to look like a label.\n\n    But it seems to do the trick...  \n\n\n\n\n\n\n.addFlashLabel(title, text=None)\n\n    This adds a flashing \nlabel\n, that will alternate between the foreground and background colours.\n\n\n\n\n\n\n  \n\n\nfrom appJar import gui\n\napp = gui()\n\napp.addFlashLabel(\nf1\n, \nThis is flashing\n)\napp.addLabel(\nf2\n, \nThis is not flashing\n)\napp.addFlashLabel(\nf3\n, \nThis is also flashing\n)\n\napp.go()\n\n\n\n\nSet Labels\n\n\n\n\n\n\n.setLabel(title, text)\n\n    Change the contents of the \nlabel\n.\n\n\n\n\n\n\n.clearLabel(title)\n\n    Clear the contents of the \nlabel\n.\n\n\n\n\n\n\nGet Labels\n\n\n\n\n.getLabel(title)\n\n    Get the contents of the \nlabel\n.\n\n\n\n\nAuto-Labelled Widgets\n\n\nIt's possible to automatically include a \nlabel\n alongside a lot of the  widgets.\n\nBoth the label and widget will be placed in the same grid space.\n\nSimply add the word \nLabel\n to the command when adding the widget:  \n\n\n\n\n.addLabelEntry(title)\n\n\n.addLabelNumericEntry(title)\n\n\n.addLabelSecretEntry(title)\n\n\n.addLabelAutoEntry(title, words)\n\n\n.addLabelScale(title)\n\n\n.addLabelOptionBox(title, values)\n\n\n.addLabelTickOptionBox(title, values)\n\n\n.addLabelSpinBox(title, values)\n\n\n.addLabelSpinBoxRange(title, from, to)\n  \n\n\n\n\nSee the relevant section for a description of what the widget does.\n\n\nMessage\n\n\n\n\nSimilar to a Label, except it will wrap the text over multiple lines.  \n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(12)\napp.addMessage(\nmess\n, \nYou can put a lot of text in this widget.\nThe text will be wrapped over multiple lines.\nIt's not possible to apply different styles to different words.\n)\napp.go()\n\n\n\n\nAdd Messages\n\n\n\n\n\n\n.addMessage(title, text)\n\n    Adds a Message widget, with the specified text.\n\n    If not text is provided, the title will be used for the text.  \n\n\n\n\n\n\n.addEmptyMessage(title)\n\n    Adds an empty Message widget.  \n\n\n\n\n\n\nSet Messages\n\n\n\n\n\n\n.clearMessage(title)\n\n    Clears the specified Message widget.  \n\n\n\n\n\n\n.setMessage(title, text)\n\n    Sets the contents of the specified Message widget, to the specified text.  \n\n\n\n\n\n\nMeter\n\n\n\n\nVarious styles of progress meter:  \n\n\n\n\n\n\nMeter\n\n\n\nA simple meter for showing progress from 0% to 100%.  \n\n\n\n\n\n\nSplitMeter\n\n\n\nA possession style meter, showing percentages on either side.  \n\n\n\n\n\n\nDualMeter\n\n\n\nTwo separate meters, expanding out from the middle.  \n\n\n\n\n\n\nfrom appJar import gui\n\napp=gui()\napp.addMeter(\nprogress\n)\napp.setMeterFill(\nprogress\n, \nblue\n)\napp.go()\n\n\n\n\nAdd Meters\n\n\n\n\n.addMeter(name)\n \n \n.addSplitMeter(name)\n \n  \n.addDualMeter(name)\n\n    Adds a meter with the specified name, of the specified type.  \n\n\n\n\nSet Meters\n\n\n\n\n\n\n.setMeter(name, value, text=None)\n\n    Changes the specified meter to the specified value.\n\n    For \nMeter\n \n \nSplitMeter\nshould be a value between 0 and 100.\n\n    For \nDualMeter\n should be a list of two values, each between 0 and 100.  \n\n\n\n\n\n\n.setMeterFill(name, colour)\n\n    Changes the fill colour of the specified meter.\n\n    For \nSplitMeter\n \n \nDualMeter\nshould be a list of two colours.  \n\n\n\n\n\n\nGet Meters\n\n\n\n\n\n\n.getMeter(name)\n\n    Gets the value of the specified meter.\n\n    As meters convert their data to a value between 0 and 1, this will return a list of two values: \n(0.45, '45 %')\n  \n\n\n\n\n\n\n.getAllMeters()\n\n    This will return the contents of all Meters in the app, as a dictionary.  \n\n\n\n\n\n\nBackground Processing\n\n\nMeters are designed to show progress over time.\n\nOne common solution is to register a function that is constantly updating a meter.\n\nThis should then be monitoring/updating a global variable:  \n\n\ndef updateMeter():\n    app.setMeter(\nprogress\n, percentComplete)\n\n# schedule function to be called regularly\napp.registerEvent(updateMeter)\n\n\n\n\nSeparator\n\n\n\n\nUseful for indicating separation between widgets.\n\nWill draw a horizontal/vertical line spanning the cell.\n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.setBg(\nlightBlue\n)\napp.addHorizontalSeparator(0,0,4, colour=\nred\n)\napp.addVerticalSeparator(1,0, colour=\nred\n)\napp.addVerticalSeparator(1,1, colour=\nred\n)\napp.addVerticalSeparator(1,2, colour=\nred\n)\napp.addVerticalSeparator(1,3, colour=\nred\n)\napp.addHorizontalSeparator(2,0,4, colour=\nred\n)\napp.go()\n\n\n\n\nAdd Seperators\n\n\n\n\n.addHorizontalSeparator(colour=None)\n \n \n.addVerticalSeparator(colour=None)\n\n    Adds a separator (a horizontal or vertical line) spanning the cell.\n\n    An optional colour can be passed in, to set a colour for the separator.  \n\n\n\n\nGrip\n\n\n\n\nClickable icon to drag the window around.  \n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(20)\napp.setBg(\nlightBlue\n)\n\napp.addLabel(\nl1\n, \nMove me around...\n, 0, 0)\napp.addGrip(0,1)\napp.addSeparator(1,0,2, colour=\nred\n)\napp.go()\n\n\n\n\nAdd Grips\n\n\n\n\n.addGrip()\n\n    Adds a simple grip icon.\n\n    The mouse pointer changes over the grip, and a ToolTip will be shown.\n\n    The size and image can't be changed.  \n\n\n\n\nCanvas\n\n\n\n\nThis lets you embed a canvas in appJar\n\n\n  \n\n\nfrom appJar import gui\napp=gui()\ncanvas = app.addCanvas(\nc1\n)\ncanvas.create_oval(10, 10, 100, 100, fill=\nred\n, outline=\nblue\n, width=3)\ncanvas.create_line(0, 0, 255, 255, width=5)\ncanvas.create_line(0, 255, 255, 0, dash=123)\napp.go()\n\n\n\n\n\n\n\n\n.addCanvas(title)\n\n    Creates a canvas widget.  \n\n\n\n\n\n\n.getCanvas(title)\n\n    Gets the specified canvas widget.  \n\n\n\n\n\n\nDrawing on a Canvas\n\n\n\n\n\n\n.addCanvasCircle(title, x, y, diameter, **kwargs)\n\n    Draws a circle on the canvas.  \n\n\n\n\n\n\n.addCanvasOval(title, x, y, xDiam, yDiam, **kwargs)\n\n    Draws an oval on the canvas.  \n\n\n\n\n\n\n.addCanvasRectangle(title, x, y, w, h, **kwargs)\n\n    Draws a rectangle on the canvas.  \n\n\n\n\n\n\n.addCanvasLine(title, x, y, x2, y2, **kwargs)\n\n    Draws a line on the canvas.  \n\n\n\n\n\n\n.addCanvasText(title, x, y, text, **kwargs)\n\n    Draws text on the canvas.  \n\n\n\n\n\n\n.addCanvasImage(title, x, y, image, **kwargs)\n\n    Draws the specified image on the canvas.  \n\n\n\n\n\n\n.clearCanvas(title)\n\n    Removes all items from the canvas.  \n\n\n\n\n\n\nTurtle\n\n\n\n\nThis lets you embed a \nturtle\n widget in appJar.  \n\n\n  \n\n\nfrom appJar import gui \n\ndef press(b):\n    s = app.getTurtleScreen(\nt1\n)\n    t = app.getTurtle(\nt1\n)\n    s.bgcolor(\nblue\n)\n    t.pencolor(\nwhite\n)\n    for i in range(20):\n        t.forward(i * 10) \n        t.right(144)\n\napp=gui()\napp.addTurtle(\nt1\n)\napp.addButton(\nDRAW\n, press)\napp.go()\n\n\n\n\n\n\n\n\n.addTurtle(title)\n\n    Creates a turtle widget.  \n\n\n\n\n\n\n.getTurtle(title)\n\n    Gets the specified turtle widget.  \n\n\n\n\n\n\n.getTurtleScreen(title)\n\n    Gets the screen behind the turtle widget.  \n\n\n\n\n\n\nMicroBit Emulator\n\n\n\n\nWidget to emulate a \nMicroBit\n\n\n\n\nfrom appJar import gui\n\napp = gui()\napp.addMicroBit(\nmb1\n)\napp.setMicroBitImage(\nmb1\n, \n09090:90909:90009:09090:00900\n)\napp.go()\n\n\n\n\nAdd MicroBits\n\n\n\n\n.addMicroBit(title)\n\n    Will create a 5x5 grid emulating the MicroBit LEDs.  \n\n\n\n\nSet MicroBits\n\n\n\n\n\n\n.setMicroBitImage(title, image)\n\n    This sets each pixel to the specified brightness (0 to 9).\n\n    Each set of 5 digits represents a row of pixels, from top to bottom.  \n\n\n\n\n\n\n.setMicroBitPixel(title, x, y, brightness)\n\n    Will set the brightness of the specified pixel.\n\n\nx\n \n \ny\n should be between 0 \n 4.\n\n\nbrightness\n should be a value between 0 \n 9 to represent how \nbright\n to make the pixel.  \n\n\n\n\n\n\n.clearMicroBit(title)\n\n    Will turn off all of the pixels - setting their brightness to 0.  \n\n\n\n\n\n\nGoogleMaps\n\n\n\n\nA self-contained GoogleMaps widget.\n\nIt provides useful functionality for finding somewhere on Earth.\n\nAll requests for map data are performed in the background, so the UI shouldn't become unresponsive.  \n\n\n\n\nfrom appjar import gui\n\napp = gui()\napp.addGoogleMap(\nm1\n)\napp.setGoogleMapSize(\nm1\n, \n300x500\n)\napp.go()\n\n\n\n\nAdd GoogleMaps\n\n\n\n\n.addGoogleMap(title)\n\n    Creates a GoogleMap widget.\n\n    Displays a map image, and provides functionality to search, zoom, and change terrain, as well as a link to the original image.  \n\n\n\n\nSet GoogleMaps\n\n\n\n\n\n\n.searchGoogleMap(title, location)\n\n    Update the named GoogleMap widget to show the specified location.  \n\n\n\n\n\n\n.zoomGoogleMap(title, mod)\n\n    Change the zoom level of the named GoogleMap.\n\n    Providing a \n+\n or \n-\n will cause the map to zoom in or out one level.\n\n    Otherwise, a digit between 0 and 22 should be provided, to set the zoom level.  \n\n\n\n\n\n\n.setGoogleMapTerrain(title, terrain)\n  \n\n\n\n\n\n\n.setGoogleMapSize(title, size)\n\n    Set the size of the GoogleMap. Should be in the format \n\"300x300\"\n.\n\n    Note, if you set it too small, the control widgets won't look good...  \n\n\n\n\n\n\n.setGoogleMapMarker(title, location, size=None, colour=None, label=None, replace=False)\n\n    Will drop a marker on the specified location.\n\n    The marker will only be visible if the current \nlocation\n \n \nzoom level\n permit.\n\n    If an empty \nlocation\n is provided, all markers will be removed.\n\n\ncolour\n can be set to any of (black, brown, green, purple, yellow, blue, gray, orange, red, white) or a hex value (starting '0x').\n\n\nsize\n can be set to any of (tiny, mid, small).\n\n\nlabel\n can be set to a single letter or digit.\n\n    If \nreplace\n is \nTrue\n this marker will replace the last one added.  \n\n\n\n\n\n\n.removeGoogleMapMarker(title, label)\n\n    Will remove the specified marker, if found.  \n\n\n\n\n\n\nGet GoogleMaps\n\n\n\n\n\n\n.getGoogleMapLocation(title)\n\n    Returns the current displayed location.\n\n    Will return an empty String, if the user clicked the \nH\n button.  \n\n\n\n\n\n\n.getGoogleMapZoom(title)\n\n    Returns the current zoom level of the map tile.  \n\n\n\n\n\n\n.getGoogleMapTerrain(title)\n\n    Returns the current terrain setting for the map tile.  \n\n\n\n\n\n\n.getGoogleMapSize(title)\n\n    Returns the current size of the map tile.  \n\n\n\n\n\n\nSave GoogleMaps\n\n\n\n\n.saveGoogleMap(title, fileName)\n\n    Saves the currently displayed map to the named location.\n\n    By default, all map tiles are GIFs.  \n\n\n\n\nPieChart\n\n\n\n\nWidget to depict a Pie Chart.\n\nIt will automatically calculate percentages, and draw a pie chart, given a dictionary of items and their amount.\n\nThe PieChart is purely for display purposes, and is not interactive, other than a simple mouse-over effect with a tooltip.\n\n\n  \n\n\nfrom appJar import gui\n\napp = gui()\napp.addPieChart(\np1\n, {\napples\n:50, \noranges\n:200, \ngrapes\n:75,\n                        \nbeef\n:300, \nturkey\n:150})\napp.go()\n\n\n\n\nAdd PieCharts\n\n\n\n\n.addPieChart(title, values)\n\n    Takes a dictionary of names and values, which will be converted to percentages, and plotted on the chart.\n\n    The names will be used as part of tooltips that appear over each wedge of the PieChart.  \n\n\n\n\nSet PieCharts\n\n\n\n\n.setPieChart(title, name, value)\n\n    Will update the PieChart, by either changing an existing value, adding a new value, or removing a value if it's set to 0.  \n\n\n\n\nMatPlotLib\n\n\n\n\nSupport for embedding very basic \nMatPlotLib\n plots.  \n\n\n  \n\n\nfrom numpy import sin, pi, arange\nfrom appJar import gui \nimport random\n\ndef getXY():\n    x = arange(0.0, 3.0, 0.01)\n    y = sin(random.randint(1,10) * pi * x)\n    return x,y \n\ndef generate(btn):\n    # *getXY() will unpack the two return values\n    #\u00a0and pass them as separate parameters\n    app.updatePlot(\np1\n, *getXY())\n    showLabels()\n\ndef showLabels():\n    axes.legend(['The curve'])\n    axes.set_xlabel(\nX Axes\n)\n    axes.set_ylabel(\nY Axes\n)\n    app.refreshPlot(\np1\n)\n\napp = gui()\naxes = app.addPlot(\np1\n, *getXY())\nshowLabels()\napp.addButton(\nGenerate\n, generate)\napp.go()\n\n\n\n\n\n\n\n\n.addPlot(title, x, y)\n\n    Create a plot with the specified x and y values.\n\n    Returns the plot object, to allow further customisation.  \n\n\n\n\n\n\n.addPlotFig(title)\n\n    Create an empty Figure, so that you can add your own plots.\n\n    Returns the figure object, to allow further customisation.  \n\n\n\n\n\n\nfrom appJar import gui \nfrom mpl_toolkits.mplot3d import Axes3D\n\nwith gui() as app:\n    fig = app.addPlotFig(\np1\n)\n    ax = fig.add_subplot(111, projection='3d')\n    ax.scatter([1,2],[1,2],[1,2])\n\n\n\n\n\n\n\n\n.updatePlot(title, x, y, keepLabels=False)\n\n    Update the specified plot with the specified x and y values.\n\n\nNB.\n if you do this you will lose any customisations applied to the axes.\n\n    If you set \nkeepLabels\n to True, then the axis labels \n title will be retained.\n\n    Also, your app will crash, if you call this after \n.addPlotFig()\n  \n\n\n\n\n\n\n.refreshPlot(title)\n\n    Call this any time you modify the axes.", 
            "title": "Output Widgets"
        }, 
        {
            "location": "/outputWidgets/#output-widgets", 
            "text": "In a GUI, the fillings are known as  widgets . There are lots of different widgets to choose from, each suited to a specific task - we've grouped them into  output widgets     input widgets .    Output widgets are used for displaying information to a user.    They usually provide three functions:     ADD  - this creates the widget  GET  - this gets the contents of the widget    SET  - this changes the contents of the widget     As well as options to change the way they  look/act .  For each of the above to work, we need to know which widget you are referring to - so every widget gets a  unique title .", 
            "title": "Output Widgets"
        }, 
        {
            "location": "/outputWidgets/#label", 
            "text": "Labels  are used for displaying text in the GUI.     They are great for titles, at the top of the GUI, usually spanning multiple columns.    They are really useful before  Entries  and  Drop-downs  to explain their purpose.    And, they're very helpful at the bottom of the GUI, to show the results of an action.       from appJar import gui\n\napp = gui()\n\napp.addLabel( l1 ,  Label 1 )\napp.addLabel( l2 ,  Label 2 )\napp.addLabel( l3 ,  Label 3 )\napp.addLabel( l4 ,  Label 4 )\n# common set functions\napp.setLabelBg( l1 ,  red )\napp.setLabelBg( l2 ,  yellow )\napp.setLabelBg( l3 ,  purple )\napp.setLabelBg( l4 ,  orange )\n\napp.go()", 
            "title": "Label"
        }, 
        {
            "location": "/outputWidgets/#add-labels", 
            "text": ".addLabel(title, text=None) \n    This will create a label widget to display text in the GUI. \n    The  title  is used to uniquely identify the label, in case you want to change it later, and the  text  is what gets displayed. \n    If  text  is set to None, or no  text  is provided, the  title  will be displayed in the label.      .addEmptyLabel(title) \n    Does the same as add a  label , except there's no parameter to set any text.    .addSelectableLabel(title, text=None) \n    This adds a label whose text can be selected with the mouse. \n    This is really just a  read-only  Entry, disguised to look like a label. \n    But it seems to do the trick...      .addFlashLabel(title, text=None) \n    This adds a flashing  label , that will alternate between the foreground and background colours.        from appJar import gui\n\napp = gui()\n\napp.addFlashLabel( f1 ,  This is flashing )\napp.addLabel( f2 ,  This is not flashing )\napp.addFlashLabel( f3 ,  This is also flashing )\n\napp.go()", 
            "title": "Add Labels"
        }, 
        {
            "location": "/outputWidgets/#set-labels", 
            "text": ".setLabel(title, text) \n    Change the contents of the  label .    .clearLabel(title) \n    Clear the contents of the  label .", 
            "title": "Set Labels"
        }, 
        {
            "location": "/outputWidgets/#get-labels", 
            "text": ".getLabel(title) \n    Get the contents of the  label .", 
            "title": "Get Labels"
        }, 
        {
            "location": "/outputWidgets/#auto-labelled-widgets", 
            "text": "It's possible to automatically include a  label  alongside a lot of the  widgets. \nBoth the label and widget will be placed in the same grid space. \nSimply add the word  Label  to the command when adding the widget:     .addLabelEntry(title)  .addLabelNumericEntry(title)  .addLabelSecretEntry(title)  .addLabelAutoEntry(title, words)  .addLabelScale(title)  .addLabelOptionBox(title, values)  .addLabelTickOptionBox(title, values)  .addLabelSpinBox(title, values)  .addLabelSpinBoxRange(title, from, to)      See the relevant section for a description of what the widget does.", 
            "title": "Auto-Labelled Widgets"
        }, 
        {
            "location": "/outputWidgets/#message", 
            "text": "Similar to a Label, except it will wrap the text over multiple lines.        from appJar import gui\n\napp=gui()\napp.setFont(12)\napp.addMessage( mess ,  You can put a lot of text in this widget.\nThe text will be wrapped over multiple lines.\nIt's not possible to apply different styles to different words. )\napp.go()", 
            "title": "Message"
        }, 
        {
            "location": "/outputWidgets/#add-messages", 
            "text": ".addMessage(title, text) \n    Adds a Message widget, with the specified text. \n    If not text is provided, the title will be used for the text.      .addEmptyMessage(title) \n    Adds an empty Message widget.", 
            "title": "Add Messages"
        }, 
        {
            "location": "/outputWidgets/#set-messages", 
            "text": ".clearMessage(title) \n    Clears the specified Message widget.      .setMessage(title, text) \n    Sets the contents of the specified Message widget, to the specified text.", 
            "title": "Set Messages"
        }, 
        {
            "location": "/outputWidgets/#meter", 
            "text": "Various styles of progress meter:", 
            "title": "Meter"
        }, 
        {
            "location": "/outputWidgets/#meter_1", 
            "text": "A simple meter for showing progress from 0% to 100%.", 
            "title": "Meter"
        }, 
        {
            "location": "/outputWidgets/#splitmeter", 
            "text": "A possession style meter, showing percentages on either side.", 
            "title": "SplitMeter"
        }, 
        {
            "location": "/outputWidgets/#dualmeter", 
            "text": "Two separate meters, expanding out from the middle.      from appJar import gui\n\napp=gui()\napp.addMeter( progress )\napp.setMeterFill( progress ,  blue )\napp.go()", 
            "title": "DualMeter"
        }, 
        {
            "location": "/outputWidgets/#add-meters", 
            "text": ".addMeter(name)     .addSplitMeter(name)      .addDualMeter(name) \n    Adds a meter with the specified name, of the specified type.", 
            "title": "Add Meters"
        }, 
        {
            "location": "/outputWidgets/#set-meters", 
            "text": ".setMeter(name, value, text=None) \n    Changes the specified meter to the specified value. \n    For  Meter     SplitMeter should be a value between 0 and 100. \n    For  DualMeter  should be a list of two values, each between 0 and 100.      .setMeterFill(name, colour) \n    Changes the fill colour of the specified meter. \n    For  SplitMeter     DualMeter should be a list of two colours.", 
            "title": "Set Meters"
        }, 
        {
            "location": "/outputWidgets/#get-meters", 
            "text": ".getMeter(name) \n    Gets the value of the specified meter. \n    As meters convert their data to a value between 0 and 1, this will return a list of two values:  (0.45, '45 %')       .getAllMeters() \n    This will return the contents of all Meters in the app, as a dictionary.", 
            "title": "Get Meters"
        }, 
        {
            "location": "/outputWidgets/#background-processing", 
            "text": "Meters are designed to show progress over time. \nOne common solution is to register a function that is constantly updating a meter. \nThis should then be monitoring/updating a global variable:    def updateMeter():\n    app.setMeter( progress , percentComplete)\n\n# schedule function to be called regularly\napp.registerEvent(updateMeter)", 
            "title": "Background Processing"
        }, 
        {
            "location": "/outputWidgets/#separator", 
            "text": "Useful for indicating separation between widgets. \nWill draw a horizontal/vertical line spanning the cell.      from appJar import gui\n\napp=gui()\napp.setBg( lightBlue )\napp.addHorizontalSeparator(0,0,4, colour= red )\napp.addVerticalSeparator(1,0, colour= red )\napp.addVerticalSeparator(1,1, colour= red )\napp.addVerticalSeparator(1,2, colour= red )\napp.addVerticalSeparator(1,3, colour= red )\napp.addHorizontalSeparator(2,0,4, colour= red )\napp.go()", 
            "title": "Separator"
        }, 
        {
            "location": "/outputWidgets/#add-seperators", 
            "text": ".addHorizontalSeparator(colour=None)     .addVerticalSeparator(colour=None) \n    Adds a separator (a horizontal or vertical line) spanning the cell. \n    An optional colour can be passed in, to set a colour for the separator.", 
            "title": "Add Seperators"
        }, 
        {
            "location": "/outputWidgets/#grip", 
            "text": "Clickable icon to drag the window around.        from appJar import gui\n\napp=gui()\napp.setFont(20)\napp.setBg( lightBlue )\n\napp.addLabel( l1 ,  Move me around... , 0, 0)\napp.addGrip(0,1)\napp.addSeparator(1,0,2, colour= red )\napp.go()", 
            "title": "Grip"
        }, 
        {
            "location": "/outputWidgets/#add-grips", 
            "text": ".addGrip() \n    Adds a simple grip icon. \n    The mouse pointer changes over the grip, and a ToolTip will be shown. \n    The size and image can't be changed.", 
            "title": "Add Grips"
        }, 
        {
            "location": "/outputWidgets/#canvas", 
            "text": "This lets you embed a canvas in appJar      from appJar import gui\napp=gui()\ncanvas = app.addCanvas( c1 )\ncanvas.create_oval(10, 10, 100, 100, fill= red , outline= blue , width=3)\ncanvas.create_line(0, 0, 255, 255, width=5)\ncanvas.create_line(0, 255, 255, 0, dash=123)\napp.go()    .addCanvas(title) \n    Creates a canvas widget.      .getCanvas(title) \n    Gets the specified canvas widget.", 
            "title": "Canvas"
        }, 
        {
            "location": "/outputWidgets/#drawing-on-a-canvas", 
            "text": ".addCanvasCircle(title, x, y, diameter, **kwargs) \n    Draws a circle on the canvas.      .addCanvasOval(title, x, y, xDiam, yDiam, **kwargs) \n    Draws an oval on the canvas.      .addCanvasRectangle(title, x, y, w, h, **kwargs) \n    Draws a rectangle on the canvas.      .addCanvasLine(title, x, y, x2, y2, **kwargs) \n    Draws a line on the canvas.      .addCanvasText(title, x, y, text, **kwargs) \n    Draws text on the canvas.      .addCanvasImage(title, x, y, image, **kwargs) \n    Draws the specified image on the canvas.      .clearCanvas(title) \n    Removes all items from the canvas.", 
            "title": "Drawing on a Canvas"
        }, 
        {
            "location": "/outputWidgets/#turtle", 
            "text": "This lets you embed a  turtle  widget in appJar.        from appJar import gui \n\ndef press(b):\n    s = app.getTurtleScreen( t1 )\n    t = app.getTurtle( t1 )\n    s.bgcolor( blue )\n    t.pencolor( white )\n    for i in range(20):\n        t.forward(i * 10) \n        t.right(144)\n\napp=gui()\napp.addTurtle( t1 )\napp.addButton( DRAW , press)\napp.go()    .addTurtle(title) \n    Creates a turtle widget.      .getTurtle(title) \n    Gets the specified turtle widget.      .getTurtleScreen(title) \n    Gets the screen behind the turtle widget.", 
            "title": "Turtle"
        }, 
        {
            "location": "/outputWidgets/#microbit-emulator", 
            "text": "Widget to emulate a  MicroBit   from appJar import gui\n\napp = gui()\napp.addMicroBit( mb1 )\napp.setMicroBitImage( mb1 ,  09090:90909:90009:09090:00900 )\napp.go()", 
            "title": "MicroBit Emulator"
        }, 
        {
            "location": "/outputWidgets/#add-microbits", 
            "text": ".addMicroBit(title) \n    Will create a 5x5 grid emulating the MicroBit LEDs.", 
            "title": "Add MicroBits"
        }, 
        {
            "location": "/outputWidgets/#set-microbits", 
            "text": ".setMicroBitImage(title, image) \n    This sets each pixel to the specified brightness (0 to 9). \n    Each set of 5 digits represents a row of pixels, from top to bottom.      .setMicroBitPixel(title, x, y, brightness) \n    Will set the brightness of the specified pixel.  x     y  should be between 0   4.  brightness  should be a value between 0   9 to represent how  bright  to make the pixel.      .clearMicroBit(title) \n    Will turn off all of the pixels - setting their brightness to 0.", 
            "title": "Set MicroBits"
        }, 
        {
            "location": "/outputWidgets/#googlemaps", 
            "text": "A self-contained GoogleMaps widget. \nIt provides useful functionality for finding somewhere on Earth. \nAll requests for map data are performed in the background, so the UI shouldn't become unresponsive.     from appjar import gui\n\napp = gui()\napp.addGoogleMap( m1 )\napp.setGoogleMapSize( m1 ,  300x500 )\napp.go()", 
            "title": "GoogleMaps"
        }, 
        {
            "location": "/outputWidgets/#add-googlemaps", 
            "text": ".addGoogleMap(title) \n    Creates a GoogleMap widget. \n    Displays a map image, and provides functionality to search, zoom, and change terrain, as well as a link to the original image.", 
            "title": "Add GoogleMaps"
        }, 
        {
            "location": "/outputWidgets/#set-googlemaps", 
            "text": ".searchGoogleMap(title, location) \n    Update the named GoogleMap widget to show the specified location.      .zoomGoogleMap(title, mod) \n    Change the zoom level of the named GoogleMap. \n    Providing a  +  or  -  will cause the map to zoom in or out one level. \n    Otherwise, a digit between 0 and 22 should be provided, to set the zoom level.      .setGoogleMapTerrain(title, terrain)       .setGoogleMapSize(title, size) \n    Set the size of the GoogleMap. Should be in the format  \"300x300\" . \n    Note, if you set it too small, the control widgets won't look good...      .setGoogleMapMarker(title, location, size=None, colour=None, label=None, replace=False) \n    Will drop a marker on the specified location. \n    The marker will only be visible if the current  location     zoom level  permit. \n    If an empty  location  is provided, all markers will be removed.  colour  can be set to any of (black, brown, green, purple, yellow, blue, gray, orange, red, white) or a hex value (starting '0x').  size  can be set to any of (tiny, mid, small).  label  can be set to a single letter or digit. \n    If  replace  is  True  this marker will replace the last one added.      .removeGoogleMapMarker(title, label) \n    Will remove the specified marker, if found.", 
            "title": "Set GoogleMaps"
        }, 
        {
            "location": "/outputWidgets/#get-googlemaps", 
            "text": ".getGoogleMapLocation(title) \n    Returns the current displayed location. \n    Will return an empty String, if the user clicked the  H  button.      .getGoogleMapZoom(title) \n    Returns the current zoom level of the map tile.      .getGoogleMapTerrain(title) \n    Returns the current terrain setting for the map tile.      .getGoogleMapSize(title) \n    Returns the current size of the map tile.", 
            "title": "Get GoogleMaps"
        }, 
        {
            "location": "/outputWidgets/#save-googlemaps", 
            "text": ".saveGoogleMap(title, fileName) \n    Saves the currently displayed map to the named location. \n    By default, all map tiles are GIFs.", 
            "title": "Save GoogleMaps"
        }, 
        {
            "location": "/outputWidgets/#piechart", 
            "text": "Widget to depict a Pie Chart. \nIt will automatically calculate percentages, and draw a pie chart, given a dictionary of items and their amount. \nThe PieChart is purely for display purposes, and is not interactive, other than a simple mouse-over effect with a tooltip.      from appJar import gui\n\napp = gui()\napp.addPieChart( p1 , { apples :50,  oranges :200,  grapes :75,\n                         beef :300,  turkey :150})\napp.go()", 
            "title": "PieChart"
        }, 
        {
            "location": "/outputWidgets/#add-piecharts", 
            "text": ".addPieChart(title, values) \n    Takes a dictionary of names and values, which will be converted to percentages, and plotted on the chart. \n    The names will be used as part of tooltips that appear over each wedge of the PieChart.", 
            "title": "Add PieCharts"
        }, 
        {
            "location": "/outputWidgets/#set-piecharts", 
            "text": ".setPieChart(title, name, value) \n    Will update the PieChart, by either changing an existing value, adding a new value, or removing a value if it's set to 0.", 
            "title": "Set PieCharts"
        }, 
        {
            "location": "/outputWidgets/#matplotlib", 
            "text": "Support for embedding very basic  MatPlotLib  plots.        from numpy import sin, pi, arange\nfrom appJar import gui \nimport random\n\ndef getXY():\n    x = arange(0.0, 3.0, 0.01)\n    y = sin(random.randint(1,10) * pi * x)\n    return x,y \n\ndef generate(btn):\n    # *getXY() will unpack the two return values\n    #\u00a0and pass them as separate parameters\n    app.updatePlot( p1 , *getXY())\n    showLabels()\n\ndef showLabels():\n    axes.legend(['The curve'])\n    axes.set_xlabel( X Axes )\n    axes.set_ylabel( Y Axes )\n    app.refreshPlot( p1 )\n\napp = gui()\naxes = app.addPlot( p1 , *getXY())\nshowLabels()\napp.addButton( Generate , generate)\napp.go()    .addPlot(title, x, y) \n    Create a plot with the specified x and y values. \n    Returns the plot object, to allow further customisation.      .addPlotFig(title) \n    Create an empty Figure, so that you can add your own plots. \n    Returns the figure object, to allow further customisation.      from appJar import gui \nfrom mpl_toolkits.mplot3d import Axes3D\n\nwith gui() as app:\n    fig = app.addPlotFig( p1 )\n    ax = fig.add_subplot(111, projection='3d')\n    ax.scatter([1,2],[1,2],[1,2])    .updatePlot(title, x, y, keepLabels=False) \n    Update the specified plot with the specified x and y values.  NB.  if you do this you will lose any customisations applied to the axes. \n    If you set  keepLabels  to True, then the axis labels   title will be retained. \n    Also, your app will crash, if you call this after  .addPlotFig()       .refreshPlot(title) \n    Call this any time you modify the axes.", 
            "title": "MatPlotLib"
        }, 
        {
            "location": "/inputWidgets/", 
            "text": "Input Widgets\n\n\n\n\nInput widgets are used for capturing user interactions, either by cicking, typing or dragging.  \n\n\nThey usually provide three functions:  \n\n\n\n\nADD\n - this creates the widget  \n\n\nGET\n - this gets the contents/state of the widget  \n\n\nSET\n - this changes what's in the widget  \n\n\n\n\nAs well as options to change the way they \nlook/act\n.  \n\n\nFor each of the above to work, we need to know which widget you are referring to - so every widget gets a \nunique title\n.  \n\n\nIf you want your input widget to have a label, there are some \nauto-label functions\n\n\nEntry\n\n\n\n\nEntries are used to capture typed input from the user. They take a single parameter - a title.\n\n\nThere are five special-case Entries:\n\n\n\n\nNumericEntry\n - this only allows numbers to be typed in - always returns a float (None if empty).\n\n\nSecretEntry\n - this will show stars, instead of the letters typed - useful for capturing passwords.\n\n\nAutoEntry\n - this takes a list of words to provide auto-completion.  \n\n\nValidationEntry\n - can be set to valid/invalid/waiting - will colour the border green/red/black and show a \u2714/\u2716/\u2605  \n\n\nFileEntry/DirectoryEntry\n - provides a button to select a file/directory and auto-populates the Entry  \n\n\n\n\n\n\nfrom appJar import gui\n\napp=gui()\n\napp.addEntry(\ne1\n)\napp.addEntry(\ne2\n)\napp.addEntry(\ne3\n)\napp.addLabelEntry(\nName\n)\napp.addValidationEntry(\nv1\n)\napp.addFileEntry(\nf1\n)\n\napp.setEntryDefault(\ne2\n, \nAge here\n)\napp.setEntryValid(\nv1\n)\n\napp.go()\n\n\n\n\nAdd Entries\n\n\n\n\n.addEntry(title)\n\n\n.addNumericEntry(title)\n\n\n.addSecretEntry(title)\n\n\n.addValidationEntry(title)\n  \n\n\n.addFileEntry(title)\n  \n\n\n.addDirectoryEntry(title)\n  \n\n\n.addAutoEntry(title, words)\n\n    This also takes a \nwords\n parameter, which must be a list, and is used to populate he drop-down.  \n\n\n\n\nEach of these will add the specified type of Entry, using the title provided.\n\n\nSet Entries\n\n\n\n\n\n\n.setEntry(title, text, callFunction=True)\n\n    This sets the contents of the specified Entry.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.setEntryDefault(title, text)\n\n    This sets a default value to display in an Entry.\n\n    Once the user starts typing, it will disappear.\n\n    The text is centered, shown in a light gray font, and will not be returned by \n.getEntry(title)\n  \n\n\n\n\n\n\n.setEntryUpperCase(title)\n \n \n.setEntryLowerCase(title)\n \n\n    This will force all text typed into the Entry to be uppercase/lowercase.  \n\n\n\n\n\n\n.setEntryMaxLength(title, maxLength)\n\n    This will set a maximum length for the specified Entry.\n\n    Any additional characters typed will be discarded.  \n\n\n\n\n\n\n.setEntryValid(title)\n \n \n.setEntryInvalid(title)\n \n \n.setEntryWaitingValidation(title)\n\n    These will set the relevant status of a Validation Entry (how it looks).\n\n    (Have a look \nhere\n for help displaying special characters)\n\n\n\n\n\n\n\n\n.setValidationEntry(title, state=\"valid\")\n\n    Same as above, set flag to one of \nvalid\n, \ninvalid\n or \nwait\n.  \n\n\n\n\n\n\n.setAutoEntryNumRows(title, rows)\n\n    This will set the number of rows to display in an AutoEntry.\n\n    NB. this is limited to the depth of the GUI - if there is no space, then no rows will be displayed. \n    \n  \n\n\n\n\n\n\n.appendAutoEntry(title, value)\n\n    This will add the value/list of values to the specified AutoEntry.  \n\n\n\n\n\n\n.removeAutoEntry(title, value)\n\n    This will remove the value from the specified AutoEntry.  \n\n\n\n\n\n\n.changeAutoEntry(title, value)\n\n    This will replace all items in the specified AutoEntry with a new list of values.  \n\n\n\n\n\n\n.clearEntry(title, callFunction=True)\n\n    This will clear the contents of the specified Entry.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.clearAllEntries(callFunction=False)\n\n    This will clear all Entries in the GUI.\n\n    Set \ncallFunction\n to be True, if you want to call any associated functions.  \n\n\n\n\n\n\n.setFocus(title)\n\n    This will put the cursor in the specified Entry, so that the user can start typing without needing to click.\n\n\n\n\n\n\nGet Entries\n\n\n\n\n\n\n.getEntry(title)\n\n    This will return the contents of the specified Entry.\n\n    NB. \nnumericEntries\n always return a float.  \n\n\n\n\n\n\n.getAllEntries()\n\n    This will return the contents of all Entries in the app, as a dictionary.\n\n    NB. \nnumericEntries\n always return a float.  \n\n\n\n\n\n\nTextArea\n\n\n\n\nSimilar to an Entry, but allows you to type text over multiple lines.  \n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.addTextArea(\nt1\n)\napp.go()\n\n\n\n\nAdd TextAreas\n\n\n\n\n\n\n.addTextArea(title)\n\n    Adds an empty TextArea, with the specified title.  \n\n\n\n\n\n\n.addScrolledTextArea(title)\n\n    Adds a scrollable TextArea with the specified title.  \n\n\n\n\n\n\n  \n\n\nSet TextAreas\n\n\n\n\n\n\n.setTextArea(title, text, end=True, callFunction=True)\n\n    Adds the supplied text to the specified TextArea.\n\n    By default, the text is added to the end.\n\n    Set \nend\n to be False if you want to add at the beginning.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.clearTextArea(title, callFunction=True)\n\n    Clears the contents of the specified TextArea.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.clearAllTextAreas(callFunction=False)\n\n    This will clear the contents of all TextAreas in the app.\n\n    Set \ncallFunction\n to be True, if you want to call any associated functions.  \n\n\n\n\n\n\nGet TextAreas\n\n\n\n\n\n\n.getTextArea(title)\n\n    Gets the contents of the specified TextArea.  \n\n\n\n\n\n\n.getAllTextAreas()\n\n    This will return the contents of all TextAreas in the app, as a dictionary.  \n\n\n\n\n\n\nButton\n\n\n\n\nA clickable button, that will call a function.\n\nThese are the key to starting an interactive application.\n\nThe GUI is looping, waiting for something to happen.\n\nA button click is the classic way to start interacting with a GUI.\n\n\nWhenever any function is called by the GUI, the title of the widget that called it is passed as a parameter.\n\nThat way, multiple widgets can use the same function, but different actions can be performed, depending on the name passed as a parameter.\n\n\n\n\n    from appJar import gui\n\n    # the title of the button will be received as a parameter\n    def press(btn):\n        print(btn)\n\n    app=gui()\n    # 3 buttons, each calling the same function\n    app.addButton(\nOne\n, press)\n    app.addButton(\nTwo\n, press)\n    app.addButton(\nThree\n, press)\n    app.go()\n\n\n\n\nAdd Buttons\n\n\n\n\n\n\n.addButton(title, function)\n\n    Add a single button to the GUI, the text on the button will be the same as the button's title.\n\n    A function should be specified, which will be called when the button is clicked, where the title is passed as a parameter to the function.\n\n    Alternatively, the function can have no parameter, and appJar will not supply an argument.     \n\n\n\n\n\n\n.addButtons(titles, functions)\n\n    It's possible to add a list of buttons to the GUI.\n\n    Pass a 1-dimensional or 2-dimensional list, and they will be rendered accordingly.\n\n    A single function can be passed, to use for all buttons.\n\n    Or a list of functions can be passed, which MUST correspond to the buttons.  \n\n\n\n\n\n\n.addImageButton(title, function, imgFile, align=None)\n\n    This creates the named button, as above, using the specified image.\n\n    If align is set, the image will be aligned relative to the text, otherwise the image will replace the text.  \n\n\n\n\n\n\n.addIconButton(title, function, iconName, align=None)\n\n    This creates the named button, as above, using the specified icon.\n\n    If align is set, the image will be aligned relative to the text, otherwise the image will replace the text.  \n\n\n\n\n\n\n.addNamedButton(name, title, function)\n\n    By default, it's not possible to have two buttons with the same text.\n\n    If that's required, a named button should be used.\n\n    This allows a name and title to be set for a button.\n\n    The name will be displayed on the button, and the title passed to the function.\n\n\n\n\n\n\nSet Buttons\n\n\n\n\n\n\n.setButton(name, text)\n\n    This will change the text displayed on a button, but \nNOT\n the value passed as a parameter to the function.  \n\n\n\n\n\n\n.setButtonImage(title, image, align=None)\n\n    This allows an image to be placed on a button, instead of the usual text.\n\n    If align is set, the image will be aligned relative to the text, otherwise the image will replace the text.  \n\n\n\n\n\n\nLink/WebLink\n\n\n\n\nClickable text to call a function or launch a URL\n\n\n  \n\n\nfrom appJar import gui\ndef press(link):\n    app.infoBox(\nInfo\n, \nYou clicked the link!\n)\n\napp=gui()\napp.setFont(20)\napp.addLink(\nClick me\n, press)\napp.addWebLink(\nappJar.info\n, \nhttp://appJar.info\n)\napp.go()\n\n\n\n\nAdd Links\n\n\n\n\n\n\n.addLink(title, func)\n\n    Adds a \nhyperlink\n, that when clicked, will call the specified function.  \n\n\n\n\n\n\n.addWebLink(title, page)\n\n    Adds a \nhyperlink\n, that when clicked, will launch the default browser, and load the specified page.\n\n    It must be a fully formed link, including \nhttp://\n  \n\n\n\n\n\n\nGet Links\n\n\n\n\n.getLink(title)\n\n    Returns the text displayed in the link.  \n\n\n\n\nSet Links\n\n\n\n\n.setLink(title, func)\n\n    Changes the function/webpage the link calls.  \n\n\n\n\nRadioButton\n\n\n\n\nA group of round boxes, only one of which can be selected.\n\nThese are great for getting a single value, for a multiple choice question.  \n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.addRadioButton(\nsong\n, \nKiller Queen\n)\napp.addRadioButton(\nsong\n, \nParadise City\n)\napp.addRadioButton(\nsong\n, \nParklife\n)\napp.go()\n\n\n\n\nAdd RadioButtons\n\n\n\n\n.addRadioButton(title, name)\n\n    This will create a RadioButton grouped by the specified title.\n\n    This button will have the value of name.\n\n    Radio buttons are usually used in groups.  \n\n\n\n\nSet RadioButtons\n\n\n\n\n\n\n.setRadioButton(title, value, callFunction=True)\n\n    This will tick the specified RadioButton.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.setRadioTick(title, tick=True)\n\n    It is possible to use tick-boxes instead of the classic circular radio-button.\n\n    Setting tick to True will convert all the radio-buttons for this title to tick boxes.  \n\n\n\n\n\n\n.clearAllRadioButtons(callFunction=False)\n\n    This will reset all RadioButtons in the app to their first value.\n\n    Set \ncallFunction\n to be True, if you want to call any associated functions.  \n\n\n\n\n\n\nGet RadioButtons\n\n\n\n\n.getRadioButton(title)\n\n    Gets the value of the selected RadioButton, for the specified title.\n\n\n\n\n    from appJar import gui\n\n    def press(rb):\n        print(app.getRadioButton(\nsong\n))\n\n    app=gui()\n    app.addRadioButton(\nsong\n, \nKiller Queen\n)\n    app.addRadioButton(\nsong\n, \nParadise City\n)\n\n    # call this function, when the RadioButton changes\n    app.setRadioButtonChangeFunction(\nsong\n, press)\n\n    app.addButton(\nPLAY\n, press)\n    app.go()\n\n\n\n\n\n\n.getAllRadioButtons()\n\n    This will return the contents of all RadioButtons in the app, as a dictionary.  \n\n\n\n\nCheckBox\n\n\n\n\nA simple tick-box, with a label, that can be either ON or OFF.  \n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(20)\n\napp.addCheckBox(\nApples\n)\napp.addCheckBox(\nPears\n)\napp.addCheckBox(\nOranges\n)\napp.addCheckBox(\nKiwis\n)\n\napp.setCheckBox(\nOranges\n)\n\napp.go()\n\n\n\n\nAdd CheckBoxes\n\n\n\n\n\n\n.addCheckBox(title)\n\n    This creates a CheckBox, with the specified title.  \n\n\n\n\n\n\n.addNamedCheckBox(name, title)\n\n    By default, it's not possible to have two CheckBoxes with the same text.\n\n    If that's required, a named CheckBox should be used.\n\n    This creates a CheckBox, with the specified title.\n\n    The name will be displayed next to the CheckBox, and the title passed to the function as a unique ID.  \n\n\n\n\n\n\nSet CheckBoxes\n\n\n\n\n\n\n.setCheckBox(title, ticked=True, callFunction=True)\n\n    This will tick the CheckBox, or untick it if ticked is set to False.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.clearAllCheckBoxes(callFunction=False)\n\n    This will clear (untick) all CheckBoxes in the app.\n\n    Set \ncallFunction\n to be True, if you want to call any associated functions.  \n\n\n\n\n\n\nGet CheckBoxes\n\n\n\n\n\n\n.getCheckBox(title)\n\n    This will return True or False, depending on the state of the CheckBox.  \n\n\n\n\n\n\n.getAllCheckBoxes()\n\n    This will return the contents of all CheckBoxes in the app, as a dictionary.  \n\n\n\n\n\n\nOptionBox\n\n\n\n\nCreates a simple drop-down box.\n\nIt is only possible to select one option from this drop-down.\n\nPass in a list of values to show in the drop-down box.\n\nThey will be added in the same order, with the first item shown.\n\nIf the first item is empty, a simple title \n- options -\n will be created.\n\nAny other empty items will be removed.\n\nIf an item starts with a dash (-), it will be treated as a separator, and can't be selected.  \n\n\n \n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(20)\napp.addLabelOptionBox(\nOptions\n, [\n- Fruits -\n, \nApple\n, \nOrange\n,\n                        \nPear\n, \nkiwi\n, \n- Pets -\n, \nDogs\n, \nCats\n,\n                        \nFish\n, \nHamsters\n])\napp.go()\n\n\n\n\nAdd OptionBoxes\n\n\n\n\n\n\n.addOptionBox(title, values)\n\n    This will create an OptionBox, adding the contents of the values list, in the order specified.  \n\n\n\n\n\n\n.addTickOptionBox(title, values)\n\n    This will create an OptionBox made up of check boxes.\n\n    The \ntitle\n will always be displayed as the \nselected\n entry in the OptionBox, event though it can't be selected/ticked.\n\n    Instead of selecting a single item, you tick the ones you want.\n\n\n  \n\n\nCalling \n.getOptionBox(title)\n will return a dictionary of the options along with a True/False value.  \n\n\n\n\n\n\nfrom appJar import gui\n\ndef get(btn):\n    print(app.getOptionBox(\nFavourite Pets\n))\n\napp=gui()\napp.setFont(20)\napp.addTickOptionBox(\nFavourite Pets\n, [\nDogs\n, \nCats\n, \nHamsters\n, \nFish\n])\napp.addButton(\nGET\n, get)\napp.go()\n\n\n\n\nSet OptionBoxes\n\n\n\n\n\n\n.changeOptionBox(title, newOptions, index, callFunction=False)\n\n    This will replace the contents of the OptionBox, with the new list provided.\n\n    If specified, the indexed item will be selected - this can be a position or an item name.\n\n    If setting a TickOptionBox, the old list will be replaced with the new list. None will be ticked. \nindex\n will be ignored.\n\n    Set \ncallFunction\n to be True, if you want to call any associated \nchange\n functions.  \n\n\n\n\n\n\n.setOptionBox(title, position, value=True, callFunction=True, override=False)\n\n    This will select the item in the list, at the position specified.\n\n    Alternatively, the name of an item can be specified.\n\n    If changing a TickOptionBox, the specified item will be set to the specified value.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.\n\n    By default, you can't select a disabled item. You can change this by setting \noverride\n to be True.  \n\n\n\n\n\n\n.renameOptionBoxItem(title, item, newName, callFunction=False)\n\n    This will rename the specified item in the named OptionBox.\n\n    Set \ncallFunction\n to be True, if you want to call any associated \nchange\n functions.  \n\n\n\n\n\n\n.clearOptionBox(title, callFunction=True)\n\n    This will set the named OptionBox back to its first value (even if it's disabled).\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.clearAllOptionBoxes(callFunction=False)\n\n    This will set all OptionBoxes in the app back to their first value (even if it's disabled).\n\n    Set \ncallFunction\n to be True, if you want to call any associated functions.  \n\n\n\n\n\n\n.deleteOptionBox(title, position)\n\n    This will delete the item in the list, at the position specified.\n\n    Alternatively, the name of an item can be specified.\n\n    Not available on TickOptionBoxes.  \n\n\n\n\n\n\nGet OptionBoxes\n\n\n\n\n\n\n.getOptionBox(title)\n\n    This will return the currently displayed value in an OptionBox.\n\n    Or a dictionary of names, and their boolean value if a TickOptionBox.\n\n    Will return None, if an invalid option is currently selected.  \n\n\n\n\n\n\n.getAllOptionBoxes()\n\n    This will return the contents of all OptionBoxes in the app, as a dictionary.  \n\n\n\n\n\n\nSpinBox\n\n\n\n\nA scrollable list of options. Up and down buttons are provided to scroll from one item to the next.\n\nUnlike the OptionBox, you do not get a drop-down of choices, instead it spins to the next/previous option.  \n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(20)\napp.addLabelSpinBox(\noptions\n, [\nApple\n, \nOrange\n, \nPear\n, \nkiwi\n])\napp.go()\n\n\n\n\nAdd SpinBoxes\n\n\n\n\n\n\n.addSpinBox(title, values)\n\n    This will create a SpinBox, adding the contents of the values list, in the order specified.\n\n\n\n\n\n\n.addSpinBoxRange(title, from, to)\n\n    This will create a SpinBox, with a numeric range of items.  \n\n\n  \n\n\n\n\n\n\n    from appJar import gui\n\n    app=gui()\n    app.setFont(20)\n    app.addSpinBoxRange(\nNumbers\n, 1, 12)\n    app.go()\n\n\n\n\nSet SpinBoxes\n\n\n\n\n\n\n.setSpinBox(title, value, callFunction=True)\n\n    This will select the specified value in the SpinBox.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.setSpinBoxPos(title, pos, callFunction=True)\n\n    This will select the value at the specified position in the SpinBox.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.clearAllSpinBoxes(callFunction=False)\n\n    This will set all SpinBoxes in the app to their first value.\n\n    Set \ncallFunction\n to be True, if you want to call any associated functions.  \n\n\n\n\n\n\nGet SpinBoxes\n\n\n\n\n\n\n.getSpinBox(title)\n\n    This will get the selected value from the specified SpinBox.  \n\n\n\n\n\n\n.getAllSpinBoxes()\n\n    This will return the contents of all SpinBoxes in the app, as a dictionary.  \n\n\n\n\n\n\nListBox\n\n\n\n\nA box containing a list of items, single or multi-select\n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(20)\napp.addListBox(\nlist\n, [\napple\n, \norange\n, \npear\n, \nkiwi\n])\napp.go()\n\n\n\n\nAdd ListBoxes\n\n\n\n\n\n\n.addListBox(title, values)\n\n    Creates a ListBox with the specified values.  \n\n\n\n\n\n\n.addListItem(title, item)\n\n    Adds a single item to the the end of the ListBox, and selects it.  \n\n\n\n\n\n\n.addListItems(title, items)\n\n    Adds a list of items to the end of the List Box, selecting the last one.  \n\n\n\n\n\n\nSet ListBoxes\n\n\n\n\n\n\n.setListItem(title, item, newVal, first=False)\n\n\n.setListItemAtPos(title, pos, newVal)\n\n    Changes the specified list item to the new value.\n\n    If \nfirst\n is set to True, only the first item found will be changed.\n\n    Otherwise, all occurrences of the specified value will be changed.  \n\n\n\n\n\n\n.removeListItem(title, item)\n\n\n.removeListItemAtPos(title, pos)\n\n    Remove the specified item from the  specified ListBox.\n\n    Will only remove the first item that matches the parameter.  \n\n\n\n\n\n\n.clearListBox(title, callFunction=True)\n\n    Removes all items from the specified ListBox.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.clearAllListBoxes(callFunction=False)\n\n    This will remove all items from all ListBoxes in the app.\n\n    Set \ncallFunction\n to be True, if you want to call any associated functions.  \n\n\n\n\n\n\n.updateListBox(title, items, select=False)\n\n    Replace the contents of the specified ListBox with the new values.\n\n    If you set \nselect\n to be True, the last item in the list will be selected.  \n\n\n\n\n\n\nfrom appJar import gui\ndef press(btn):\n    items = app.getListItems(\nlist\n)\n    if len(items)\n 0:\n        app.removeListItem(\nlist\n, items[0])\n\napp=gui()\napp.setFont(20)\napp.addListBox(\nlist\n, [\napple\n, \norange\n, \npear\n, \nkiwi\n])\napp.addButton(\npress\n,  press)\napp.go()\n\n\n\n\n\n\n\n\n.selectListItem(title, item, callFunction=True)\n\n\n.selectListItemAtPos(title, pos, callFunction=False)\n\n    Selects the specified item in the specified ListBox.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.setListBoxRows(title, rows)\n\n    Sets how many rows to display in the specified ListBox.  \n\n\n\n\n\n\n.setListBoxMulti(list, multi=True)\n\n    Configures whether the specified ListBox is single or multi select.  \n\n\n\n\n\n\n.setListBoxGroup(list, group=True)\n\n    Adds the named ListBox to a group of selectable ListBoxes.\n\n    All ListBoxes in the group can have items selected at the same time.  \n\n\n\n\n\n\n.setListItemBg(title, item, colour)\n \n \n.setListItemFg(title, item, colour)\n\n\n.setListItemAtPosBg(title, item, colour)\n \n \n.setListItemAtPosFg(title, item, colour)\n\n    Sets the background or foreground colours the specified ListBox item.\n\n    Can either specify a named item (will update all with that name) or the position of an item.  \n\n\n\n\n\n\n  \n\n\nGet ListBoxes\n\n\n\n\n\n\n.getListBox(title)\n\n    Gets all of the selected items from the specified ListBox.  \n\n\n\n\n\n\n.getAllListBoxes()\n\n    This will return the contents of all ListBoxes in the app, as a dictionary.  \n\n\n\n\n\n\n.getAllListItems(title)\n\n    Gets all of the items from the specified ListBox.  \n\n\n\n\n\n\nScale\n\n\n\n\nA slider, that has a minimum \n maximum value.  \n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(20)\napp.addLabelScale(\nscale\n)\napp.go()\n\n\n\n\nAdd Scales\n\n\n\n\n.addScale(title)\n\n    Adds a horizontal scale, with a default range between 0 and 100.  \n\n\n\n\nSet Scales\n\n\n\n\n\n\n.setScale(title, pos, callFunction=True)\n\n    Sets the selected pos for the specified Scale.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.setScaleRange(title from, to, curr=None)\n\n    Allows you to change the range available in the Scale.\n\n    If \ncurr\n is provided, then the Scale will be set to that value.  \n\n\n\n\n\n\n.setScaleIncrement(title, increment)\n\n    Configures how much the scale jumps, when the trough is clicked.\n\n    It defaults to 10%.  \n\n\n\n\n\n\n.showScaleIntervals(title, intervals)\n\n    Configures the Scale to show interval labels along its length.\n\n\nintervals\n should be how often to show a value, eg. \n25\n would show 0, 25, 50, and so on...\n\n\n  \n\n\n\n\n\n\n.showScaleValue(title, show=True)\n\n    Configures the Scale to show the currently selected value.\n\n\n  \n\n\n\n\n\n\n.setScaleHorizontal(title)\n \n \n.setScaleVertical(title)\n\n    Changes the Scale's orientation to the specified value.  \n\n\n  \n\n\n\n\n\n\n.setScaleWidth(title, width)\n \n \n.setScaleLength(title, length)\n\n    Sets a width/length for the scale's slider.  \n\n\n\n\n\n\n.setScaleChangeFunction(title, func)\n\n    Sets a function to call, each time the scale is changed.\n\n    The function must take one parameter, which will be populated with the scale's title.  \n\n\n\n\n\n\n.clearAllScales(callFunction=False)\n\n    This will set all Scales in the app to their minimum value.\n\n    Set \ncallFunction\n to be True, if you want to call any associated functions.  \n\n\n\n\n\n\nGet Scales\n\n\n\n\n\n\n.getScale(title)\n\n    Gets the currently selected value from the scale.  \n\n\n\n\n\n\n.getAllScales()\n\n    This will return the contents of all Scales in the app, as a dictionary.  \n\n\n\n\n\n\nProperties\n\n\n\n\nA compound widget that shows multiple CheckButtons linked to a dictionary.\n\nNote, dictionaries have no order, so when added as a dictionary, the items will be automatically sorted.  \n\n\n\n\n\n\nfrom appJar import gui\n\ntoppings={\nCheese\n:False, \nTomato\n:False, \nBacon\n:False,\n            \nCorn\n:False, \nMushroom\n:False}\n\napp=gui()\napp.setBg(\nlightBlue\n)\napp.setFont(20)\napp.addProperties(\nToppings\n, toppings)\napp.setProperty(\nToppings\n, \nPepper\n)\napp.go()\n\n\n\n\nAdd Properties\n\n\n\n\n.addProperties(title, values)\n\n    Creates a new Properties widget, with the specified title.\n\n    If values is populated, then the dictionary items will be added to the widget.  \n\n\n\n\nSet Properties\n\n\n\n\n\n\n.setPropertyText(title, prop, newText=None)\n\n    Change the displayed text for the named property.\n\n    If no value is provided, the original value will be used.  \n\n\n\n\n\n\n.setProperties(title, props, callFunction=True)\n\n    Adds the dictionary of properties to the widget.\n\n    If any of them already exist, they will be updated.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.setProperty(title, prop, value=False, callFunction=True)\n\n    Sets the named property to the specified value.\n\n    If it doesn't exist, it will be added first, at the end of the widget.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.deleteProperty(title, prop)\n\n    Deletes the named property from the widget.  \n\n\n\n\n\n\n.resetProperties(title, callFunction=True)\n\n    This will reset the specified Properties back to its original values.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.clearProperties(title, callFunction=True)\n\n    This will set all values in the specified Properties to False.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.resetAllProperties(callFunction=False)\n\n    This will reset all Properties in the app back to their original values.\n\n    Set \ncallFunction\n to be True, if you want to call any associated functions.  \n\n\n\n\n\n\n.clearAllProperties(callFunction=False)\n\n    This will set all values in all Properties in the app to False.\n\n    Set \ncallFunction\n to be True, if you want to call any associated functions.  \n\n\n\n\n\n\nGet Properties\n\n\n\n\n\n\n.getProperties(title)\n\n    Gets a dictionary of the all items in the Properties widget.  \n\n\n\n\n\n\n.getAllProperties()\n\n    This will return the contents of all Properties in the app, as a dictionary.  \n\n\n\n\n\n\n.getProperty(title, prop)\n\n    Gets the value of the named property.  \n\n\n\n\n\n\nExamples\n\n\nIt's possible to put Properties into ToggleFrames, and also set a Function to listen for any changes.  \n\n\n\n\n\n\n\n\nfrom appJar import gui\n\ndef changed(props):\n    print(\nChanged\n, props)\n\ntoppings={\nCheese\n:False, \nTomato\n:False, \nBacon\n:False,\n            \nCorn\n:False, \nMushroom\n:False}\n\napp=gui()\napp.setBg(\nlightBlue\n)\napp.setFont(20)\n\napp.startToggleFrame(\nToppings\n)\napp.addProperties(\nToppings\n, toppings)\napp.setPropertiesChangeFunction(\nToppings\n, changed)\napp.stopToggleFrame()\n\napp.go()\n\n\n\n\nDatePicker\n\n\n\n\nA widget to capture a date - will handle presenting accurate drop-downs, and return a date.\n\n\n  \n\n\nfrom appJar import gui\n\ndef showDate(btn):\n    print(app.getDatePicker(\ndp\n))\n\napp=gui()\napp.addDatePicker(\ndp\n)\napp.addButton(\nGET\n, showDate)\napp.setDatePickerRange(\ndp\n, 1900, 2100)\napp.setDatePicker(\ndp\n)\napp.go()\n\n\n\n\nAdd DatePickers\n\n\n\n\n.addDatePicker(title)\n\n    Create a DatePicker, with a range from 1/1/1970 to 31/12/2020  \n\n\n\n\nSet DatePickers\n\n\n\n\n\n\n.setDatePicker(title, date=None)\n\n    Will set the specified DatePicker to the specified date, or current date if no date is supplied.  \n\n\n\n\n\n\n.setDatePickerRange(title, startYear, endYear=None)\n\n    Set the range for the named DatePicker.\n\n    If endYear is None, the current Year will be used.  \n\n\n\n\n\n\n.setDatePickerChangeFunction(title, function)\n\n    Set a function to call when the DatePicker is changed.  \n\n\n\n\n\n\n.clearDatePicker(title, callFunction=True)\n\n    This will reset the specified DatePicker to the earliest available date.\n\n    Set \ncallFunction\n to be False, if you don't want to call any associated functions.  \n\n\n\n\n\n\n.clearAllDatePickers(callFunction=False)\n\n    This will reset all DatePickers in the app to their earliest available date.\n\n    Set \ncallFunction\n to be True, if you want to call any associated functions.  \n\n\n\n\n\n\nGet DatePickers\n\n\n\n\n\n\n.getDatePicker(title)\n\n    Will return the currently selected date.  \n\n\n\n\n\n\n.getAllDatePickers()\n\n    This will return the contents of all DatePickers in the app, as a dictionary.  \n\n\n\n\n\n\nAuto-Labelled Widgets\n\n\n\n\nIt's possible to automatically include a \nlabel\n alongside some of widgets below.\n\nBoth the label and widget will be placed in the same grid space.\n\nSimply add the word \nLabel\n to the command when adding the widget:  \n\n\n\n\n.addLabelEntry(title)\n\n\n.addLabelNumericEntry(title)\n\n\n.addLabelSecretEntry(title)\n\n\n.addLabelAutoEntry(title, words)\n\n\n.addLabelScale(title)\n\n\n.addLabelOptionBox(title, values)\n\n\n.addLabelTickOptionBox(title, values)\n\n\n.addLabelSpinBox(title, values)\n\n\n.addLabelSpinBoxRange(title, from, to)", 
            "title": "Input Widgets"
        }, 
        {
            "location": "/inputWidgets/#input-widgets", 
            "text": "Input widgets are used for capturing user interactions, either by cicking, typing or dragging.    They usually provide three functions:     ADD  - this creates the widget    GET  - this gets the contents/state of the widget    SET  - this changes what's in the widget     As well as options to change the way they  look/act .    For each of the above to work, we need to know which widget you are referring to - so every widget gets a  unique title .    If you want your input widget to have a label, there are some  auto-label functions", 
            "title": "Input Widgets"
        }, 
        {
            "location": "/inputWidgets/#entry", 
            "text": "Entries are used to capture typed input from the user. They take a single parameter - a title.  There are five special-case Entries:   NumericEntry  - this only allows numbers to be typed in - always returns a float (None if empty).  SecretEntry  - this will show stars, instead of the letters typed - useful for capturing passwords.  AutoEntry  - this takes a list of words to provide auto-completion.    ValidationEntry  - can be set to valid/invalid/waiting - will colour the border green/red/black and show a \u2714/\u2716/\u2605    FileEntry/DirectoryEntry  - provides a button to select a file/directory and auto-populates the Entry      from appJar import gui\n\napp=gui()\n\napp.addEntry( e1 )\napp.addEntry( e2 )\napp.addEntry( e3 )\napp.addLabelEntry( Name )\napp.addValidationEntry( v1 )\napp.addFileEntry( f1 )\n\napp.setEntryDefault( e2 ,  Age here )\napp.setEntryValid( v1 )\n\napp.go()", 
            "title": "Entry"
        }, 
        {
            "location": "/inputWidgets/#add-entries", 
            "text": ".addEntry(title)  .addNumericEntry(title)  .addSecretEntry(title)  .addValidationEntry(title)     .addFileEntry(title)     .addDirectoryEntry(title)     .addAutoEntry(title, words) \n    This also takes a  words  parameter, which must be a list, and is used to populate he drop-down.     Each of these will add the specified type of Entry, using the title provided.", 
            "title": "Add Entries"
        }, 
        {
            "location": "/inputWidgets/#set-entries", 
            "text": ".setEntry(title, text, callFunction=True) \n    This sets the contents of the specified Entry. \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .setEntryDefault(title, text) \n    This sets a default value to display in an Entry. \n    Once the user starts typing, it will disappear. \n    The text is centered, shown in a light gray font, and will not be returned by  .getEntry(title)       .setEntryUpperCase(title)     .setEntryLowerCase(title)   \n    This will force all text typed into the Entry to be uppercase/lowercase.      .setEntryMaxLength(title, maxLength) \n    This will set a maximum length for the specified Entry. \n    Any additional characters typed will be discarded.      .setEntryValid(title)     .setEntryInvalid(title)     .setEntryWaitingValidation(title) \n    These will set the relevant status of a Validation Entry (how it looks). \n    (Have a look  here  for help displaying special characters)     .setValidationEntry(title, state=\"valid\") \n    Same as above, set flag to one of  valid ,  invalid  or  wait .      .setAutoEntryNumRows(title, rows) \n    This will set the number of rows to display in an AutoEntry. \n    NB. this is limited to the depth of the GUI - if there is no space, then no rows will be displayed. \n           .appendAutoEntry(title, value) \n    This will add the value/list of values to the specified AutoEntry.      .removeAutoEntry(title, value) \n    This will remove the value from the specified AutoEntry.      .changeAutoEntry(title, value) \n    This will replace all items in the specified AutoEntry with a new list of values.      .clearEntry(title, callFunction=True) \n    This will clear the contents of the specified Entry. \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .clearAllEntries(callFunction=False) \n    This will clear all Entries in the GUI. \n    Set  callFunction  to be True, if you want to call any associated functions.      .setFocus(title) \n    This will put the cursor in the specified Entry, so that the user can start typing without needing to click.", 
            "title": "Set Entries"
        }, 
        {
            "location": "/inputWidgets/#get-entries", 
            "text": ".getEntry(title) \n    This will return the contents of the specified Entry. \n    NB.  numericEntries  always return a float.      .getAllEntries() \n    This will return the contents of all Entries in the app, as a dictionary. \n    NB.  numericEntries  always return a float.", 
            "title": "Get Entries"
        }, 
        {
            "location": "/inputWidgets/#textarea", 
            "text": "Similar to an Entry, but allows you to type text over multiple lines.        from appJar import gui\n\napp=gui()\napp.addTextArea( t1 )\napp.go()", 
            "title": "TextArea"
        }, 
        {
            "location": "/inputWidgets/#add-textareas", 
            "text": ".addTextArea(title) \n    Adds an empty TextArea, with the specified title.      .addScrolledTextArea(title) \n    Adds a scrollable TextArea with the specified title.", 
            "title": "Add TextAreas"
        }, 
        {
            "location": "/inputWidgets/#set-textareas", 
            "text": ".setTextArea(title, text, end=True, callFunction=True) \n    Adds the supplied text to the specified TextArea. \n    By default, the text is added to the end. \n    Set  end  to be False if you want to add at the beginning. \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .clearTextArea(title, callFunction=True) \n    Clears the contents of the specified TextArea. \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .clearAllTextAreas(callFunction=False) \n    This will clear the contents of all TextAreas in the app. \n    Set  callFunction  to be True, if you want to call any associated functions.", 
            "title": "Set TextAreas"
        }, 
        {
            "location": "/inputWidgets/#get-textareas", 
            "text": ".getTextArea(title) \n    Gets the contents of the specified TextArea.      .getAllTextAreas() \n    This will return the contents of all TextAreas in the app, as a dictionary.", 
            "title": "Get TextAreas"
        }, 
        {
            "location": "/inputWidgets/#button", 
            "text": "A clickable button, that will call a function. \nThese are the key to starting an interactive application. \nThe GUI is looping, waiting for something to happen. \nA button click is the classic way to start interacting with a GUI.  Whenever any function is called by the GUI, the title of the widget that called it is passed as a parameter. \nThat way, multiple widgets can use the same function, but different actions can be performed, depending on the name passed as a parameter.       from appJar import gui\n\n    # the title of the button will be received as a parameter\n    def press(btn):\n        print(btn)\n\n    app=gui()\n    # 3 buttons, each calling the same function\n    app.addButton( One , press)\n    app.addButton( Two , press)\n    app.addButton( Three , press)\n    app.go()", 
            "title": "Button"
        }, 
        {
            "location": "/inputWidgets/#add-buttons", 
            "text": ".addButton(title, function) \n    Add a single button to the GUI, the text on the button will be the same as the button's title. \n    A function should be specified, which will be called when the button is clicked, where the title is passed as a parameter to the function. \n    Alternatively, the function can have no parameter, and appJar will not supply an argument.         .addButtons(titles, functions) \n    It's possible to add a list of buttons to the GUI. \n    Pass a 1-dimensional or 2-dimensional list, and they will be rendered accordingly. \n    A single function can be passed, to use for all buttons. \n    Or a list of functions can be passed, which MUST correspond to the buttons.      .addImageButton(title, function, imgFile, align=None) \n    This creates the named button, as above, using the specified image. \n    If align is set, the image will be aligned relative to the text, otherwise the image will replace the text.      .addIconButton(title, function, iconName, align=None) \n    This creates the named button, as above, using the specified icon. \n    If align is set, the image will be aligned relative to the text, otherwise the image will replace the text.      .addNamedButton(name, title, function) \n    By default, it's not possible to have two buttons with the same text. \n    If that's required, a named button should be used. \n    This allows a name and title to be set for a button. \n    The name will be displayed on the button, and the title passed to the function.", 
            "title": "Add Buttons"
        }, 
        {
            "location": "/inputWidgets/#set-buttons", 
            "text": ".setButton(name, text) \n    This will change the text displayed on a button, but  NOT  the value passed as a parameter to the function.      .setButtonImage(title, image, align=None) \n    This allows an image to be placed on a button, instead of the usual text. \n    If align is set, the image will be aligned relative to the text, otherwise the image will replace the text.", 
            "title": "Set Buttons"
        }, 
        {
            "location": "/inputWidgets/#linkweblink", 
            "text": "Clickable text to call a function or launch a URL      from appJar import gui\ndef press(link):\n    app.infoBox( Info ,  You clicked the link! )\n\napp=gui()\napp.setFont(20)\napp.addLink( Click me , press)\napp.addWebLink( appJar.info ,  http://appJar.info )\napp.go()", 
            "title": "Link/WebLink"
        }, 
        {
            "location": "/inputWidgets/#add-links", 
            "text": ".addLink(title, func) \n    Adds a  hyperlink , that when clicked, will call the specified function.      .addWebLink(title, page) \n    Adds a  hyperlink , that when clicked, will launch the default browser, and load the specified page. \n    It must be a fully formed link, including  http://", 
            "title": "Add Links"
        }, 
        {
            "location": "/inputWidgets/#get-links", 
            "text": ".getLink(title) \n    Returns the text displayed in the link.", 
            "title": "Get Links"
        }, 
        {
            "location": "/inputWidgets/#set-links", 
            "text": ".setLink(title, func) \n    Changes the function/webpage the link calls.", 
            "title": "Set Links"
        }, 
        {
            "location": "/inputWidgets/#radiobutton", 
            "text": "A group of round boxes, only one of which can be selected. \nThese are great for getting a single value, for a multiple choice question.        from appJar import gui\n\napp=gui()\napp.addRadioButton( song ,  Killer Queen )\napp.addRadioButton( song ,  Paradise City )\napp.addRadioButton( song ,  Parklife )\napp.go()", 
            "title": "RadioButton"
        }, 
        {
            "location": "/inputWidgets/#add-radiobuttons", 
            "text": ".addRadioButton(title, name) \n    This will create a RadioButton grouped by the specified title. \n    This button will have the value of name. \n    Radio buttons are usually used in groups.", 
            "title": "Add RadioButtons"
        }, 
        {
            "location": "/inputWidgets/#set-radiobuttons", 
            "text": ".setRadioButton(title, value, callFunction=True) \n    This will tick the specified RadioButton. \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .setRadioTick(title, tick=True) \n    It is possible to use tick-boxes instead of the classic circular radio-button. \n    Setting tick to True will convert all the radio-buttons for this title to tick boxes.      .clearAllRadioButtons(callFunction=False) \n    This will reset all RadioButtons in the app to their first value. \n    Set  callFunction  to be True, if you want to call any associated functions.", 
            "title": "Set RadioButtons"
        }, 
        {
            "location": "/inputWidgets/#get-radiobuttons", 
            "text": ".getRadioButton(title) \n    Gets the value of the selected RadioButton, for the specified title.       from appJar import gui\n\n    def press(rb):\n        print(app.getRadioButton( song ))\n\n    app=gui()\n    app.addRadioButton( song ,  Killer Queen )\n    app.addRadioButton( song ,  Paradise City )\n\n    # call this function, when the RadioButton changes\n    app.setRadioButtonChangeFunction( song , press)\n\n    app.addButton( PLAY , press)\n    app.go()   .getAllRadioButtons() \n    This will return the contents of all RadioButtons in the app, as a dictionary.", 
            "title": "Get RadioButtons"
        }, 
        {
            "location": "/inputWidgets/#checkbox", 
            "text": "A simple tick-box, with a label, that can be either ON or OFF.        from appJar import gui\n\napp=gui()\napp.setFont(20)\n\napp.addCheckBox( Apples )\napp.addCheckBox( Pears )\napp.addCheckBox( Oranges )\napp.addCheckBox( Kiwis )\n\napp.setCheckBox( Oranges )\n\napp.go()", 
            "title": "CheckBox"
        }, 
        {
            "location": "/inputWidgets/#add-checkboxes", 
            "text": ".addCheckBox(title) \n    This creates a CheckBox, with the specified title.      .addNamedCheckBox(name, title) \n    By default, it's not possible to have two CheckBoxes with the same text. \n    If that's required, a named CheckBox should be used. \n    This creates a CheckBox, with the specified title. \n    The name will be displayed next to the CheckBox, and the title passed to the function as a unique ID.", 
            "title": "Add CheckBoxes"
        }, 
        {
            "location": "/inputWidgets/#set-checkboxes", 
            "text": ".setCheckBox(title, ticked=True, callFunction=True) \n    This will tick the CheckBox, or untick it if ticked is set to False. \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .clearAllCheckBoxes(callFunction=False) \n    This will clear (untick) all CheckBoxes in the app. \n    Set  callFunction  to be True, if you want to call any associated functions.", 
            "title": "Set CheckBoxes"
        }, 
        {
            "location": "/inputWidgets/#get-checkboxes", 
            "text": ".getCheckBox(title) \n    This will return True or False, depending on the state of the CheckBox.      .getAllCheckBoxes() \n    This will return the contents of all CheckBoxes in the app, as a dictionary.", 
            "title": "Get CheckBoxes"
        }, 
        {
            "location": "/inputWidgets/#optionbox", 
            "text": "Creates a simple drop-down box. \nIt is only possible to select one option from this drop-down. \nPass in a list of values to show in the drop-down box. \nThey will be added in the same order, with the first item shown. \nIf the first item is empty, a simple title  - options -  will be created. \nAny other empty items will be removed. \nIf an item starts with a dash (-), it will be treated as a separator, and can't be selected.          from appJar import gui\n\napp=gui()\napp.setFont(20)\napp.addLabelOptionBox( Options , [ - Fruits - ,  Apple ,  Orange ,\n                         Pear ,  kiwi ,  - Pets - ,  Dogs ,  Cats ,\n                         Fish ,  Hamsters ])\napp.go()", 
            "title": "OptionBox"
        }, 
        {
            "location": "/inputWidgets/#add-optionboxes", 
            "text": ".addOptionBox(title, values) \n    This will create an OptionBox, adding the contents of the values list, in the order specified.      .addTickOptionBox(title, values) \n    This will create an OptionBox made up of check boxes. \n    The  title  will always be displayed as the  selected  entry in the OptionBox, event though it can't be selected/ticked. \n    Instead of selecting a single item, you tick the ones you want.      Calling  .getOptionBox(title)  will return a dictionary of the options along with a True/False value.      from appJar import gui\n\ndef get(btn):\n    print(app.getOptionBox( Favourite Pets ))\n\napp=gui()\napp.setFont(20)\napp.addTickOptionBox( Favourite Pets , [ Dogs ,  Cats ,  Hamsters ,  Fish ])\napp.addButton( GET , get)\napp.go()", 
            "title": "Add OptionBoxes"
        }, 
        {
            "location": "/inputWidgets/#set-optionboxes", 
            "text": ".changeOptionBox(title, newOptions, index, callFunction=False) \n    This will replace the contents of the OptionBox, with the new list provided. \n    If specified, the indexed item will be selected - this can be a position or an item name. \n    If setting a TickOptionBox, the old list will be replaced with the new list. None will be ticked.  index  will be ignored. \n    Set  callFunction  to be True, if you want to call any associated  change  functions.      .setOptionBox(title, position, value=True, callFunction=True, override=False) \n    This will select the item in the list, at the position specified. \n    Alternatively, the name of an item can be specified. \n    If changing a TickOptionBox, the specified item will be set to the specified value. \n    Set  callFunction  to be False, if you don't want to call any associated functions. \n    By default, you can't select a disabled item. You can change this by setting  override  to be True.      .renameOptionBoxItem(title, item, newName, callFunction=False) \n    This will rename the specified item in the named OptionBox. \n    Set  callFunction  to be True, if you want to call any associated  change  functions.      .clearOptionBox(title, callFunction=True) \n    This will set the named OptionBox back to its first value (even if it's disabled). \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .clearAllOptionBoxes(callFunction=False) \n    This will set all OptionBoxes in the app back to their first value (even if it's disabled). \n    Set  callFunction  to be True, if you want to call any associated functions.      .deleteOptionBox(title, position) \n    This will delete the item in the list, at the position specified. \n    Alternatively, the name of an item can be specified. \n    Not available on TickOptionBoxes.", 
            "title": "Set OptionBoxes"
        }, 
        {
            "location": "/inputWidgets/#get-optionboxes", 
            "text": ".getOptionBox(title) \n    This will return the currently displayed value in an OptionBox. \n    Or a dictionary of names, and their boolean value if a TickOptionBox. \n    Will return None, if an invalid option is currently selected.      .getAllOptionBoxes() \n    This will return the contents of all OptionBoxes in the app, as a dictionary.", 
            "title": "Get OptionBoxes"
        }, 
        {
            "location": "/inputWidgets/#spinbox", 
            "text": "A scrollable list of options. Up and down buttons are provided to scroll from one item to the next. \nUnlike the OptionBox, you do not get a drop-down of choices, instead it spins to the next/previous option.        from appJar import gui\n\napp=gui()\napp.setFont(20)\napp.addLabelSpinBox( options , [ Apple ,  Orange ,  Pear ,  kiwi ])\napp.go()", 
            "title": "SpinBox"
        }, 
        {
            "location": "/inputWidgets/#add-spinboxes", 
            "text": ".addSpinBox(title, values) \n    This will create a SpinBox, adding the contents of the values list, in the order specified.    .addSpinBoxRange(title, from, to) \n    This will create a SpinBox, with a numeric range of items.              from appJar import gui\n\n    app=gui()\n    app.setFont(20)\n    app.addSpinBoxRange( Numbers , 1, 12)\n    app.go()", 
            "title": "Add SpinBoxes"
        }, 
        {
            "location": "/inputWidgets/#set-spinboxes", 
            "text": ".setSpinBox(title, value, callFunction=True) \n    This will select the specified value in the SpinBox. \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .setSpinBoxPos(title, pos, callFunction=True) \n    This will select the value at the specified position in the SpinBox. \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .clearAllSpinBoxes(callFunction=False) \n    This will set all SpinBoxes in the app to their first value. \n    Set  callFunction  to be True, if you want to call any associated functions.", 
            "title": "Set SpinBoxes"
        }, 
        {
            "location": "/inputWidgets/#get-spinboxes", 
            "text": ".getSpinBox(title) \n    This will get the selected value from the specified SpinBox.      .getAllSpinBoxes() \n    This will return the contents of all SpinBoxes in the app, as a dictionary.", 
            "title": "Get SpinBoxes"
        }, 
        {
            "location": "/inputWidgets/#listbox", 
            "text": "A box containing a list of items, single or multi-select      from appJar import gui\n\napp=gui()\napp.setFont(20)\napp.addListBox( list , [ apple ,  orange ,  pear ,  kiwi ])\napp.go()", 
            "title": "ListBox"
        }, 
        {
            "location": "/inputWidgets/#add-listboxes", 
            "text": ".addListBox(title, values) \n    Creates a ListBox with the specified values.      .addListItem(title, item) \n    Adds a single item to the the end of the ListBox, and selects it.      .addListItems(title, items) \n    Adds a list of items to the end of the List Box, selecting the last one.", 
            "title": "Add ListBoxes"
        }, 
        {
            "location": "/inputWidgets/#set-listboxes", 
            "text": ".setListItem(title, item, newVal, first=False)  .setListItemAtPos(title, pos, newVal) \n    Changes the specified list item to the new value. \n    If  first  is set to True, only the first item found will be changed. \n    Otherwise, all occurrences of the specified value will be changed.      .removeListItem(title, item)  .removeListItemAtPos(title, pos) \n    Remove the specified item from the  specified ListBox. \n    Will only remove the first item that matches the parameter.      .clearListBox(title, callFunction=True) \n    Removes all items from the specified ListBox. \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .clearAllListBoxes(callFunction=False) \n    This will remove all items from all ListBoxes in the app. \n    Set  callFunction  to be True, if you want to call any associated functions.      .updateListBox(title, items, select=False) \n    Replace the contents of the specified ListBox with the new values. \n    If you set  select  to be True, the last item in the list will be selected.      from appJar import gui\ndef press(btn):\n    items = app.getListItems( list )\n    if len(items)  0:\n        app.removeListItem( list , items[0])\n\napp=gui()\napp.setFont(20)\napp.addListBox( list , [ apple ,  orange ,  pear ,  kiwi ])\napp.addButton( press ,  press)\napp.go()    .selectListItem(title, item, callFunction=True)  .selectListItemAtPos(title, pos, callFunction=False) \n    Selects the specified item in the specified ListBox. \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .setListBoxRows(title, rows) \n    Sets how many rows to display in the specified ListBox.      .setListBoxMulti(list, multi=True) \n    Configures whether the specified ListBox is single or multi select.      .setListBoxGroup(list, group=True) \n    Adds the named ListBox to a group of selectable ListBoxes. \n    All ListBoxes in the group can have items selected at the same time.      .setListItemBg(title, item, colour)     .setListItemFg(title, item, colour)  .setListItemAtPosBg(title, item, colour)     .setListItemAtPosFg(title, item, colour) \n    Sets the background or foreground colours the specified ListBox item. \n    Can either specify a named item (will update all with that name) or the position of an item.", 
            "title": "Set ListBoxes"
        }, 
        {
            "location": "/inputWidgets/#get-listboxes", 
            "text": ".getListBox(title) \n    Gets all of the selected items from the specified ListBox.      .getAllListBoxes() \n    This will return the contents of all ListBoxes in the app, as a dictionary.      .getAllListItems(title) \n    Gets all of the items from the specified ListBox.", 
            "title": "Get ListBoxes"
        }, 
        {
            "location": "/inputWidgets/#scale", 
            "text": "A slider, that has a minimum   maximum value.        from appJar import gui\n\napp=gui()\napp.setFont(20)\napp.addLabelScale( scale )\napp.go()", 
            "title": "Scale"
        }, 
        {
            "location": "/inputWidgets/#add-scales", 
            "text": ".addScale(title) \n    Adds a horizontal scale, with a default range between 0 and 100.", 
            "title": "Add Scales"
        }, 
        {
            "location": "/inputWidgets/#set-scales", 
            "text": ".setScale(title, pos, callFunction=True) \n    Sets the selected pos for the specified Scale. \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .setScaleRange(title from, to, curr=None) \n    Allows you to change the range available in the Scale. \n    If  curr  is provided, then the Scale will be set to that value.      .setScaleIncrement(title, increment) \n    Configures how much the scale jumps, when the trough is clicked. \n    It defaults to 10%.      .showScaleIntervals(title, intervals) \n    Configures the Scale to show interval labels along its length.  intervals  should be how often to show a value, eg.  25  would show 0, 25, 50, and so on...        .showScaleValue(title, show=True) \n    Configures the Scale to show the currently selected value.        .setScaleHorizontal(title)     .setScaleVertical(title) \n    Changes the Scale's orientation to the specified value.          .setScaleWidth(title, width)     .setScaleLength(title, length) \n    Sets a width/length for the scale's slider.      .setScaleChangeFunction(title, func) \n    Sets a function to call, each time the scale is changed. \n    The function must take one parameter, which will be populated with the scale's title.      .clearAllScales(callFunction=False) \n    This will set all Scales in the app to their minimum value. \n    Set  callFunction  to be True, if you want to call any associated functions.", 
            "title": "Set Scales"
        }, 
        {
            "location": "/inputWidgets/#get-scales", 
            "text": ".getScale(title) \n    Gets the currently selected value from the scale.      .getAllScales() \n    This will return the contents of all Scales in the app, as a dictionary.", 
            "title": "Get Scales"
        }, 
        {
            "location": "/inputWidgets/#properties", 
            "text": "A compound widget that shows multiple CheckButtons linked to a dictionary. \nNote, dictionaries have no order, so when added as a dictionary, the items will be automatically sorted.      from appJar import gui\n\ntoppings={ Cheese :False,  Tomato :False,  Bacon :False,\n             Corn :False,  Mushroom :False}\n\napp=gui()\napp.setBg( lightBlue )\napp.setFont(20)\napp.addProperties( Toppings , toppings)\napp.setProperty( Toppings ,  Pepper )\napp.go()", 
            "title": "Properties"
        }, 
        {
            "location": "/inputWidgets/#add-properties", 
            "text": ".addProperties(title, values) \n    Creates a new Properties widget, with the specified title. \n    If values is populated, then the dictionary items will be added to the widget.", 
            "title": "Add Properties"
        }, 
        {
            "location": "/inputWidgets/#set-properties", 
            "text": ".setPropertyText(title, prop, newText=None) \n    Change the displayed text for the named property. \n    If no value is provided, the original value will be used.      .setProperties(title, props, callFunction=True) \n    Adds the dictionary of properties to the widget. \n    If any of them already exist, they will be updated. \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .setProperty(title, prop, value=False, callFunction=True) \n    Sets the named property to the specified value. \n    If it doesn't exist, it will be added first, at the end of the widget. \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .deleteProperty(title, prop) \n    Deletes the named property from the widget.      .resetProperties(title, callFunction=True) \n    This will reset the specified Properties back to its original values. \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .clearProperties(title, callFunction=True) \n    This will set all values in the specified Properties to False. \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .resetAllProperties(callFunction=False) \n    This will reset all Properties in the app back to their original values. \n    Set  callFunction  to be True, if you want to call any associated functions.      .clearAllProperties(callFunction=False) \n    This will set all values in all Properties in the app to False. \n    Set  callFunction  to be True, if you want to call any associated functions.", 
            "title": "Set Properties"
        }, 
        {
            "location": "/inputWidgets/#get-properties", 
            "text": ".getProperties(title) \n    Gets a dictionary of the all items in the Properties widget.      .getAllProperties() \n    This will return the contents of all Properties in the app, as a dictionary.      .getProperty(title, prop) \n    Gets the value of the named property.", 
            "title": "Get Properties"
        }, 
        {
            "location": "/inputWidgets/#examples", 
            "text": "It's possible to put Properties into ToggleFrames, and also set a Function to listen for any changes.       from appJar import gui\n\ndef changed(props):\n    print( Changed , props)\n\ntoppings={ Cheese :False,  Tomato :False,  Bacon :False,\n             Corn :False,  Mushroom :False}\n\napp=gui()\napp.setBg( lightBlue )\napp.setFont(20)\n\napp.startToggleFrame( Toppings )\napp.addProperties( Toppings , toppings)\napp.setPropertiesChangeFunction( Toppings , changed)\napp.stopToggleFrame()\n\napp.go()", 
            "title": "Examples"
        }, 
        {
            "location": "/inputWidgets/#datepicker", 
            "text": "A widget to capture a date - will handle presenting accurate drop-downs, and return a date.      from appJar import gui\n\ndef showDate(btn):\n    print(app.getDatePicker( dp ))\n\napp=gui()\napp.addDatePicker( dp )\napp.addButton( GET , showDate)\napp.setDatePickerRange( dp , 1900, 2100)\napp.setDatePicker( dp )\napp.go()", 
            "title": "DatePicker"
        }, 
        {
            "location": "/inputWidgets/#add-datepickers", 
            "text": ".addDatePicker(title) \n    Create a DatePicker, with a range from 1/1/1970 to 31/12/2020", 
            "title": "Add DatePickers"
        }, 
        {
            "location": "/inputWidgets/#set-datepickers", 
            "text": ".setDatePicker(title, date=None) \n    Will set the specified DatePicker to the specified date, or current date if no date is supplied.      .setDatePickerRange(title, startYear, endYear=None) \n    Set the range for the named DatePicker. \n    If endYear is None, the current Year will be used.      .setDatePickerChangeFunction(title, function) \n    Set a function to call when the DatePicker is changed.      .clearDatePicker(title, callFunction=True) \n    This will reset the specified DatePicker to the earliest available date. \n    Set  callFunction  to be False, if you don't want to call any associated functions.      .clearAllDatePickers(callFunction=False) \n    This will reset all DatePickers in the app to their earliest available date. \n    Set  callFunction  to be True, if you want to call any associated functions.", 
            "title": "Set DatePickers"
        }, 
        {
            "location": "/inputWidgets/#get-datepickers", 
            "text": ".getDatePicker(title) \n    Will return the currently selected date.      .getAllDatePickers() \n    This will return the contents of all DatePickers in the app, as a dictionary.", 
            "title": "Get DatePickers"
        }, 
        {
            "location": "/inputWidgets/#auto-labelled-widgets", 
            "text": "It's possible to automatically include a  label  alongside some of widgets below. \nBoth the label and widget will be placed in the same grid space. \nSimply add the word  Label  to the command when adding the widget:     .addLabelEntry(title)  .addLabelNumericEntry(title)  .addLabelSecretEntry(title)  .addLabelAutoEntry(title, words)  .addLabelScale(title)  .addLabelOptionBox(title, values)  .addLabelTickOptionBox(title, values)  .addLabelSpinBox(title, values)  .addLabelSpinBoxRange(title, from, to)", 
            "title": "Auto-Labelled Widgets"
        }, 
        {
            "location": "/pythonImages/", 
            "text": "Images\n\n\n\n\n  \n\n\nDefault image support in appJar assumes no extra libraries, so it only has native support for \n.GIF\n and \n.PPM\n images.\n\nHowever, extra code is included to allow the use of \n.PNG\n and \n.JPG\n files. appJar will convert these to \n.GIF\n files, before showing them.\n\nConverting image files is \nSLOW\n, so it's best to stick to \n.GIF\n files!\n\nAlso, converting PNGs is temperamental in Python 2.7 - another reason to avoid.  \n\n\nGetting the path for images right can be \nTRICKY\n\nIt's therefore best to put images in the same folder as your Python code.\n\nOr, create an image folder and set it using the \n.setImageLocation(location)\n function.  \n\n\nBuilt-in icons\n\n\nappJar has a host of built-in icons you can use.\n\nThey are all located in a folder called: \ngui.icon_path\n\nIf you want to use one, you could just use \n.addIcon()\n or \n.addIconButton()\n\nOtherwise, concatenate \ngui.icon_path\n with the icon's name and \n.png\n  \n\n\nAdd Images\n\n\n\n\n\n\n.addImage(title, file, compound=None)\n\n    Adding an image is exactly the same as adding any other widget.\n\n    Simply give the image a title, and pass the filename.\n\n    appJar will confirm the file is valid, and will also check the file contains the type specified.\n\n    If an animated \n.GIF\n is found, then it will be animated within the GUI.\n\n\ncompound\n can be set to one of \ntop\n, \nbottom\n, \nleft\n, \nright\n, \ncenter\n - this will show the image title in that position.  \n\n\n\n\napp.startLabelFrame(\nSimple\n, 0, 0)\napp.addImage(\nsimple\n, \nballoons.gif\n)\napp.stopLabelFrame()\n\n\n\n\n\n\n.addImageData(title, imgData, fmt=\"gif\", compound=None)\n\n    As above, but receives raw image data.\n\n    Currently only supports base64 encoded GIF images.\n\n    Alternatively, you can pass in a ready made PhotoImage, simply set \nfmt\n to be 'PhotoImage'.\n\n\ncompound\n can be set to one of \ntop\n, \nbottom\n, \nleft\n, \nright\n, \ncenter\n - this will show the image title in that position.  \n\n\n\n\nfrom appJar import gui \nfrom PIL import Image, ImageTk\n\napp = gui()\nphoto = ImageTk.PhotoImage(Image.open(\nimages.jpg\n))\napp.addImageData(\npic\n, photo, fmt=\nPhotoImage\n)\napp.go()\n\n\n\n\n\n\n\n\n.addIcon(title, iconName, compound=None)\n\n    This will create an image as above, but use one of appJar's inbuilt icons.\n\n    Simply pass the name of one of the icons.\n\n\ncompound\n can be set to one of \ntop\n, \nbottom\n, \nleft\n, \nright\n, \ncenter\n - this will show the image title in that position.  \n\n\n\n\n\n\n.setImageLocation(location)\n\n    Set a folder for image files.\n\n    This will be put before the names of any image files used.  \n\n\n\n\n\n\nChange Images\n\n\n\n\n\n\n\n\n.setImage(title, image)\n \n \n.setImageData(title, imgData, fmt=\"gif\")\n\n    This will replace the existing image with the new one.\n\n    If the image has the same path, it will not be changed.\n\n    ImageData is always reloaded.  \n\n\n\n\n\n\n.reloadImage(title, image)\n \n \n.reloadImageData(title, imgData, fmt=\"gif\")\n\n    This will replace the existing image with the new one.\n\n    It will force an image reload, even if the file name hasn't changed.\n\n    Useful if an outside agency modifies the image file.  \n\n\n\n\n\n\ndef changePic(btn):\n    if btn == \nReload\n:\n        app.reloadImage(\nreload\n, \nballoons.gif\n)\n\napp.startLabelFrame(\nReload\n, 1, 1)\napp.setSticky(\new\n)\napp.addImage(\nreload\n, \nballoons.gif\n)\napp.addButton(\nReload\n, changePic)\napp.stopLabelFrame()\n\n\n\n\n\n\n.setImageSubmitFunction(title, function)\n\n    This will set a function to call when the image is clicked.  \n\n\n\n\nclicked = False\ndef changePic(btn):\n    if btn == \nclickme\n:\n        global clicked\n        if clicked: app.setImage(\nclickme\n, \nballoons.gif\n)\n        else: app.setImage(\nclickme\n, \nballoons2.png\n)\n        clicked = not clicked\n\napp.startLabelFrame(\nClick Me\n, 0, 2)\napp.addImage(\nclickme\n, \nballoons.gif\n)\napp.setImageSubmitFunction(\nclickme\n, changePic)\napp.stopLabelFrame()\n\n\n\n\n\n\n.setImageMouseOver(title, image)\n\n    Set an image to show, instead of the stored image, while the mouse is over this widget.  \n\n\n\n\napp.startLabelFrame(\nMouse Over\n, 0, 1)\napp.addImage(\nmo_1\n, \nballoons.gif\n)\napp.setImageMouseOver(\nmo_1\n, \nballoons2.png\n)\napp.stopLabelFrame()\n\n\n\n\n\n\n\n\n.setImageSize(title, width, height)\n\n    This will set the size of the container for the image, cropping anything that doesn't fit.  \n\n\n\n\n\n\n.zoomImage(title, mod)\n\n    This will attempt to change the size of the image.\n\n    It's very rudimentary, and usually doesn't look good - but is fun to play around with (try adding a slider under an image...)\n\n    Negative values will shrink the image, positive will enlarge the image.  \n\n\n\n\n\n\ndef changePic(btn):\n    if btn == \nZoom\n:\n        app.zoomImage(\nZoom\n, int(app.getSpinBox(\nZoom\n)))\n\n\n\n\n\n\n.shrinkImage(title, mod)\n \n \n.growImage(title, mod)\n\n    These are wrappers for the above function, simply causing the image to shrink or grow accordingly.\n\n\n\n\nImage Maps\n\n\n\n\nIt is possible to set up a simple ImageMap - a clickable image, with names linked to different areas.\n\nWhen one of those areas is clicked, a function will be called, passing the name of the area as a parameter.  \n\n\n\n\n.setImageMap(title, func, coords)\n\n    This will associate an image map with the named image.\n\n\ncoords\n must contain a dictionary of areas on the map.\n\n    When a position on the image is clicked, in one of the areas, the named function will be called, passing in the area's name.\n\n    When an unknown position on the image is clicked, \nUNKNOWN\n will be passed to the function, along with the coordinates.  \n\n\n\n\nfrom appJar import gui\n\n# each list of numbers contains the top left x/y and bottom right x/y\ncoords = {\n    \nAmerica\n:[32, 17, 242, 167],\n    \nSouth America\n:[126, 170, 226, 292],\n}\n\ndef click(area):\n    app.setLabel(\nl1\n, area)\n\napp=gui()\napp.addImage(\ni1\n, \nmap.gif\n)\napp.setImageMap(\ni1\n, click, coords)\napp.addLabel(\nl1\n, \nclick the map\n)\napp.go()\n\n\n\n\nChange Image Animation\n\n\n\n\nIf an image is animated, it's possible to control it.\n\n\n\n\n\n\n.setAnimationSpeed(title, speed)\n\n    This will change the speed an image is animated at.\n\n\n\n\n\n\n.stopAnimation(title)\n \n \n.startAnimation(title)\n\n    These will start and stop the animation of an image.\n\n\n\n\n\n\ndef changePic(btn):\n    if btn == \nStop\n:\n        global animated\n        if animated:\n            app.stopAnimation(\nanimated\n)\n            app.setButton(\nStop\n, \nStart\n)\n        else:\n            app.startAnimation(\nanimated\n)\n            app.setButton(\nStop\n, \nStop\n)\n        animated = not animated\n\napp.startLabelFrame(\nAnimated\n, 1, 2)\napp.setSticky(\new\n)\napp.addImage(\nanimated\n, \nanimated_balloons.gif\n)\napp.addButton(\nStop\n, changePic)\napp.stopLabelFrame()\n\n\n\n\nSet Background Images\n\n\n\n\nIt's also possible to add a background image to your GUI.\n\nIf you have lots of grouped widgets, this can look quite \nUGLY\n, as all of the widgets are drawn on top.  \n\n\n\n\n\n\n.setBgImage(image)\n\n    Set the image for the background.\n\n\n\n\n\n\n.removeBgImage(image)\n\n    Remove the image form the background.\n\n\n\n\n\n\nImage Caching\n\n\n\n\nappJar employs an image caching mechanism, to speed up image processing.\n\nEvery time an image is loaded, it's added to the cache.\n\nThe next time an image of the same filename is referenced, it will be loaded from the cache.\n\nThis speeds up processes such as mouse-overs, or setting images back-and-forth.  \n\n\nAnimated images also have their own internal cache, storing each version of the image.  \n\n\nappJar attempts to preload mouse over images and animated images, to improve smoothness.  \n\n\nIf there's ever a need to clear the image cache (maybe reduce memory footprint), call: \n.clearImageCache()", 
            "title": "Images"
        }, 
        {
            "location": "/pythonImages/#images", 
            "text": "Default image support in appJar assumes no extra libraries, so it only has native support for  .GIF  and  .PPM  images. \nHowever, extra code is included to allow the use of  .PNG  and  .JPG  files. appJar will convert these to  .GIF  files, before showing them. \nConverting image files is  SLOW , so it's best to stick to  .GIF  files! \nAlso, converting PNGs is temperamental in Python 2.7 - another reason to avoid.    Getting the path for images right can be  TRICKY \nIt's therefore best to put images in the same folder as your Python code. \nOr, create an image folder and set it using the  .setImageLocation(location)  function.", 
            "title": "Images"
        }, 
        {
            "location": "/pythonImages/#built-in-icons", 
            "text": "appJar has a host of built-in icons you can use. \nThey are all located in a folder called:  gui.icon_path \nIf you want to use one, you could just use  .addIcon()  or  .addIconButton() \nOtherwise, concatenate  gui.icon_path  with the icon's name and  .png", 
            "title": "Built-in icons"
        }, 
        {
            "location": "/pythonImages/#add-images", 
            "text": ".addImage(title, file, compound=None) \n    Adding an image is exactly the same as adding any other widget. \n    Simply give the image a title, and pass the filename. \n    appJar will confirm the file is valid, and will also check the file contains the type specified. \n    If an animated  .GIF  is found, then it will be animated within the GUI.  compound  can be set to one of  top ,  bottom ,  left ,  right ,  center  - this will show the image title in that position.     app.startLabelFrame( Simple , 0, 0)\napp.addImage( simple ,  balloons.gif )\napp.stopLabelFrame()   .addImageData(title, imgData, fmt=\"gif\", compound=None) \n    As above, but receives raw image data. \n    Currently only supports base64 encoded GIF images. \n    Alternatively, you can pass in a ready made PhotoImage, simply set  fmt  to be 'PhotoImage'.  compound  can be set to one of  top ,  bottom ,  left ,  right ,  center  - this will show the image title in that position.     from appJar import gui \nfrom PIL import Image, ImageTk\n\napp = gui()\nphoto = ImageTk.PhotoImage(Image.open( images.jpg ))\napp.addImageData( pic , photo, fmt= PhotoImage )\napp.go()    .addIcon(title, iconName, compound=None) \n    This will create an image as above, but use one of appJar's inbuilt icons. \n    Simply pass the name of one of the icons.  compound  can be set to one of  top ,  bottom ,  left ,  right ,  center  - this will show the image title in that position.      .setImageLocation(location) \n    Set a folder for image files. \n    This will be put before the names of any image files used.", 
            "title": "Add Images"
        }, 
        {
            "location": "/pythonImages/#change-images", 
            "text": ".setImage(title, image)     .setImageData(title, imgData, fmt=\"gif\") \n    This will replace the existing image with the new one. \n    If the image has the same path, it will not be changed. \n    ImageData is always reloaded.      .reloadImage(title, image)     .reloadImageData(title, imgData, fmt=\"gif\") \n    This will replace the existing image with the new one. \n    It will force an image reload, even if the file name hasn't changed. \n    Useful if an outside agency modifies the image file.      def changePic(btn):\n    if btn ==  Reload :\n        app.reloadImage( reload ,  balloons.gif )\n\napp.startLabelFrame( Reload , 1, 1)\napp.setSticky( ew )\napp.addImage( reload ,  balloons.gif )\napp.addButton( Reload , changePic)\napp.stopLabelFrame()   .setImageSubmitFunction(title, function) \n    This will set a function to call when the image is clicked.     clicked = False\ndef changePic(btn):\n    if btn ==  clickme :\n        global clicked\n        if clicked: app.setImage( clickme ,  balloons.gif )\n        else: app.setImage( clickme ,  balloons2.png )\n        clicked = not clicked\n\napp.startLabelFrame( Click Me , 0, 2)\napp.addImage( clickme ,  balloons.gif )\napp.setImageSubmitFunction( clickme , changePic)\napp.stopLabelFrame()   .setImageMouseOver(title, image) \n    Set an image to show, instead of the stored image, while the mouse is over this widget.     app.startLabelFrame( Mouse Over , 0, 1)\napp.addImage( mo_1 ,  balloons.gif )\napp.setImageMouseOver( mo_1 ,  balloons2.png )\napp.stopLabelFrame()    .setImageSize(title, width, height) \n    This will set the size of the container for the image, cropping anything that doesn't fit.      .zoomImage(title, mod) \n    This will attempt to change the size of the image. \n    It's very rudimentary, and usually doesn't look good - but is fun to play around with (try adding a slider under an image...) \n    Negative values will shrink the image, positive will enlarge the image.      def changePic(btn):\n    if btn ==  Zoom :\n        app.zoomImage( Zoom , int(app.getSpinBox( Zoom )))   .shrinkImage(title, mod)     .growImage(title, mod) \n    These are wrappers for the above function, simply causing the image to shrink or grow accordingly.", 
            "title": "Change Images"
        }, 
        {
            "location": "/pythonImages/#image-maps", 
            "text": "It is possible to set up a simple ImageMap - a clickable image, with names linked to different areas. \nWhen one of those areas is clicked, a function will be called, passing the name of the area as a parameter.     .setImageMap(title, func, coords) \n    This will associate an image map with the named image.  coords  must contain a dictionary of areas on the map. \n    When a position on the image is clicked, in one of the areas, the named function will be called, passing in the area's name. \n    When an unknown position on the image is clicked,  UNKNOWN  will be passed to the function, along with the coordinates.     from appJar import gui\n\n# each list of numbers contains the top left x/y and bottom right x/y\ncoords = {\n     America :[32, 17, 242, 167],\n     South America :[126, 170, 226, 292],\n}\n\ndef click(area):\n    app.setLabel( l1 , area)\n\napp=gui()\napp.addImage( i1 ,  map.gif )\napp.setImageMap( i1 , click, coords)\napp.addLabel( l1 ,  click the map )\napp.go()", 
            "title": "Image Maps"
        }, 
        {
            "location": "/pythonImages/#change-image-animation", 
            "text": "If an image is animated, it's possible to control it.    .setAnimationSpeed(title, speed) \n    This will change the speed an image is animated at.    .stopAnimation(title)     .startAnimation(title) \n    These will start and stop the animation of an image.    def changePic(btn):\n    if btn ==  Stop :\n        global animated\n        if animated:\n            app.stopAnimation( animated )\n            app.setButton( Stop ,  Start )\n        else:\n            app.startAnimation( animated )\n            app.setButton( Stop ,  Stop )\n        animated = not animated\n\napp.startLabelFrame( Animated , 1, 2)\napp.setSticky( ew )\napp.addImage( animated ,  animated_balloons.gif )\napp.addButton( Stop , changePic)\napp.stopLabelFrame()", 
            "title": "Change Image Animation"
        }, 
        {
            "location": "/pythonImages/#set-background-images", 
            "text": "It's also possible to add a background image to your GUI. \nIf you have lots of grouped widgets, this can look quite  UGLY , as all of the widgets are drawn on top.      .setBgImage(image) \n    Set the image for the background.    .removeBgImage(image) \n    Remove the image form the background.", 
            "title": "Set Background Images"
        }, 
        {
            "location": "/pythonImages/#image-caching", 
            "text": "appJar employs an image caching mechanism, to speed up image processing. \nEvery time an image is loaded, it's added to the cache. \nThe next time an image of the same filename is referenced, it will be loaded from the cache. \nThis speeds up processes such as mouse-overs, or setting images back-and-forth.    Animated images also have their own internal cache, storing each version of the image.    appJar attempts to preload mouse over images and animated images, to improve smoothness.    If there's ever a need to clear the image cache (maybe reduce memory footprint), call:  .clearImageCache()", 
            "title": "Image Caching"
        }, 
        {
            "location": "/pythonWidgetGrouping/", 
            "text": "Grouping Widgets\n\n\n\n\nThe standard way of using \nappJar\n, is simply to place all widgets into a single window.\n\nEverything is grouped into that single window, and any changes affect everything in that window.  \n\n\nIt's sometimes desirable to group widgets together within a window.\n\nOr to have multiple \npages\n of widgets.\n\nA number of options are provided to make this easier.  \n\n\nFormat\n\n\nAll of these methods work in the same way.\n\nYou call the \nstart\n function when you want to start a container, then the \nstop\n function when you're done.\n\nWhen you call \nstart\n you can pass in positional arguments like any other widget (row, column, rowspan, colspan).\n\nAny \nGUI Options\n you set, within the container, will only affect that container.  \n\n\nReopening Containers\n\n\nIf you want to dynamically add widgets to a container, once the gui has been started, you can open a specific container, perform the desired actions, then stop it again.\n\n\ndef addRows(btn):\n    count = app.getEntry(\nnumRows\n)\n    app.openTab(\ntabbedPane\n, \nDetails Tab\n) # open the required tab\n    for rowLoop in range(count):\n        # add a new label, with a unique ID\n        # make sure to put it in the right place\n        app.addLabel(\ndyn\n+str(rowLoop), \nDynamic Label\n, rowLoop+5)\n    app.stopTab()\n\n\n\n\nFrame\n\n\nA way of grouping together widgets.\n\nPosition the \nFrame\n within the grid, then position widgets inside the \nFrame\n  \n\n\n\n\nfrom appJar import gui \n\napp=gui(\nFRAME DEMO\n, \n250x150\n)\napp.setBg(\nyellow\n)\n\napp.startFrame(\nLEFT\n, row=0, column=0)\napp.setBg(\nblue\n)\napp.setSticky(\nNEW\n)\napp.setStretch(\nCOLUMN\n)\n\napp.addLabel(\nLEFT LABEL\n, \nLabel on the left 1\n)\napp.setLabelBg(\nLEFT LABEL\n, \nred\n)\napp.addLabel(\nLEFT LABEL2\n, \nLabel on the left 2\n)\napp.setLabelBg(\nLEFT LABEL2\n, \norange\n)\napp.addLabel(\nLEFT LABEL3\n, \nLabel on the left 3\n)\napp.setLabelBg(\nLEFT LABEL3\n, \nyellow\n)\napp.stopFrame()\n\napp.startFrame(\nRIGHT\n, row=0, column=1)\napp.setBg(\ngreen\n)\napp.setFg(\nwhite\n)\nfor x in range(5):\n    app.addRadioButton(\nRADIO\n, \nChoice \n + str(x))\napp.stopFrame()\n\napp.go()\n\n\n\n\n\nOr in v1.0:  \n\n\nfrom appJar import gui \n\nwith gui(\nFRAME DEMO\n, \n250x150\n, bg='yellow') as app:\n\n    with app.frame(\nLEFT\n, row=0, column=0, bg='blue', sticky='NEW', stretch='COLUMN'):\n        app.label(\nLabel on the left 1\n, bg='red')\n        app.label(\nLabel on the left 2\n, bg='orange')\n        app.label(\nLabel on the left 3\n, bg='yellow')\n\n    with app.frame(\nRIGHT\n, row=0, column=1, bg='green', fg='white'):\n        for x in range(5):\n            app.radio(\nRADIO\n, \nChoice \n + str(x))\n\n\n\n\nStart/Stop Frames\n\n\n\n\n\n\n.startFrame(name)\n \n \n.stopFrame()\n\n    Used to start and stop a \nFrame\n.  \n\n\n\n\n\n\n.openFrame(title)\n\n    Used to reopen the named \nFrame\n.  \n\n\n\n\n\n\nLabel Frame\n\n\n\n\nA way of grouping widgets into a box, with a label at the top of the box.\n\nPosition the \nLabelFrame\n within the grid, then position widgets inside the \nLabelFrame\n  \n\n\nNB.\n \nLabelFrames\n have a different \nstickiness\n to the \nappJar\n GUI - they only stick widgets to the \nw\n (left) side.\n\nIf you want your widgets to stretch across the \nLabelFrame\n, like the rest of \nappJar\n, you will need to call \napp.setSticky(\"ew\")\n after starting the \nLabelFrame\n.  \n\n\n\n\nfrom appJar import gui\n\napp=gui()\n\napp.startLabelFrame(\nLogin Details\n)\n# these only affect the labelFrame\napp.setSticky(\new\n)\napp.setFont(20)\n\napp.addLabel(\nl1\n, \nName\n, 0, 0)\napp.addEntry(\nName\n, 0, 1)\napp.addLabel(\nl2\n, \nPassword\n, 1, 0)\napp.addEntry(\nPassword\n, 1, 1)\napp.addButtons([\nSubmit\n, \nCancel\n], None, 2, 0, 2)\napp.stopLabelFrame()\n\napp.go()\n\n\n\n\nStart/Stop Label Frames\n\n\n\n\n\n\n.startLabelFrame(name, hideTitle=False)\n \n \n.stopLabelFrame()\n\n    Used to start and stop a \nLabelFrame\n\n    The specified title will be used as the label for the frame.\n\n    Set hideTitle to be True if you don;t want to show a title.  \n\n\n\n\n\n\n.openLabelFrame(title)\n\n    Used to reopen the named \nLabelFrame\n, for later modification.  \n\n\n\n\n\n\nSet Label Frames\n\n\n\n\n\n\n.setLabelFrameTitle(name, newTitle)\n\n    Used to change the label displayed in the \nLabelFrame\n.  \n\n\n\n\n\n\n.setLabelFrameAnchor(name, position)\n\n    Used to change the position of the label on the \nLabelFrame\n.\n\n    Use compass coordinates, eg. \n\"ne\"\n or \n\"sw\"\n.  \n\n\n\n\n\n\n.setSticky(coords)\n\n    By default, widgets in the frame will align on the left.\n\n    If you want to change this, specify a different \nsticky\n value.\n\n    For example, \n.setSticky(\"ew\")\n will cause the widgets to stretch to fit the width, aligning in the centre.  \n\n\n\n\n\n\nScroll Pane\n\n\n\n\nA scrollable pane, inside a frame, to contain widgets.\n\nAllows you to have more widgets than will fit on the screen, or have a smaller window than required.\n\n\n\n\nfrom appJar import gui \n\napp=gui(\nSCROLLPABE DEMO\n, \n150x150\n)\n\napp.startScrollPane(\nPANE\n)\nfor x in range(10):\n    for y in range(10):\n        name = str(x) + \n-\n + str(y)\n        app.addLabel(name, name, row=x, column=y)\n        app.setLabelBg(name, app.RANDOM_COLOUR())\napp.stopScrollPane()\n\napp.go()\n\n\n\n\nScrolling\n\n\nThe \nScrollPane\n has been configured to allow scrolling through lots of different methods:  \n\n\n\n\nOn Mac \n Windows horizontal \n vertical scroll events (generated by amouse/trackpad) will work as normal.  \n\n\nOn Linux horizontal scroll events will work, \nSHIFT\n horizontal scroll events will scroll vertically.  \n\n\nThe following key presses will also work:  \n\n\nUp\n \n \nDown\n: Move up or down the equivalent of a line  \n\n\nLeft\n \n \nRight\n: Move left or right the equivalent of a line  \n\n\nPageUp\n \n \nPageDown\n: Move up or down the equivalent of a page  \n\n\nCtrl\nPageUp\n \n \nCtrl\nPageDown\n: Move left or right the equivalent of a page  \n\n\nCtrl\nUp\n \n \nCtrl\nDown\n: Move up or down the equivalent of a page  \n\n\nCtrl\nLeft\n \n \nCtrl\nRight\n: Move left or right the equivalent of a page   \n\n\nHome\n \n \nEnd\n: Move to the top or bottom  \n\n\nCtrl\nHome\n \n \nCtrl\nEnd\n: Move to the far-left or the far-right  \n\n\n\n\n\n\n\n\nStart/Stop Scroll Panes\n\n\n\n\n\n\n.startScrollPane(title)\n \n \n.stopScrollPane()\n\n    Used to start and stop the \nScrollPane\n.\n\n    Pass a \ndisabled\n parameter of \nhorizontal\n or \nvertical\n to disable one of the scrollbars.  \n\n\n\n\n\n\n.openScrollPane(title)\n\n    Used to reopen the named \nScrollPane\n, for later modification.  \n\n\n\n\n\n\nToggle Frame\n\n\n\n\nA collapsible container for a group of related widgets.\n\nBy default, the contents of the frame are hidden.\n\nThey can be revealed/hidden again by clicking an associated button.\n\n\n\n\n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(20)\n\napp.startToggleFrame(\nOptions\n)\napp.addCheckBox(\nShow this\n)\napp.addCheckBox(\nShow that\n)\napp.addCheckBox(\nShow the other\n)\napp.setCheckBox(\nShow that\n)\napp.stopToggleFrame()\n\napp.go()\n\n\n\n\nStart/Stop Toggle Frames\n\n\n\n\n\n\n.startToggleFrame(title)\n \n \n.stopToggleFrame(title)\n\n    Used to start and stop a \nToggleFrame\n.\n\n    The \ntitle\n will be used as the title for the \nToggleFrame\n.  \n\n\n\n\n\n\n.openToggleFrame(title)\n\n    Used to reopen the named \nToggleFrame\n.  \n\n\n\n\n\n\nSet Toggle Frames\n\n\n\n\n\n\n.setToggleFrameText(title, newText)\n\n    Will update the text displayed in the \nToggleFrame\n.  \n\n\n\n\n\n\n.toggleToggleFrame(title)\n\n    Will toggle the state of the specified \nToggleFrame\n.  \n\n\n\n\n\n\n.disableToggleFrame(title, disabled=True)\n\n    Will disable the specified \nToggleFrame\n.\n\n    If \ndisabled\n is set to False, the \nToggleFrame\n will be re-enabled.  \n\n\n\n\n\n\nGet Toggle Frames\n\n\n\n\n.getToggleFrameState(title)\n\n    Will return True if the \nToggleFrame\n is open, else will return False.  \n\n\n\n\nTabbed Frame\n\n\n\n\nA way to create a (basic) tabbed-style interface.\n\nPosition the \nTabbedFrame\n within the grid, start a \nTab\n, then position widgets inside the \nTab\n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\n\napp.startTabbedFrame(\nTabbedFrame\n)\napp.startTab(\nTab1\n)\napp.addLabel(\nl1\n, \nTab 1 Label\n)\napp.stopTab()\n\napp.startTab(\nTab2\n)\napp.addLabel(\nl2\n, \nTab 2 Label\n)\napp.stopTab()\n\napp.startTab(\nTab3\n)\napp.addLabel(\nl3\n, \nTab 3 Label\n)\napp.stopTab()\napp.stopTabbedFrame()\n\napp.go()\n\n\n\n\nStart/Stop Tabbed Frames\n\n\n\n\n\n\n.startTabbedFrame(name)\n \n \n.stopTabbedFrame()\n\n    Used to start \n stop a \nTabbedFrame\n, with the specified name.  \n\n\n\n\n\n\n.startTab(name)\n \n \n.stopTab()\n\n    Used to start and stop each of the tabs in the \nTabbedFrame\n.\n\n    The title for the tab will be the specified \nname\n.  \n\n\n\n\n\n\n.openTabbedFrame(title)\n \n \n.openTab(frameTitle, tabTitle)\n\n    Used to reopen the named \nTabbedFrame\n or named \nTab\n.  \n\n\n\n\n\n\nSet TabbedFrame\n\n\n\n\n\n\n.setTabText(title, tab, newText=None)\n\n    Change the text of the named tab in the specified \nTabbedFrame\n.\n\n    If no \nnewText\n is provided, the tab will revert back to its original text.  \n\n\n\n\n\n\n.setTabbedFrameTabExpand(title, expand=True)\n\n    By default, the tabs take up the minimum amount of space necessary.\n\n    Set this to True, to have the tabs fill the entire row.\n\n\n  \n\n\n\n\n\n\n.setTabbedFrameSelectedTab(title, tab)\n\n    Select the specified tab in the TabbedFrame.  \n\n\n\n\n\n\n.setTabbedFrameDisabledTab(title, tab, disabled=True)\n\n    Disable the specified tab in the TabbedFrame.\n\n    Set disabled to False to re-enable it.\n\n    This will also change the displayed tab, if the displayed tab is being disabled.  \n\n\n\n\n\n\n.setTabbedFrameDisableAllTabs(title, disabled=True)\n\n    Will disable all tabs for the named TabFrame.\n\n    Or, enable them if disabled is set to False.  \n\n\n\n\n\n\nChanging Colours\n\n\nTabbedFrames have a set of colours that can be changed:  \n\n\n\n\nActiveFg\n - Sets the colour of the text in the active tab  \n\n\nActiveBg\n - Sets the background colour of the active tab  \n\n\nInactiveFg\n - Sets the colour of the text in all inactive tabs  \n\n\nInactiveBg\n - Sets the background colour of all inactive tabs  \n\n\nDisabledFg\n - Sets the colour of the text in all disabled tabs  \n\n\nDisabledBg\n - Sets the background colour of all disabled tabs  \n\n\nBg\n - Sets the background colour behind the widget - only visible at the end of the tabs  \n\n\n\n\nThese are all changed via the standard property changing functions, eg:  \n\n\n\n\n.setTabbedFrameBg(\"t1\", \"red\")\n\n\n.setTabbedFrameActiveBg(\"t1\", \"yellow\")\n\n\n\n\nIt is also possible to change the colour of individual panes.\n\nCall \n.setBg(\"colour\")\n while adding widgets to the specific pane.\n\nOr \n.setTabBg(title, tab, 'colour')\n at other times.  \n\n\nGet TabbedFrame\n\n\n\n\n.getTabbedFrameSelectedTab(title)\n\n    Gets the name of the currently selected tab, for the named TabFrame.  \n\n\n\n\nPaned Frame\n\n\n\n\nA way to present re-sizable panes, separated by drag-bars.\n\nOnce the first pane is placed, all additional panes should be placed inside it.\n\nBy default, panes will be placed side-by-side (horizontally).\n\nThis can be changed by setting the pane to vertical, then they'll be placed underneath each other.  \n\n\nStart/Stop Paned Frames\n\n\n\n\n\n\n.startPanedFrame(name)\n, \n.startPanedFrameVertical(name)\n \n \n.stopPanedFrame()\n\n    Used to start \n stop \nPanedFrames\n, with the specified name.\n\n    By default, any panes added to this pane will be added side-by-side (horizontally).\n\n    Starting a vertical pane will cause additional panes to be stacked on top of each other.  \n\n\n\n\n\n\n.openPanedFrame(title)\n\n    Used to reopen the named \nPanedFrame\n.  \n\n\n\n\n\n\nHorizontal Pane Layout\n\n\n  \n\n\n\n\nStart an initial pane  \n\n\nStart all additional panes inside the initial pane  \n\n\n\n\nfrom appJar import gui\napp = gui()\n\n# start initial pane\napp.startPanedFrame(\np1\n)\napp.addLabel(\nl1\n, \nInside Pane 1\n)\n\n# start additional panes inside initial pane\napp.startPanedFrame(\np2\n)\napp.addLabel(\nl2\n, \nInside Pane 2\n)\napp.stopPanedFrame()\n\napp.startPanedFrame(\np3\n)\napp.addLabel(\nl3\n, \nInside Pane 3\n)\napp.stopPanedFrame()\n\n# stop initial pane\napp.stopPanedFrame()\n\napp.go()\n\n\n\n\nVertical Pane Layout\n\n\n  \n\n\n\n\nStart an initial, vertical pane  \n\n\nStart all additional panes inside the initial pane  \n\n\n\n\nfrom appJar import gui\napp = gui()\n\n# start initial, vertical pane\napp.startPanedFrameVertical(\np1\n)\napp.addLabel(\nl1\n, \nInside Pane 1\n)\n\n# start additional panes inside initial pane\napp.startPanedFrame(\np2\n)\napp.addLabel(\nl2\n, \nInside Pane 2\n)\napp.stopPanedFrame()\n\napp.startPanedFrame(\np3\n)\napp.addLabel(\nl3\n, \nInside Pane 3\n)\napp.stopPanedFrame()\n\n# stop initial pane\napp.stopPanedFrame()\n\napp.go()\n\n\n\n\nE-Pane Layout\n\n\n  \n\n\n\n\nStart an initial pane  \n\n\nStart a second, vertical pane inside the initial pane  \n\n\nStart all additional panes inside the second pane  \n\n\n\n\nfrom appJar import gui\napp = gui()\n\n# start initial pane\napp.startPanedFrame(\np1\n)\napp.addLabel(\nl1\n, \nInside Pane 1\n)\n\n# start second, vertical pane inside initial pane\napp.startPanedFrameVertical(\np2\n)\napp.addLabel(\nl2\n, \nInside Pane 2\n)\n\n# start additional panes inside second pane\napp.startPanedFrame(\np3\n)\napp.addLabel(\nl3\n, \nInside Pane 3\n)\napp.stopPanedFrame()\n\n# stop second \n initial panes\napp.stopPanedFrame()\napp.stopPanedFrame()\n\napp.go()\n\n\n\n\nT-Pane Layout\n\n\n  \n\n\n\n\nStart an initial, vertical pane  \n\n\nStart a second pane, inside the initial pane  \n\n\nStart additional panes inside the second pane  \n\n\n\n\nfrom appJar import gui\napp = gui()\n\n# start intial, vertical pane\napp.startPanedFrameVertical(\np1\n)\napp.addLabel(\nl1\n, \nInside Pane 1\n)\n\n# start second pane\napp.startPanedFrame(\np2\n)\napp.addLabel(\nl2\n, \nInside Pane 2\n)\n\n# start additional panes inside second pane \napp.startPanedFrame(\np3\n)\napp.addLabel(\nl3\n, \nInside Pane 3\n)\napp.stopPanedFrame()\n\n# stop second \n initial panes\napp.stopPanedFrame()\napp.stopPanedFrame()\n\napp.go()\n\n\n\n\nPaged Window\n\n\n\n\nA container that mimics a classic phone based interface.\n\nIt provides \nPREVIOUS\n/\nNEXT\n buttons to navigate through a series of pages.\n\nIt has an optional widget title, and shows the current page, in a page counter.\n\nKeyboard bindings are provided to navigate with arrow key presses. CTRL-arrow will navigate to the beginning/end.\n\nEvents can be bound to page changes, the page can be changed via a function call, and the current page number can be queried.\n\n\n\n\nfrom appJar import gui\n\napp=gui()\n\napp.setBg(\nDarkKhaki\n)\napp.setGeometry(280,400)\n\napp.startPagedWindow(\nMain Title\n)\napp.startPage()\napp.addLabel(\nl13\n, \nLabel 1\n)\napp.stopPage()\n\napp.startPage()\napp.addLabel(\nl21\n, \nLabel 2\n)\napp.stopPage()\n\napp.startPage()\napp.addLabel(\nl3\n, \nLabel 3\n)\napp.stopPage()\n\napp.startPage()\napp.addLabel(\nl4\n, \nLabel 4\n)\napp.stopPage()\napp.stopPagedWindow()\n\napp.go()\n\n\n\n\nStart/Stop Paged Windows\n\n\n\n\n\n\n.startPagedWindow(title)\n \n \n.stopPagedWindow()\n\n    Used to start and stop a \nPagedWindow\n.\n\n    The \ntitle\n will be used in the title section of the widget.  \n\n\n\n\n\n\n.startPage()\n \n \n.stopPage()\n\n    Used to start and stop each new page.\n\n    Navigation, page count, etc are all dealt with automatically.  \n\n\n\n\n\n\n.openPagedWindow(title)\n \n \n.openPage(windowTitle, pageNumber)\n \n\n    Used to reopen the named \nPagedWindow\n or \nPage\n.\n\n\nNB.\n \npageNumber\n must be an integer, starting at 1 for the first page.  \n\n\n\n\n\n\nSet Paged Windows\n\n\n\n\n\n\n.setPagedWindowTitle(title, title)\n \n \n.setPagedWindowButtons(title, [buttons])\n\n    Used to change the text in the title and buttons.\n\n    When changing the buttons, two values must be passed in: previous/next.  \n\n\n\n\n\n\n.setPagedWindowButtonsTop(title, top=True)\n\n    Used to position the navigation buttons.  By default, they are at the bottom.\n\n    Call this function to move them to the top.  \n\n\n\n\n\n\n.setPagedWindowPage(title, pageNum)\n\n    Used to display the selected page.  \n\n\n\n\n\n\n.setPagedWindowFunction(title, function)\n\n    Declare a function to call, each time the page is changed.  \n\n\n\n\n\n\n.showPagedWindowPageNumber(title, show=True)\n \n \n.showPagedWindowTitle(title, show=True)\n\n    Use these to declare if you want the page title, page numbers to be shown.  \n\n\n\n\n\n\nGet Paged Windows\n\n\n\n\n.getPagedWindowPageNumber(title)\n\n    Used to get the page number currently being shown.  \n\n\n\n\nSub Window\n\n\n\n\nA way to add additional windows, which can be hidden and shown.\n\n\n\n\nThis has been moved to its own page: \nMultiple Windows\n.", 
            "title": "Containers"
        }, 
        {
            "location": "/pythonWidgetGrouping/#grouping-widgets", 
            "text": "The standard way of using  appJar , is simply to place all widgets into a single window. \nEverything is grouped into that single window, and any changes affect everything in that window.    It's sometimes desirable to group widgets together within a window. \nOr to have multiple  pages  of widgets. \nA number of options are provided to make this easier.", 
            "title": "Grouping Widgets"
        }, 
        {
            "location": "/pythonWidgetGrouping/#format", 
            "text": "All of these methods work in the same way. \nYou call the  start  function when you want to start a container, then the  stop  function when you're done. \nWhen you call  start  you can pass in positional arguments like any other widget (row, column, rowspan, colspan). \nAny  GUI Options  you set, within the container, will only affect that container.", 
            "title": "Format"
        }, 
        {
            "location": "/pythonWidgetGrouping/#reopening-containers", 
            "text": "If you want to dynamically add widgets to a container, once the gui has been started, you can open a specific container, perform the desired actions, then stop it again.  def addRows(btn):\n    count = app.getEntry( numRows )\n    app.openTab( tabbedPane ,  Details Tab ) # open the required tab\n    for rowLoop in range(count):\n        # add a new label, with a unique ID\n        # make sure to put it in the right place\n        app.addLabel( dyn +str(rowLoop),  Dynamic Label , rowLoop+5)\n    app.stopTab()", 
            "title": "Reopening Containers"
        }, 
        {
            "location": "/pythonWidgetGrouping/#frame", 
            "text": "A way of grouping together widgets. \nPosition the  Frame  within the grid, then position widgets inside the  Frame      from appJar import gui \n\napp=gui( FRAME DEMO ,  250x150 )\napp.setBg( yellow )\n\napp.startFrame( LEFT , row=0, column=0)\napp.setBg( blue )\napp.setSticky( NEW )\napp.setStretch( COLUMN )\n\napp.addLabel( LEFT LABEL ,  Label on the left 1 )\napp.setLabelBg( LEFT LABEL ,  red )\napp.addLabel( LEFT LABEL2 ,  Label on the left 2 )\napp.setLabelBg( LEFT LABEL2 ,  orange )\napp.addLabel( LEFT LABEL3 ,  Label on the left 3 )\napp.setLabelBg( LEFT LABEL3 ,  yellow )\napp.stopFrame()\n\napp.startFrame( RIGHT , row=0, column=1)\napp.setBg( green )\napp.setFg( white )\nfor x in range(5):\n    app.addRadioButton( RADIO ,  Choice   + str(x))\napp.stopFrame()\n\napp.go()  Or in v1.0:    from appJar import gui \n\nwith gui( FRAME DEMO ,  250x150 , bg='yellow') as app:\n\n    with app.frame( LEFT , row=0, column=0, bg='blue', sticky='NEW', stretch='COLUMN'):\n        app.label( Label on the left 1 , bg='red')\n        app.label( Label on the left 2 , bg='orange')\n        app.label( Label on the left 3 , bg='yellow')\n\n    with app.frame( RIGHT , row=0, column=1, bg='green', fg='white'):\n        for x in range(5):\n            app.radio( RADIO ,  Choice   + str(x))", 
            "title": "Frame"
        }, 
        {
            "location": "/pythonWidgetGrouping/#startstop-frames", 
            "text": ".startFrame(name)     .stopFrame() \n    Used to start and stop a  Frame .      .openFrame(title) \n    Used to reopen the named  Frame .", 
            "title": "Start/Stop Frames"
        }, 
        {
            "location": "/pythonWidgetGrouping/#label-frame", 
            "text": "A way of grouping widgets into a box, with a label at the top of the box. \nPosition the  LabelFrame  within the grid, then position widgets inside the  LabelFrame     NB.   LabelFrames  have a different  stickiness  to the  appJar  GUI - they only stick widgets to the  w  (left) side. \nIf you want your widgets to stretch across the  LabelFrame , like the rest of  appJar , you will need to call  app.setSticky(\"ew\")  after starting the  LabelFrame .     from appJar import gui\n\napp=gui()\n\napp.startLabelFrame( Login Details )\n# these only affect the labelFrame\napp.setSticky( ew )\napp.setFont(20)\n\napp.addLabel( l1 ,  Name , 0, 0)\napp.addEntry( Name , 0, 1)\napp.addLabel( l2 ,  Password , 1, 0)\napp.addEntry( Password , 1, 1)\napp.addButtons([ Submit ,  Cancel ], None, 2, 0, 2)\napp.stopLabelFrame()\n\napp.go()", 
            "title": "Label Frame"
        }, 
        {
            "location": "/pythonWidgetGrouping/#startstop-label-frames", 
            "text": ".startLabelFrame(name, hideTitle=False)     .stopLabelFrame() \n    Used to start and stop a  LabelFrame \n    The specified title will be used as the label for the frame. \n    Set hideTitle to be True if you don;t want to show a title.      .openLabelFrame(title) \n    Used to reopen the named  LabelFrame , for later modification.", 
            "title": "Start/Stop Label Frames"
        }, 
        {
            "location": "/pythonWidgetGrouping/#set-label-frames", 
            "text": ".setLabelFrameTitle(name, newTitle) \n    Used to change the label displayed in the  LabelFrame .      .setLabelFrameAnchor(name, position) \n    Used to change the position of the label on the  LabelFrame . \n    Use compass coordinates, eg.  \"ne\"  or  \"sw\" .      .setSticky(coords) \n    By default, widgets in the frame will align on the left. \n    If you want to change this, specify a different  sticky  value. \n    For example,  .setSticky(\"ew\")  will cause the widgets to stretch to fit the width, aligning in the centre.", 
            "title": "Set Label Frames"
        }, 
        {
            "location": "/pythonWidgetGrouping/#scroll-pane", 
            "text": "A scrollable pane, inside a frame, to contain widgets. \nAllows you to have more widgets than will fit on the screen, or have a smaller window than required.   from appJar import gui \n\napp=gui( SCROLLPABE DEMO ,  150x150 )\n\napp.startScrollPane( PANE )\nfor x in range(10):\n    for y in range(10):\n        name = str(x) +  -  + str(y)\n        app.addLabel(name, name, row=x, column=y)\n        app.setLabelBg(name, app.RANDOM_COLOUR())\napp.stopScrollPane()\n\napp.go()", 
            "title": "Scroll Pane"
        }, 
        {
            "location": "/pythonWidgetGrouping/#scrolling", 
            "text": "The  ScrollPane  has been configured to allow scrolling through lots of different methods:     On Mac   Windows horizontal   vertical scroll events (generated by amouse/trackpad) will work as normal.    On Linux horizontal scroll events will work,  SHIFT  horizontal scroll events will scroll vertically.    The following key presses will also work:    Up     Down : Move up or down the equivalent of a line    Left     Right : Move left or right the equivalent of a line    PageUp     PageDown : Move up or down the equivalent of a page    Ctrl PageUp     Ctrl PageDown : Move left or right the equivalent of a page    Ctrl Up     Ctrl Down : Move up or down the equivalent of a page    Ctrl Left     Ctrl Right : Move left or right the equivalent of a page     Home     End : Move to the top or bottom    Ctrl Home     Ctrl End : Move to the far-left or the far-right", 
            "title": "Scrolling"
        }, 
        {
            "location": "/pythonWidgetGrouping/#startstop-scroll-panes", 
            "text": ".startScrollPane(title)     .stopScrollPane() \n    Used to start and stop the  ScrollPane . \n    Pass a  disabled  parameter of  horizontal  or  vertical  to disable one of the scrollbars.      .openScrollPane(title) \n    Used to reopen the named  ScrollPane , for later modification.", 
            "title": "Start/Stop Scroll Panes"
        }, 
        {
            "location": "/pythonWidgetGrouping/#toggle-frame", 
            "text": "A collapsible container for a group of related widgets. \nBy default, the contents of the frame are hidden. \nThey can be revealed/hidden again by clicking an associated button.    from appJar import gui\n\napp=gui()\napp.setFont(20)\n\napp.startToggleFrame( Options )\napp.addCheckBox( Show this )\napp.addCheckBox( Show that )\napp.addCheckBox( Show the other )\napp.setCheckBox( Show that )\napp.stopToggleFrame()\n\napp.go()", 
            "title": "Toggle Frame"
        }, 
        {
            "location": "/pythonWidgetGrouping/#startstop-toggle-frames", 
            "text": ".startToggleFrame(title)     .stopToggleFrame(title) \n    Used to start and stop a  ToggleFrame . \n    The  title  will be used as the title for the  ToggleFrame .      .openToggleFrame(title) \n    Used to reopen the named  ToggleFrame .", 
            "title": "Start/Stop Toggle Frames"
        }, 
        {
            "location": "/pythonWidgetGrouping/#set-toggle-frames", 
            "text": ".setToggleFrameText(title, newText) \n    Will update the text displayed in the  ToggleFrame .      .toggleToggleFrame(title) \n    Will toggle the state of the specified  ToggleFrame .      .disableToggleFrame(title, disabled=True) \n    Will disable the specified  ToggleFrame . \n    If  disabled  is set to False, the  ToggleFrame  will be re-enabled.", 
            "title": "Set Toggle Frames"
        }, 
        {
            "location": "/pythonWidgetGrouping/#get-toggle-frames", 
            "text": ".getToggleFrameState(title) \n    Will return True if the  ToggleFrame  is open, else will return False.", 
            "title": "Get Toggle Frames"
        }, 
        {
            "location": "/pythonWidgetGrouping/#tabbed-frame", 
            "text": "A way to create a (basic) tabbed-style interface. \nPosition the  TabbedFrame  within the grid, start a  Tab , then position widgets inside the  Tab      from appJar import gui\n\napp=gui()\n\napp.startTabbedFrame( TabbedFrame )\napp.startTab( Tab1 )\napp.addLabel( l1 ,  Tab 1 Label )\napp.stopTab()\n\napp.startTab( Tab2 )\napp.addLabel( l2 ,  Tab 2 Label )\napp.stopTab()\n\napp.startTab( Tab3 )\napp.addLabel( l3 ,  Tab 3 Label )\napp.stopTab()\napp.stopTabbedFrame()\n\napp.go()", 
            "title": "Tabbed Frame"
        }, 
        {
            "location": "/pythonWidgetGrouping/#startstop-tabbed-frames", 
            "text": ".startTabbedFrame(name)     .stopTabbedFrame() \n    Used to start   stop a  TabbedFrame , with the specified name.      .startTab(name)     .stopTab() \n    Used to start and stop each of the tabs in the  TabbedFrame . \n    The title for the tab will be the specified  name .      .openTabbedFrame(title)     .openTab(frameTitle, tabTitle) \n    Used to reopen the named  TabbedFrame  or named  Tab .", 
            "title": "Start/Stop Tabbed Frames"
        }, 
        {
            "location": "/pythonWidgetGrouping/#set-tabbedframe", 
            "text": ".setTabText(title, tab, newText=None) \n    Change the text of the named tab in the specified  TabbedFrame . \n    If no  newText  is provided, the tab will revert back to its original text.      .setTabbedFrameTabExpand(title, expand=True) \n    By default, the tabs take up the minimum amount of space necessary. \n    Set this to True, to have the tabs fill the entire row.        .setTabbedFrameSelectedTab(title, tab) \n    Select the specified tab in the TabbedFrame.      .setTabbedFrameDisabledTab(title, tab, disabled=True) \n    Disable the specified tab in the TabbedFrame. \n    Set disabled to False to re-enable it. \n    This will also change the displayed tab, if the displayed tab is being disabled.      .setTabbedFrameDisableAllTabs(title, disabled=True) \n    Will disable all tabs for the named TabFrame. \n    Or, enable them if disabled is set to False.", 
            "title": "Set TabbedFrame"
        }, 
        {
            "location": "/pythonWidgetGrouping/#changing-colours", 
            "text": "TabbedFrames have a set of colours that can be changed:     ActiveFg  - Sets the colour of the text in the active tab    ActiveBg  - Sets the background colour of the active tab    InactiveFg  - Sets the colour of the text in all inactive tabs    InactiveBg  - Sets the background colour of all inactive tabs    DisabledFg  - Sets the colour of the text in all disabled tabs    DisabledBg  - Sets the background colour of all disabled tabs    Bg  - Sets the background colour behind the widget - only visible at the end of the tabs     These are all changed via the standard property changing functions, eg:     .setTabbedFrameBg(\"t1\", \"red\")  .setTabbedFrameActiveBg(\"t1\", \"yellow\")   It is also possible to change the colour of individual panes. \nCall  .setBg(\"colour\")  while adding widgets to the specific pane. \nOr  .setTabBg(title, tab, 'colour')  at other times.", 
            "title": "Changing Colours"
        }, 
        {
            "location": "/pythonWidgetGrouping/#get-tabbedframe", 
            "text": ".getTabbedFrameSelectedTab(title) \n    Gets the name of the currently selected tab, for the named TabFrame.", 
            "title": "Get TabbedFrame"
        }, 
        {
            "location": "/pythonWidgetGrouping/#paned-frame", 
            "text": "A way to present re-sizable panes, separated by drag-bars. \nOnce the first pane is placed, all additional panes should be placed inside it. \nBy default, panes will be placed side-by-side (horizontally). \nThis can be changed by setting the pane to vertical, then they'll be placed underneath each other.", 
            "title": "Paned Frame"
        }, 
        {
            "location": "/pythonWidgetGrouping/#startstop-paned-frames", 
            "text": ".startPanedFrame(name) ,  .startPanedFrameVertical(name)     .stopPanedFrame() \n    Used to start   stop  PanedFrames , with the specified name. \n    By default, any panes added to this pane will be added side-by-side (horizontally). \n    Starting a vertical pane will cause additional panes to be stacked on top of each other.      .openPanedFrame(title) \n    Used to reopen the named  PanedFrame .", 
            "title": "Start/Stop Paned Frames"
        }, 
        {
            "location": "/pythonWidgetGrouping/#horizontal-pane-layout", 
            "text": "Start an initial pane    Start all additional panes inside the initial pane     from appJar import gui\napp = gui()\n\n# start initial pane\napp.startPanedFrame( p1 )\napp.addLabel( l1 ,  Inside Pane 1 )\n\n# start additional panes inside initial pane\napp.startPanedFrame( p2 )\napp.addLabel( l2 ,  Inside Pane 2 )\napp.stopPanedFrame()\n\napp.startPanedFrame( p3 )\napp.addLabel( l3 ,  Inside Pane 3 )\napp.stopPanedFrame()\n\n# stop initial pane\napp.stopPanedFrame()\n\napp.go()", 
            "title": "Horizontal Pane Layout"
        }, 
        {
            "location": "/pythonWidgetGrouping/#vertical-pane-layout", 
            "text": "Start an initial, vertical pane    Start all additional panes inside the initial pane     from appJar import gui\napp = gui()\n\n# start initial, vertical pane\napp.startPanedFrameVertical( p1 )\napp.addLabel( l1 ,  Inside Pane 1 )\n\n# start additional panes inside initial pane\napp.startPanedFrame( p2 )\napp.addLabel( l2 ,  Inside Pane 2 )\napp.stopPanedFrame()\n\napp.startPanedFrame( p3 )\napp.addLabel( l3 ,  Inside Pane 3 )\napp.stopPanedFrame()\n\n# stop initial pane\napp.stopPanedFrame()\n\napp.go()", 
            "title": "Vertical Pane Layout"
        }, 
        {
            "location": "/pythonWidgetGrouping/#e-pane-layout", 
            "text": "Start an initial pane    Start a second, vertical pane inside the initial pane    Start all additional panes inside the second pane     from appJar import gui\napp = gui()\n\n# start initial pane\napp.startPanedFrame( p1 )\napp.addLabel( l1 ,  Inside Pane 1 )\n\n# start second, vertical pane inside initial pane\napp.startPanedFrameVertical( p2 )\napp.addLabel( l2 ,  Inside Pane 2 )\n\n# start additional panes inside second pane\napp.startPanedFrame( p3 )\napp.addLabel( l3 ,  Inside Pane 3 )\napp.stopPanedFrame()\n\n# stop second   initial panes\napp.stopPanedFrame()\napp.stopPanedFrame()\n\napp.go()", 
            "title": "E-Pane Layout"
        }, 
        {
            "location": "/pythonWidgetGrouping/#t-pane-layout", 
            "text": "Start an initial, vertical pane    Start a second pane, inside the initial pane    Start additional panes inside the second pane     from appJar import gui\napp = gui()\n\n# start intial, vertical pane\napp.startPanedFrameVertical( p1 )\napp.addLabel( l1 ,  Inside Pane 1 )\n\n# start second pane\napp.startPanedFrame( p2 )\napp.addLabel( l2 ,  Inside Pane 2 )\n\n# start additional panes inside second pane \napp.startPanedFrame( p3 )\napp.addLabel( l3 ,  Inside Pane 3 )\napp.stopPanedFrame()\n\n# stop second   initial panes\napp.stopPanedFrame()\napp.stopPanedFrame()\n\napp.go()", 
            "title": "T-Pane Layout"
        }, 
        {
            "location": "/pythonWidgetGrouping/#paged-window", 
            "text": "A container that mimics a classic phone based interface. \nIt provides  PREVIOUS / NEXT  buttons to navigate through a series of pages. \nIt has an optional widget title, and shows the current page, in a page counter. \nKeyboard bindings are provided to navigate with arrow key presses. CTRL-arrow will navigate to the beginning/end. \nEvents can be bound to page changes, the page can be changed via a function call, and the current page number can be queried.   from appJar import gui\n\napp=gui()\n\napp.setBg( DarkKhaki )\napp.setGeometry(280,400)\n\napp.startPagedWindow( Main Title )\napp.startPage()\napp.addLabel( l13 ,  Label 1 )\napp.stopPage()\n\napp.startPage()\napp.addLabel( l21 ,  Label 2 )\napp.stopPage()\n\napp.startPage()\napp.addLabel( l3 ,  Label 3 )\napp.stopPage()\n\napp.startPage()\napp.addLabel( l4 ,  Label 4 )\napp.stopPage()\napp.stopPagedWindow()\n\napp.go()", 
            "title": "Paged Window"
        }, 
        {
            "location": "/pythonWidgetGrouping/#startstop-paged-windows", 
            "text": ".startPagedWindow(title)     .stopPagedWindow() \n    Used to start and stop a  PagedWindow . \n    The  title  will be used in the title section of the widget.      .startPage()     .stopPage() \n    Used to start and stop each new page. \n    Navigation, page count, etc are all dealt with automatically.      .openPagedWindow(title)     .openPage(windowTitle, pageNumber)   \n    Used to reopen the named  PagedWindow  or  Page .  NB.   pageNumber  must be an integer, starting at 1 for the first page.", 
            "title": "Start/Stop Paged Windows"
        }, 
        {
            "location": "/pythonWidgetGrouping/#set-paged-windows", 
            "text": ".setPagedWindowTitle(title, title)     .setPagedWindowButtons(title, [buttons]) \n    Used to change the text in the title and buttons. \n    When changing the buttons, two values must be passed in: previous/next.      .setPagedWindowButtonsTop(title, top=True) \n    Used to position the navigation buttons.  By default, they are at the bottom. \n    Call this function to move them to the top.      .setPagedWindowPage(title, pageNum) \n    Used to display the selected page.      .setPagedWindowFunction(title, function) \n    Declare a function to call, each time the page is changed.      .showPagedWindowPageNumber(title, show=True)     .showPagedWindowTitle(title, show=True) \n    Use these to declare if you want the page title, page numbers to be shown.", 
            "title": "Set Paged Windows"
        }, 
        {
            "location": "/pythonWidgetGrouping/#get-paged-windows", 
            "text": ".getPagedWindowPageNumber(title) \n    Used to get the page number currently being shown.", 
            "title": "Get Paged Windows"
        }, 
        {
            "location": "/pythonWidgetGrouping/#sub-window", 
            "text": "A way to add additional windows, which can be hidden and shown.   This has been moved to its own page:  Multiple Windows .", 
            "title": "Sub Window"
        }, 
        {
            "location": "/pythonDevWidgets/", 
            "text": "Beta Widgets\n\n\n\n\nThe following widgets are in \nbeta\n - they're available and being used, they're just not quite finished...  \n\n\nAccessibility\n\n\n\n\nA pop-up to configure GUI settings.  \n\n\n\n\nfrom appJar import gui\n\nwith gui(\nDemo Access\n) as app:\n    app.button('Accessibility', app.showAccess, icon='ACCESS')\n\n\n\n\nIt allows you to configure:  \n\n\n\n\nFont Family\n\n\nFont Size\n\n\nBold True/False\n\n\nNormal/Italic\n\n\nUnderline True/False\n\n\nOverstrike True/False\n\n\nForeground Colour\n\n\nBackground Colour\n\n\n\n\nTable\n\n\n\n\nUsed to create a spreadsheet like interface.\n\nThe Table has mouse interactivity, with mouse-over highlighting, and mouse-click highlighting.\n\nIt is possible to include buttons at the end of each row, and an additional row of entry boxes, with their own button.  \n\n\n  \n\n\nfrom appJar import gui\n\napp = gui()\napp.setFont(20)\napp.addTable(\ng1\n,\n    [[\nName\n, \nAge\n, \nGender\n],\n    [\nFred\n, 45, \nMale\n],\n    [\nTina\n, 37, \nFemale\n],\n    [\nClive\n, 28, \nMale\n],\n    [\nBetty\n, 51, \nFemale\n]])\napp.go()\n\n\n\n\nAdd Tables\n\n\n\n\n\n\n.addTable(title, data, action=None, addRow=None)\n\n    Receives a (jagged) 2D list of values. The first list should be the headers for the Table, the rest will contain each row of values.  \n\n\nIf \naction\n is set, a button will be created, at the end of each row, calling the specified function. It will pass the row number (starting at 0).  \n\n\n   \n\n\nIf \naddRow\n is set, then an additional row will appear at the end of the Table, with entry boxes and a button to call the specified function.\n\nThe button will pass the string \nnewRow\n to the specified function.  \n\n\n   \n\n\nIf both parameters are set to a function, then both buttons at the end of each row and a row of Entry boxes will be shown:  \n\n\n   \n\n\nIt's also possible to set the following parameters:\n\n    * \nactionHeading\n - set the title of the right column\n\n    * \nactionButton\n - set the button text for each row\n\n    * \naddButton\n - set the button text for the Entry row\n\n    * \nshowMenu\n - boolean to show a right-click menu\n\n    * \ndisabledEntries\n - pass a list of numbers, to disable entry boxes in those positions\n\n    * \nborder\n - the style of the cell border: \nsunken\n, \nsolid\n, etc\n\n\n   \n\n\n\n\n\n\nConnecting to Databases\n\n\n\n\n\n\n.addDbTable(title, db, table)\n\n    Will connect to the specified database, and show all rows in the specified table.\n\n    appJar will query the table to detect the PrimaryKey, and use this as the key when selecting the row.\n\n\n\n\n\n\n.replaceDBTable(title, db, table)\n\n    Will replace the currently shown data in the Table, with the data found in the specified database/table.  \n\n\n\n\n\n\n.refreshDBTable(title)\n\n    Will refresh the specified DB Table.  \n\n\n\n\n\n\n.addDbOptionBox(title, db, change=None)\n\n    Will create an OptionBox, containing a list of all the tables available in the specified database.  \n\n\n\n\n\n\n.refreshDbOptionBox(title)\n\n    Will reload the list of tables displayed in the specified DB OptionBox.  \n\n\n\n\n\n\nGet Tables\n\n\n\n\n\n\n.getTableRow(title, rowNumber)\n\n    Returns a list of values representing the specified row.  \n\n\n\n\n\n\n.getTableRowCount(title)\n\n    Returns a count of how many rows are in the Table (not including the header row).  \n\n\n\n\n\n\n.getTableSelectedCells(title)\n\n    Gets a dictionary of booleans, indicating the status of each cell.\n\n    True indicates the cell is selected, False indicates the cell is not selected.\n\n    The name of each entry on the dictionary will be in the format ROW-COLUMN, eg. 0-2  \n\n\n\n\n\n\n.getTableEntries(title)\n\n    If \naddRow\n was set when the \nTable\n was created, this function will get the contents of the entry boxes.\n\n    They will be returned as a list, in the same order as the entry boxes.  \n\n\n\n\n\n\nSet Tables\n\n\n\n\n.addTableRow(title, data)\n\n    Adds a new row of data to the end of the existing Table.\n\n    It will be positioned at the bottom of the Table, above the entry boxes if present.  \n\n\n\n\nTo have the \nPress\n button on the entries row add a new row of data, try the following:  \n\n\n    def press(btn):\n        if btn == \naddRow\n:     # the button on the entries row\n            data = app.getTableEntries(\ng1\n)\n            app.addTableRow(\ng1\n, data)\n\n\n\n\n\n\n\n\n.addTableRows(title, data)\n\n    Adds the new rows of data to the end of the existing Table.  \n\n\n\n\n\n\n.replaceTableRow(title, rowNum, data)\n\n    Replace the values in the specified row with the new data.\n\n    If the new data has fewer items, the remaining cells will be emptied.  \n\n\n\n\n\n\n.replaceAllTableRows(title, rowNum, data)\n\n    Removes all existing rows, before adding the new rows.  \n\n\n\n\n\n\n.setTableHeaders(title, data)\n\n    Replace the values in the header row.\n\n    If the new data has fewer items, the remaining header cells will be emptied.  \n\n\n\n\n\n\n.deleteTableRow(title, rowNum)\n\n    Delete the specified row from the specified Table.\n\n\n\n\n\n\n.deleteAllTableRows(title)\n\n    Delete all rows from the specified Table (except the header row).  \n\n\n\n\n\n\n.addTableColumn(title, columnNumber, data)\n\n    Add the column of data to the named Table, in the specified position.  \n\n\n\n\n\n\n.deleteTableColumn(title, columnNumber)\n\n    Delete the specified column from the named Table.  \n\n\n\n\n\n\n.selectTableRow(title, row, highlight=None)\n \n \n.selectTableColumn(title, col, highlight=None)\n\n    These will either select or highlight the specified row or column in the named Table.\n\n    If you leave \nhighlight=None\n the row/column will be toggled between selected \n deselected.\n\n    If you set \nhighlight=True\n the row/column will be highlighted (like a mouse over). \n    If you set \nhighlight=False\n the row/column will be un-highlighted (like a mouse over). \n\n\n\n\n\n\n.disableTableEntry(title, entryPos, disabled=True)\n\n    Will disable the specified entry box (starting at 0) if entries are being displayed.  \n\n\n\n\n\n\nTree\n\n\n\n\nTakes an arbitrary XML string, and converts it into a tree structure.  \n\n\n\n\nfrom appJar import gui\n\napp = gui()\napp.addTree(\nt1\n,\n            \npeople\n\n            \nperson\nname\nFred\n/name\nage\n45\n/age\ngender\nMale\n/gender\n/person\n\n            \nperson\nname\nTina\n/name\nage\n37\n/age\ngender\nFemale\n/gender\n/person\n\n            \nperson\nname\nCLive\n/name\nage\n28\n/age\ngender\nMale\n/gender\n/person\n\n            \nperson\nname\nBetty\n/name\nage\n51\n/age\ngender\nFemale\n/gender\n/person\n\n            \n/people\n)\napp.go()\n\n\n\n\nAdd Trees\n\n\n\n\n.addTree(title, xml_data)\n\n    Create a tree from the specified XML data  \n\n\n\n\nSet Trees\n\n\n\n\n.setTreeDoubleClickFunction(title, func)\n\n    Register a function to call when an item is double-clicked  \n\n\n.setTreeEditFunction(title, func)\n\n    Register a function to call when an item is edited  \n\n\n.setTreeEditable(title, value)\n\n    Set whether the tree can be edited  \n\n\n.setTreeColours(title, fg, bg, fgH, bgH)\n\n    Set the fg/bg/fg highlight/bg highlight colours of the tree  \n\n\n.setTreeBg(title, colour)\n\n    Set the background colour of the tree  \n\n\n.setTreeFg(title, colour)\n\n    Set the foreground colour of the tree  \n\n\n.setTreeHighlightBg(title, colour)\n\n    Set the background colour of the highlighted node    \n\n\n.setTreeHighlightFg(title, colour)\n\n    Set the foreground colour of the highlighted node  \n\n\n\n\nGet Trees\n\n\n\n\n.getTreeXML(title)\n\n    Return the tree as XML  \n\n\n.getTreeSelected(title)\n\n    Return the selected node as a String\n\n\n.getTreeSelectedXML(title)\n\n    Return the selected node (and any children) as XML", 
            "title": "Beta Widgets"
        }, 
        {
            "location": "/pythonDevWidgets/#beta-widgets", 
            "text": "The following widgets are in  beta  - they're available and being used, they're just not quite finished...", 
            "title": "Beta Widgets"
        }, 
        {
            "location": "/pythonDevWidgets/#accessibility", 
            "text": "A pop-up to configure GUI settings.     from appJar import gui\n\nwith gui( Demo Access ) as app:\n    app.button('Accessibility', app.showAccess, icon='ACCESS')  It allows you to configure:     Font Family  Font Size  Bold True/False  Normal/Italic  Underline True/False  Overstrike True/False  Foreground Colour  Background Colour", 
            "title": "Accessibility"
        }, 
        {
            "location": "/pythonDevWidgets/#table", 
            "text": "Used to create a spreadsheet like interface. \nThe Table has mouse interactivity, with mouse-over highlighting, and mouse-click highlighting. \nIt is possible to include buttons at the end of each row, and an additional row of entry boxes, with their own button.        from appJar import gui\n\napp = gui()\napp.setFont(20)\napp.addTable( g1 ,\n    [[ Name ,  Age ,  Gender ],\n    [ Fred , 45,  Male ],\n    [ Tina , 37,  Female ],\n    [ Clive , 28,  Male ],\n    [ Betty , 51,  Female ]])\napp.go()", 
            "title": "Table"
        }, 
        {
            "location": "/pythonDevWidgets/#add-tables", 
            "text": ".addTable(title, data, action=None, addRow=None) \n    Receives a (jagged) 2D list of values. The first list should be the headers for the Table, the rest will contain each row of values.    If  action  is set, a button will be created, at the end of each row, calling the specified function. It will pass the row number (starting at 0).         If  addRow  is set, then an additional row will appear at the end of the Table, with entry boxes and a button to call the specified function. \nThe button will pass the string  newRow  to the specified function.         If both parameters are set to a function, then both buttons at the end of each row and a row of Entry boxes will be shown:         It's also possible to set the following parameters: \n    *  actionHeading  - set the title of the right column \n    *  actionButton  - set the button text for each row \n    *  addButton  - set the button text for the Entry row \n    *  showMenu  - boolean to show a right-click menu \n    *  disabledEntries  - pass a list of numbers, to disable entry boxes in those positions \n    *  border  - the style of the cell border:  sunken ,  solid , etc", 
            "title": "Add Tables"
        }, 
        {
            "location": "/pythonDevWidgets/#connecting-to-databases", 
            "text": ".addDbTable(title, db, table) \n    Will connect to the specified database, and show all rows in the specified table. \n    appJar will query the table to detect the PrimaryKey, and use this as the key when selecting the row.    .replaceDBTable(title, db, table) \n    Will replace the currently shown data in the Table, with the data found in the specified database/table.      .refreshDBTable(title) \n    Will refresh the specified DB Table.      .addDbOptionBox(title, db, change=None) \n    Will create an OptionBox, containing a list of all the tables available in the specified database.      .refreshDbOptionBox(title) \n    Will reload the list of tables displayed in the specified DB OptionBox.", 
            "title": "Connecting to Databases"
        }, 
        {
            "location": "/pythonDevWidgets/#get-tables", 
            "text": ".getTableRow(title, rowNumber) \n    Returns a list of values representing the specified row.      .getTableRowCount(title) \n    Returns a count of how many rows are in the Table (not including the header row).      .getTableSelectedCells(title) \n    Gets a dictionary of booleans, indicating the status of each cell. \n    True indicates the cell is selected, False indicates the cell is not selected. \n    The name of each entry on the dictionary will be in the format ROW-COLUMN, eg. 0-2      .getTableEntries(title) \n    If  addRow  was set when the  Table  was created, this function will get the contents of the entry boxes. \n    They will be returned as a list, in the same order as the entry boxes.", 
            "title": "Get Tables"
        }, 
        {
            "location": "/pythonDevWidgets/#set-tables", 
            "text": ".addTableRow(title, data) \n    Adds a new row of data to the end of the existing Table. \n    It will be positioned at the bottom of the Table, above the entry boxes if present.     To have the  Press  button on the entries row add a new row of data, try the following:        def press(btn):\n        if btn ==  addRow :     # the button on the entries row\n            data = app.getTableEntries( g1 )\n            app.addTableRow( g1 , data)    .addTableRows(title, data) \n    Adds the new rows of data to the end of the existing Table.      .replaceTableRow(title, rowNum, data) \n    Replace the values in the specified row with the new data. \n    If the new data has fewer items, the remaining cells will be emptied.      .replaceAllTableRows(title, rowNum, data) \n    Removes all existing rows, before adding the new rows.      .setTableHeaders(title, data) \n    Replace the values in the header row. \n    If the new data has fewer items, the remaining header cells will be emptied.      .deleteTableRow(title, rowNum) \n    Delete the specified row from the specified Table.    .deleteAllTableRows(title) \n    Delete all rows from the specified Table (except the header row).      .addTableColumn(title, columnNumber, data) \n    Add the column of data to the named Table, in the specified position.      .deleteTableColumn(title, columnNumber) \n    Delete the specified column from the named Table.      .selectTableRow(title, row, highlight=None)     .selectTableColumn(title, col, highlight=None) \n    These will either select or highlight the specified row or column in the named Table. \n    If you leave  highlight=None  the row/column will be toggled between selected   deselected. \n    If you set  highlight=True  the row/column will be highlighted (like a mouse over). \n    If you set  highlight=False  the row/column will be un-highlighted (like a mouse over).     .disableTableEntry(title, entryPos, disabled=True) \n    Will disable the specified entry box (starting at 0) if entries are being displayed.", 
            "title": "Set Tables"
        }, 
        {
            "location": "/pythonDevWidgets/#tree", 
            "text": "Takes an arbitrary XML string, and converts it into a tree structure.     from appJar import gui\n\napp = gui()\napp.addTree( t1 ,\n             people \n             person name Fred /name age 45 /age gender Male /gender /person \n             person name Tina /name age 37 /age gender Female /gender /person \n             person name CLive /name age 28 /age gender Male /gender /person \n             person name Betty /name age 51 /age gender Female /gender /person \n             /people )\napp.go()", 
            "title": "Tree"
        }, 
        {
            "location": "/pythonDevWidgets/#add-trees", 
            "text": ".addTree(title, xml_data) \n    Create a tree from the specified XML data", 
            "title": "Add Trees"
        }, 
        {
            "location": "/pythonDevWidgets/#set-trees", 
            "text": ".setTreeDoubleClickFunction(title, func) \n    Register a function to call when an item is double-clicked    .setTreeEditFunction(title, func) \n    Register a function to call when an item is edited    .setTreeEditable(title, value) \n    Set whether the tree can be edited    .setTreeColours(title, fg, bg, fgH, bgH) \n    Set the fg/bg/fg highlight/bg highlight colours of the tree    .setTreeBg(title, colour) \n    Set the background colour of the tree    .setTreeFg(title, colour) \n    Set the foreground colour of the tree    .setTreeHighlightBg(title, colour) \n    Set the background colour of the highlighted node      .setTreeHighlightFg(title, colour) \n    Set the foreground colour of the highlighted node", 
            "title": "Set Trees"
        }, 
        {
            "location": "/pythonDevWidgets/#get-trees", 
            "text": ".getTreeXML(title) \n    Return the tree as XML    .getTreeSelected(title) \n    Return the selected node as a String  .getTreeSelectedXML(title) \n    Return the selected node (and any children) as XML", 
            "title": "Get Trees"
        }, 
        {
            "location": "/simpleAppJar/", 
            "text": "v1.0 Naming\n\n\nOne of the features we are working towards in the 1.0 release, is a simplified way of adding, setting \n getting widgets.\n\nEach widget will have a single function that supports all three actions.  \n\n\nIf you combine this with the \ncontext manager\n feature, this becomes possible:\n\n\nfrom appJar import gui \n\ndef press(btnName):\n    app.popUp(\nINFO\n, \nYou pressed \n + btnName)\n\ndef update(value):\n    if value == \nlist\n: app.slider(\nslider\n, app.listbox(value)[0])\n    elif value == \nslider\n: app.listbox(\nlist\n, app.slider(value))\n    app.label(\ndisplay\n, app.listbox(\nlist\n)[0])\n\nwith gui(\nVersion 1.0\n, bg=\nteal\n) as app:\n    app.label(\nVersion 1.0 Demo\n, colspan=2, bg=\nred\n)\n    with app.labelFrame(\nBig Buttons\n, colspan=2, sticky=\nnews\n, expand=\nboth\n):\n        app.button(\nBUTTON A\n, press)\n        app.button(\nBUTTON B\n, press)\n        app.button(\nBUTTON C\n, press)\n    app.listbox(\nlist\n, [1, 2, 3, 4, 5], rows=5, selected=0, submit=update)\n    app.label(\ndisplay\n, \n1\n, row=2, column=1, bg=\nyellow\n, sticky=\nnews\n)\n    app.slider(\nslider\n, colspan=2, range=(1,5), change=update, interval=1)\n\n\n\n\n\n\nOperation\n\n\n\n\nAs demonstrated above, each widget now has a single function - the name of the widget.\n\nCall this function passing one or both of the key parameters, to determine what should happen:\n\n\napp.label(\ntitle\n, \ntext\n)      # ADD a label if the title is new\napp.label(\ntitle\n, \ntext_2\n)    # SET a label if the title exists\nprint(app.label(\ntitle\n))       # GET a label if no widget is being created or set\n\n\n\n\nKey Parameters\n\n\nThe two key parameters are:\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\nA unique identifier for that widget type.\n\n\n\n\n\n\nvalue\n\n\nstring\n\n\nAny relevant information for the widget.\n\n\n\n\n\n\n\n\nThe logic is as follows:\n\n\n\n\nIf \ntitle\n doesn't exist - \nADD\n the widget, using the \nvalue\n, or \ntitle\n if no \nvalue\n is specified.  \n\n\nIf \ntitle\n already exists and a \nvalue\n is specified - \nSET\n the widget.  \n\n\nIf \ntitle\n already exists and a \nvalue\n is not specified - \nGET\n the widget.  \n\n\n\n\nPositional Parameters\n\n\nWhen adding a widget, it is positioned in the first column of a new row.\n\nIf you want to change this, you can specify where it should go, either by naming the paramters:  \n\n\napp.label(\ntitle\n, \ntext\n, row=2, column=4, rowspan=3)      # ADD a label\n\n\n\n\nOr by passing them as a tuple:  \n\n\napp.label(\nMain Title\n, pos=(1, 0))     # ADD a label in row 1, column 0\napp.label(\nSub Title\n, pos=(2, 0, 2))   # ADD a label in row 2, column 0, spanning 2 columns\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrow\n\n\ninteger\n\n\nnext row\n\n\nThe grid row to place the widget in.\n\n\n\n\n\n\ncolumn\n\n\ninteger\n\n\n0\n\n\nThe grid column to place the widget in.\n\n\n\n\n\n\nrowspan\n\n\ninteger\n\n\n1\n\n\nThe number of grid rows to stretch the widget across.\n\n\n\n\n\n\ncolspan\n\n\ninteger\n\n\n1\n\n\nThe number of grid columns to stretch the widget across.\n\n\n\n\n\n\npos\n\n\nlist/tuple\n\n\n()\n\n\nPosition parameters for the widget, in the order: row, column, colspan, rowspan\n\n\n\n\n\n\n\n\nGUI Parameters\n\n\nThere are two GUI parameters which affect how widgets are displayed \nsticky\n and \nstretch\n.\n\nThese can be modified when adding a widget, just bear in mind they are GUI settings, and will affect all future widgets in the current container.  \n\n\napp.label(\nTitle\n, sticky=\n, stretch=\nnone\n)\napp.label(\nSubTitle\n, sticky=\nns\n, stretch=\nrow\n)\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsticky\n\n\nstring\n\n\nVariable\n\n\nDescribes which sides the widget will stick to, one or more of: \nn\n, \ne\n, \nw\n, \ns\n in a single string.\n\n\n\n\n\n\nstretch\n\n\nstring\n\n\nVariable\n\n\nDescribes how the widget will stretch to fill the row/column: \nnone\n, \nrow\n, \ncolumn\n or \nall\n.\n\n\n\n\n\n\n\n\nEvent Parameters\n\n\nMost of the widgets also have some support for events (see the \nevents page\n for more information).\n\n\nsubmit\n \n \nchange\n will pass the name of the widget to the function, \ndrop\n will pass the data to the function:\n\n\nNB.\n the parameter should only be the name of the function, don't include any brackets.  \n\n\ndef update(name):\n    if name == \nsize\n:\n        updateSize()\n    elif name == \ntoppings\n:\n        updateToppings()\n\napp.listbox(\nsize\n, [\nsmall\n, \nmedium\n, \nlarge\n], change=update)\napp.listbox(\ntoppings\n, [\ncorn\n, \ncheese\n, \npeppers\n], change=update)\napp.image(\nimg1\n, \nplaceholder.gif\n, drop=True)\n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nchange\n\n\nfunction\n\n\nNone\n\n\nA function to call when the widget is \nchanged\n.\n\n\n\n\n\n\nsubmit\n\n\nfunction\n\n\nNone\n\n\nA function to call when the widget is \nsubmitted\n.\n\n\n\n\n\n\nover\n\n\nfunction (list)\n\n\nNone\n\n\nA function to call when the mouse \nenters\n the widget, with an optional second function to call when the mouse \nleaves\n.\n\n\n\n\n\n\ndrop\n\n\nboolean/function\n\n\nNone\n\n\nUpdate the widget with \ndropped\n data if True, otherwise call the function.\n\n\n\n\n\n\ndrag\n\n\nfunction (list)\n\n\nNone\n\n\nA function to call call when the widget is \ndragged\n, with an optional second function to call when the widget is \ndropped\n.\n\n\n\n\n\n\n\n\nOther Parameters\n\n\nThere are a couple of other parameter that can be set on widgets.  \n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nright\n\n\nstring\n\n\nNone\n\n\nSpecify a premade right-click menu to link to the widget.\n\n\n\n\n\n\nfont\n\n\ninteger/dict\n\n\nNone\n\n\nPass either a font size, or a dictionary of font properties to use for this widget's font.\n\n\n\n\n\n\n\n\nLabel\n\n\n\n\nA widget for displaying text in the GUI.  \n\n\n\n\n.label(title, value=None)\n\nThe \nvalue\n will be the text to show in the label.\n\nLabels can receive a \nsubmit\n parameter, making them clickable.\n\nLabels can receive \ndrop\n data.  \n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkind\n\n\nstring\n\n\nstandard\n\n\nSet to \nselectable\n or \nflash\n to create different labels.\n\n\n\n\n\n\n\n\nMessage\n\n\nA widget for displaying multi-line text in the GUI.  \n\n\n\n\n.message(title, value=None)\n\n    The \nvalue\n will be the text to show in the message.\n\n    Messages can receive \ndrop\n data.  \n\n\n\n\nEntry\n\n\n\n\nAn interactive widget, for capturing user input in the GUI.  \n\n\n\n\n.entry(title, value=None)\n\n    A \nvalue\n is not required, but if provided will populate the entry.\n\n    Entries can receive a \nchange\n parameter, and can link a \nsubmit\n parameter to pressing \n.\n\n    Entries can receive \ndrop\n data.  \n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlabel\n\n\nboolean\n\n\nFalse\n\n\nAdds a Label before the widget.\n\n\n\n\n\n\nkind\n\n\nstring\n\n\nstandard\n\n\nOne of: \nstandard\n, \nfile\n, \ndirectory\n, \nnumeric\n, \nauto\n or \nvalidation\n.\n\n\n\n\n\n\nsecret\n\n\nboolean\n\n\nFalse\n\n\nConfigures the entry box to show stars instead of characters.\n\n\n\n\n\n\ndefault\n\n\nstring\n\n\nNone\n\n\nSets default text to display in an empty entry.\n\n\n\n\n\n\nfocus\n\n\nboolean\n\n\nFalse\n\n\nShould the entry box be given focus?\n\n\n\n\n\n\nrows\n\n\ninteger\n\n\n10\n\n\nIf the kind is \nauto\n this will set the number of rows to show.\n\n\n\n\n\n\n\n\nThere are also some validation settings that can be applied:  \n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlimit\n\n\ninteger\n\n\nNone\n\n\nSets a maximum limit on the number of characters that can be entered.\n\n\n\n\n\n\ncase\n\n\nstring\n\n\nNone\n\n\nSet to \nupper\n to force uppercase or \nlower\n to force lowercase.\n\n\n\n\n\n\n\n\nText\n\n\n\n\nAn interactive widget, for capturing multi-line user input in the GUI.  \n\n\n\n\n.text(title, value=None)\n\n    A \nvalue\n is not required, but if provided will populate the text.\n\n    Text boxes can receive a \nchange\n parameter.\n\n    Text boxes can receive \ndrop\n data.  \n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nscroll\n\n\nboolean\n\n\nFalse\n\n\nWill configure this as a scrollable text area.\n\n\n\n\n\n\n\n\nButton\n\n\n\n\nA clickable button for triggering events.  \n\n\n\n\n.button(title, value=None)\n\n    The \nvalue\n should be a function to call when the button is pressed.  \n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nimage\n\n\nstring\n\n\nNone\n\n\nA path to an image to show in the button.\n\n\n\n\n\n\nicon\n\n\nstring\n\n\nNone\n\n\nThe name of an icon to show in the button.\n\n\n\n\n\n\n\n\nLink\n\n\n\n\nA clickable \nhyperlink\n to trigger events or launch webpages.  \n\n\n\n\n.link(title, value=None)\n\n    The \nvalue\n can be set to a function to call when the link is clicked, or a valid URI to open in a browser.  \n\n\n\n\nCheck\n\n\n\n\nA checkbox style widget, that can be checked/unchecked.  \n\n\n\n\n.check(title, value=None)\n\n    The \nvalue\n should be True or False, indicating if the check starts selected or not.\n\n    Check boxes can receive a \nchange\n parameter.  \n\n\n\n\nRadio\n\n\n\n\nRadio buttons are used in groups, only one of them can be checked.\n\nBy default, the first radio button added to a group will be selected.\n\n\n\n\n.radio(title, value=None)\n\n    The \ntitle\n is the radio button's group.\n\n    The \nvalue\n is the text to display next to this radio button.\n\n    Radio buttons can receive a \nchange\n parameter, it will be linked to all radio buttons of the same \ntitle\n.  \n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nselected\n\n\nboolean\n\n\nFalse\n\n\nShould this radio be selected?\n\n\n\n\n\n\n\n\nOption\n\n\n\n\nWhen clicked, displays a drop-down of items, one of which can be selected.  \n\n\n\n\n.option(title, value=None)\n\n    The \nvalue\n should contain a list of items to display in the drop-down.\n\n    Options can receive a \nchange\n parameter.  \n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkind\n\n\nstring\n\n\nstandard\n\n\nSet this to \nticks\n if you want tickable options.\n\n\n\n\n\n\nselected\n\n\nstring/integer\n\n\nNone\n\n\nStart with the specified item/position selected.\n\n\n\n\n\n\n\n\nSpin\n\n\n\n\nShows a single value, with arrows to scroll up or down, allowing the user to change the value.  \n\n\n\n\n.spin(title, value=None, endValue=None)\n\n    If only the \nvalue\n is set, it should be a list of values to display in the spin box.\n\n    If \nendValue\n is also set, then both parameters should be integers, and appJar will generate a range of whole numbers between the two values.\n\n    Spin boxes can receive a \nchange\n parameter.  \n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nendValue\n\n\ninteger\n\n\nNone\n\n\nIf specified, value \n endValue should be integers, and will be used to generate a range.\n\n\n\n\n\n\npos\n\n\ninteger\n\n\n0\n\n\nThe position of an item to select.\n\n\n\n\n\n\nitem\n\n\nstring\n\n\nNone\n\n\nThe name of an item to select.\n\n\n\n\n\n\n\n\nListbox\n\n\n\n\nDisplays a list of items, one (or more than one) of which can be selected.  \n\n\n\n\n.listbox(title, value=None)\n\n    The \nvalue\n should contain a list of items to display in the listbox.\n\n    Listboxes can receive a \nchange\n parameter.\n\n    Listboxes can receive \ndrop\n data.  \n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrows\n\n\ninteger\n\n\nNone\n\n\nSpecifies how many rows to display in the listbox.\n\n\n\n\n\n\nmulti\n\n\nboolean\n\n\nFalse\n\n\nSet the listbox to be multi-selectable.\n\n\n\n\n\n\ngroup\n\n\nboolean\n\n\nFalse\n\n\nSet the listbox to be part of a group.\n\n\n\n\n\n\n\n\nSlider\n\n\n\n\nA draggable widget, where the user can select a number from a range.  \n\n\n\n\n.slider(title, value=None)\n\n    The \nvalue\n is optional - it will set the starting position of the slider.\n\n    Sliders can receive a \nchange\n parameter.  \n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndirection\n\n\nstring\n\n\nhorizontal\n\n\nSet the direction of the slider: \nvertical\n or \nhorizontal\n.\n\n\n\n\n\n\nshow\n\n\nboolean\n\n\nFalse\n\n\nShow the slider's value above the slider.\n\n\n\n\n\n\nincrement\n\n\ninteger\n\n\n10\n\n\nConfigures how much the slider jumps, when the trough is clicked.\n\n\n\n\n\n\ninterval\n\n\ninteger\n\n\nNone\n\n\nConfigures the slider to show interval values, along its length. In steps of the value specified.\n\n\n\n\n\n\n\n\nMeter\n\n\n\n\nVarious styles of progress meter.  \n\n\n\n\n.meter(title, value=None)\n\n    For \nstandard\n and \nsplit\n meters \nvalue\n should be a number between 0 and 100.\n\n    For \ndual\n meters, \nvalue\n should be a list of two numbers, each between 0 and 100.  \n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nstring\n\n\nNone\n\n\nSet text to show on the meter.\n\n\n\n\n\n\nkind\n\n\nstring\n\n\nstandard\n\n\nChoose the kind of meter: \nstandard\n, \nsplit\n or \ndual\n.\n\n\n\n\n\n\nfill\n\n\nboolean\n\n\nNone\n\n\nSet the fill colour(s) for the slider (a list of two colours for \nsplit\n \n \ndual\n).\n\n\n\n\n\n\n\n\nGrip\n\n\n\n\nDisplays a draggable icon, which allows the GUI to be moved.  \n\n\n\n\n.grip(title, value=None)\n\n    A \nvalue\n is not required.  \n\n\n\n\nSeparator\n\n\n\n\nDisplays a line, giving visual separation in the GUI.  \n\n\n\n\n.separator(title, value=None)\n\n    A \nvalue\n is not required.  \n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndirection\n\n\nstring\n\n\nhorizontal\n\n\nSet the orientation of the separator: \nhorizontal\n or \nvertical\n.\n\n\n\n\n\n\n\n\nImage\n\n\n\n\nDisplays a picture.  \n\n\n\n\n.image(title, value=None)\n\n    The \nvalue\n should be the image file, icon or data to show.\n\n    Images can receive a \nsubmit\n parameter, making them clickable.\n\n    Images can receive \ndrop\n data.  \n\n\n\n\n\n\n\n\n\n\nParameter\n\n\nData type\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkind\n\n\nstring\n\n\nstandard\n\n\nThe kind of image, one of: \nicon\n, \ndata\n or \nstandard\n.\n\n\n\n\n\n\nfmt\n\n\nstring\n\n\nNone\n\n\nIf the \nkind\n is \ndata\n this will be used to determine the file type.\n\n\n\n\n\n\ncompound\n\n\nstring\n\n\nNone\n\n\nCan be set to a position to show the title as well (\ntop\n, \nbottom\n, \nleft\n, \nright\n or \ncenter\n).\n\n\n\n\n\n\nspeed\n\n\ninteger\n\n\nNone\n\n\nIf this is an animated image, the FPS to animate the image at.\n\n\n\n\n\n\nover\n\n\nstring\n\n\nNone\n\n\nThe path to an alternative image to show, when the mouse goes over the image.\n\n\n\n\n\n\nmap\n\n\ndictionary\n\n\nNone\n\n\nA dictionary of name:coordinates to use as an image map. \nsubmit\n must also be set.\n\n\n\n\n\n\n\n\nProperties\n\n\n\n\nDisplays a list of checkboxes, stored in a dictionary.  \n\n\n\n\n.properties(title, value=None)\n\n    The \nvalue\n should contain a dictionary of names and booleans.\n\n    Properties can receive a \nchange\n parameter.  \n\n\n\n\nDate\n\n\n\n\nDisplays a simple date picker widget.  \n\n\n\n\n.date(title, value=None)\n\n    The \nvalue\n should contain a date object.\n\n    Date pickers can receive a \nchange\n parameter.  \n\n\n\n\nCanvas\n\n\n\n\nDisplays a the canvas widget.  \n\n\n\n\n.canvas(title)\n\n    Creates a canvas with the specified title. \n\n\n\n\nPopUp\n\n\n\n\nDisplays a popUp.  \n\n\n\n\n.popUp(title, message, kind=\"info\", parent=None)\n\n    This will show any of the available popUps.\n\n\ntitle\n  will be displayed in the title bar.\n    \nmessage\n will be displayed as the text of the popUp.\n\n\nkind\n defaults to \ninfo\n, but can be any of: \nerror\n, \nwarning\n, \nyesno\n, \nquestion\n, \nok\n, \nretry\n, \nstring\n, \ninteger\n, \nfloat\n, \ntext\n or \nnumber\n.\n\n\nparent\n allows you to link this popUp to a named SubWindow, instead of the main window.  \n\n\n\n\nStatusbar\n\n\n\n\n\n\n\n\n.statusbar(**kwargs)\n\n    Functions to show or update a statusbar.\n\n    It will add a statusbar if none exists, with the following parameters:  \n\n\n\n\nheader\n this will set a piece of text to put before any messages.  \n\n\nfields\n this will set the number of fields to show in the statusbar.  \n\n\nside\n this will set whether to show the fields on the \nLEFT\n, \nRIGHT\n, or the default \nstretched\n.  \n\n\ntext\n text to put in the first field.  \n\n\n\n\n\n\n\n\n.statusbar(**kwargs)\n\n    Or, update the statusbar if one does exist:  \n\n\n\n\ntext\n text to put in the field.  \n\n\nfield\n the field numberis applicable.", 
            "title": "(v1.0 Naming)"
        }, 
        {
            "location": "/simpleAppJar/#v10-naming", 
            "text": "One of the features we are working towards in the 1.0 release, is a simplified way of adding, setting   getting widgets. \nEach widget will have a single function that supports all three actions.    If you combine this with the  context manager  feature, this becomes possible:  from appJar import gui \n\ndef press(btnName):\n    app.popUp( INFO ,  You pressed   + btnName)\n\ndef update(value):\n    if value ==  list : app.slider( slider , app.listbox(value)[0])\n    elif value ==  slider : app.listbox( list , app.slider(value))\n    app.label( display , app.listbox( list )[0])\n\nwith gui( Version 1.0 , bg= teal ) as app:\n    app.label( Version 1.0 Demo , colspan=2, bg= red )\n    with app.labelFrame( Big Buttons , colspan=2, sticky= news , expand= both ):\n        app.button( BUTTON A , press)\n        app.button( BUTTON B , press)\n        app.button( BUTTON C , press)\n    app.listbox( list , [1, 2, 3, 4, 5], rows=5, selected=0, submit=update)\n    app.label( display ,  1 , row=2, column=1, bg= yellow , sticky= news )\n    app.slider( slider , colspan=2, range=(1,5), change=update, interval=1)", 
            "title": "v1.0 Naming"
        }, 
        {
            "location": "/simpleAppJar/#operation", 
            "text": "As demonstrated above, each widget now has a single function - the name of the widget. \nCall this function passing one or both of the key parameters, to determine what should happen:  app.label( title ,  text )      # ADD a label if the title is new\napp.label( title ,  text_2 )    # SET a label if the title exists\nprint(app.label( title ))       # GET a label if no widget is being created or set", 
            "title": "Operation"
        }, 
        {
            "location": "/simpleAppJar/#key-parameters", 
            "text": "The two key parameters are:     Parameter  Data type  Description      title  string  A unique identifier for that widget type.    value  string  Any relevant information for the widget.     The logic is as follows:   If  title  doesn't exist -  ADD  the widget, using the  value , or  title  if no  value  is specified.    If  title  already exists and a  value  is specified -  SET  the widget.    If  title  already exists and a  value  is not specified -  GET  the widget.", 
            "title": "Key Parameters"
        }, 
        {
            "location": "/simpleAppJar/#positional-parameters", 
            "text": "When adding a widget, it is positioned in the first column of a new row. \nIf you want to change this, you can specify where it should go, either by naming the paramters:    app.label( title ,  text , row=2, column=4, rowspan=3)      # ADD a label  Or by passing them as a tuple:    app.label( Main Title , pos=(1, 0))     # ADD a label in row 1, column 0\napp.label( Sub Title , pos=(2, 0, 2))   # ADD a label in row 2, column 0, spanning 2 columns     Parameter  Data type  Default  Description      row  integer  next row  The grid row to place the widget in.    column  integer  0  The grid column to place the widget in.    rowspan  integer  1  The number of grid rows to stretch the widget across.    colspan  integer  1  The number of grid columns to stretch the widget across.    pos  list/tuple  ()  Position parameters for the widget, in the order: row, column, colspan, rowspan", 
            "title": "Positional Parameters"
        }, 
        {
            "location": "/simpleAppJar/#gui-parameters", 
            "text": "There are two GUI parameters which affect how widgets are displayed  sticky  and  stretch . \nThese can be modified when adding a widget, just bear in mind they are GUI settings, and will affect all future widgets in the current container.    app.label( Title , sticky= , stretch= none )\napp.label( SubTitle , sticky= ns , stretch= row )     Parameter  Data type  Default  Description      sticky  string  Variable  Describes which sides the widget will stick to, one or more of:  n ,  e ,  w ,  s  in a single string.    stretch  string  Variable  Describes how the widget will stretch to fill the row/column:  none ,  row ,  column  or  all .", 
            "title": "GUI Parameters"
        }, 
        {
            "location": "/simpleAppJar/#event-parameters", 
            "text": "Most of the widgets also have some support for events (see the  events page  for more information).  submit     change  will pass the name of the widget to the function,  drop  will pass the data to the function:  NB.  the parameter should only be the name of the function, don't include any brackets.    def update(name):\n    if name ==  size :\n        updateSize()\n    elif name ==  toppings :\n        updateToppings()\n\napp.listbox( size , [ small ,  medium ,  large ], change=update)\napp.listbox( toppings , [ corn ,  cheese ,  peppers ], change=update)\napp.image( img1 ,  placeholder.gif , drop=True)     Parameter  Data type  Default  Description      change  function  None  A function to call when the widget is  changed .    submit  function  None  A function to call when the widget is  submitted .    over  function (list)  None  A function to call when the mouse  enters  the widget, with an optional second function to call when the mouse  leaves .    drop  boolean/function  None  Update the widget with  dropped  data if True, otherwise call the function.    drag  function (list)  None  A function to call call when the widget is  dragged , with an optional second function to call when the widget is  dropped .", 
            "title": "Event Parameters"
        }, 
        {
            "location": "/simpleAppJar/#other-parameters", 
            "text": "There are a couple of other parameter that can be set on widgets.       Parameter  Data type  Default  Description      right  string  None  Specify a premade right-click menu to link to the widget.    font  integer/dict  None  Pass either a font size, or a dictionary of font properties to use for this widget's font.", 
            "title": "Other Parameters"
        }, 
        {
            "location": "/simpleAppJar/#label", 
            "text": "A widget for displaying text in the GUI.     .label(title, value=None) \nThe  value  will be the text to show in the label. \nLabels can receive a  submit  parameter, making them clickable. \nLabels can receive  drop  data.        Parameter  Data type  Default  Description      kind  string  standard  Set to  selectable  or  flash  to create different labels.", 
            "title": "Label"
        }, 
        {
            "location": "/simpleAppJar/#message", 
            "text": "A widget for displaying multi-line text in the GUI.     .message(title, value=None) \n    The  value  will be the text to show in the message. \n    Messages can receive  drop  data.", 
            "title": "Message"
        }, 
        {
            "location": "/simpleAppJar/#entry", 
            "text": "An interactive widget, for capturing user input in the GUI.     .entry(title, value=None) \n    A  value  is not required, but if provided will populate the entry. \n    Entries can receive a  change  parameter, and can link a  submit  parameter to pressing  . \n    Entries can receive  drop  data.        Parameter  Data type  Default  Description      label  boolean  False  Adds a Label before the widget.    kind  string  standard  One of:  standard ,  file ,  directory ,  numeric ,  auto  or  validation .    secret  boolean  False  Configures the entry box to show stars instead of characters.    default  string  None  Sets default text to display in an empty entry.    focus  boolean  False  Should the entry box be given focus?    rows  integer  10  If the kind is  auto  this will set the number of rows to show.     There are also some validation settings that can be applied:       Parameter  Data type  Default  Description      limit  integer  None  Sets a maximum limit on the number of characters that can be entered.    case  string  None  Set to  upper  to force uppercase or  lower  to force lowercase.", 
            "title": "Entry"
        }, 
        {
            "location": "/simpleAppJar/#text", 
            "text": "An interactive widget, for capturing multi-line user input in the GUI.     .text(title, value=None) \n    A  value  is not required, but if provided will populate the text. \n    Text boxes can receive a  change  parameter. \n    Text boxes can receive  drop  data.        Parameter  Data type  Default  Description      scroll  boolean  False  Will configure this as a scrollable text area.", 
            "title": "Text"
        }, 
        {
            "location": "/simpleAppJar/#button", 
            "text": "A clickable button for triggering events.     .button(title, value=None) \n    The  value  should be a function to call when the button is pressed.        Parameter  Data type  Default  Description      image  string  None  A path to an image to show in the button.    icon  string  None  The name of an icon to show in the button.", 
            "title": "Button"
        }, 
        {
            "location": "/simpleAppJar/#link", 
            "text": "A clickable  hyperlink  to trigger events or launch webpages.     .link(title, value=None) \n    The  value  can be set to a function to call when the link is clicked, or a valid URI to open in a browser.", 
            "title": "Link"
        }, 
        {
            "location": "/simpleAppJar/#check", 
            "text": "A checkbox style widget, that can be checked/unchecked.     .check(title, value=None) \n    The  value  should be True or False, indicating if the check starts selected or not. \n    Check boxes can receive a  change  parameter.", 
            "title": "Check"
        }, 
        {
            "location": "/simpleAppJar/#radio", 
            "text": "Radio buttons are used in groups, only one of them can be checked. \nBy default, the first radio button added to a group will be selected.   .radio(title, value=None) \n    The  title  is the radio button's group. \n    The  value  is the text to display next to this radio button. \n    Radio buttons can receive a  change  parameter, it will be linked to all radio buttons of the same  title .        Parameter  Data type  Default  Description      selected  boolean  False  Should this radio be selected?", 
            "title": "Radio"
        }, 
        {
            "location": "/simpleAppJar/#option", 
            "text": "When clicked, displays a drop-down of items, one of which can be selected.     .option(title, value=None) \n    The  value  should contain a list of items to display in the drop-down. \n    Options can receive a  change  parameter.        Parameter  Data type  Default  Description      kind  string  standard  Set this to  ticks  if you want tickable options.    selected  string/integer  None  Start with the specified item/position selected.", 
            "title": "Option"
        }, 
        {
            "location": "/simpleAppJar/#spin", 
            "text": "Shows a single value, with arrows to scroll up or down, allowing the user to change the value.     .spin(title, value=None, endValue=None) \n    If only the  value  is set, it should be a list of values to display in the spin box. \n    If  endValue  is also set, then both parameters should be integers, and appJar will generate a range of whole numbers between the two values. \n    Spin boxes can receive a  change  parameter.        Parameter  Data type  Default  Description      endValue  integer  None  If specified, value   endValue should be integers, and will be used to generate a range.    pos  integer  0  The position of an item to select.    item  string  None  The name of an item to select.", 
            "title": "Spin"
        }, 
        {
            "location": "/simpleAppJar/#listbox", 
            "text": "Displays a list of items, one (or more than one) of which can be selected.     .listbox(title, value=None) \n    The  value  should contain a list of items to display in the listbox. \n    Listboxes can receive a  change  parameter. \n    Listboxes can receive  drop  data.        Parameter  Data type  Default  Description      rows  integer  None  Specifies how many rows to display in the listbox.    multi  boolean  False  Set the listbox to be multi-selectable.    group  boolean  False  Set the listbox to be part of a group.", 
            "title": "Listbox"
        }, 
        {
            "location": "/simpleAppJar/#slider", 
            "text": "A draggable widget, where the user can select a number from a range.     .slider(title, value=None) \n    The  value  is optional - it will set the starting position of the slider. \n    Sliders can receive a  change  parameter.        Parameter  Data type  Default  Description      direction  string  horizontal  Set the direction of the slider:  vertical  or  horizontal .    show  boolean  False  Show the slider's value above the slider.    increment  integer  10  Configures how much the slider jumps, when the trough is clicked.    interval  integer  None  Configures the slider to show interval values, along its length. In steps of the value specified.", 
            "title": "Slider"
        }, 
        {
            "location": "/simpleAppJar/#meter", 
            "text": "Various styles of progress meter.     .meter(title, value=None) \n    For  standard  and  split  meters  value  should be a number between 0 and 100. \n    For  dual  meters,  value  should be a list of two numbers, each between 0 and 100.        Parameter  Data type  Default  Description      text  string  None  Set text to show on the meter.    kind  string  standard  Choose the kind of meter:  standard ,  split  or  dual .    fill  boolean  None  Set the fill colour(s) for the slider (a list of two colours for  split     dual ).", 
            "title": "Meter"
        }, 
        {
            "location": "/simpleAppJar/#grip", 
            "text": "Displays a draggable icon, which allows the GUI to be moved.     .grip(title, value=None) \n    A  value  is not required.", 
            "title": "Grip"
        }, 
        {
            "location": "/simpleAppJar/#separator", 
            "text": "Displays a line, giving visual separation in the GUI.     .separator(title, value=None) \n    A  value  is not required.        Parameter  Data type  Default  Description      direction  string  horizontal  Set the orientation of the separator:  horizontal  or  vertical .", 
            "title": "Separator"
        }, 
        {
            "location": "/simpleAppJar/#image", 
            "text": "Displays a picture.     .image(title, value=None) \n    The  value  should be the image file, icon or data to show. \n    Images can receive a  submit  parameter, making them clickable. \n    Images can receive  drop  data.        Parameter  Data type  Default  Description      kind  string  standard  The kind of image, one of:  icon ,  data  or  standard .    fmt  string  None  If the  kind  is  data  this will be used to determine the file type.    compound  string  None  Can be set to a position to show the title as well ( top ,  bottom ,  left ,  right  or  center ).    speed  integer  None  If this is an animated image, the FPS to animate the image at.    over  string  None  The path to an alternative image to show, when the mouse goes over the image.    map  dictionary  None  A dictionary of name:coordinates to use as an image map.  submit  must also be set.", 
            "title": "Image"
        }, 
        {
            "location": "/simpleAppJar/#properties", 
            "text": "Displays a list of checkboxes, stored in a dictionary.     .properties(title, value=None) \n    The  value  should contain a dictionary of names and booleans. \n    Properties can receive a  change  parameter.", 
            "title": "Properties"
        }, 
        {
            "location": "/simpleAppJar/#date", 
            "text": "Displays a simple date picker widget.     .date(title, value=None) \n    The  value  should contain a date object. \n    Date pickers can receive a  change  parameter.", 
            "title": "Date"
        }, 
        {
            "location": "/simpleAppJar/#canvas", 
            "text": "Displays a the canvas widget.     .canvas(title) \n    Creates a canvas with the specified title.", 
            "title": "Canvas"
        }, 
        {
            "location": "/simpleAppJar/#popup", 
            "text": "Displays a popUp.     .popUp(title, message, kind=\"info\", parent=None) \n    This will show any of the available popUps.  title   will be displayed in the title bar.\n     message  will be displayed as the text of the popUp.  kind  defaults to  info , but can be any of:  error ,  warning ,  yesno ,  question ,  ok ,  retry ,  string ,  integer ,  float ,  text  or  number .  parent  allows you to link this popUp to a named SubWindow, instead of the main window.", 
            "title": "PopUp"
        }, 
        {
            "location": "/simpleAppJar/#statusbar", 
            "text": ".statusbar(**kwargs) \n    Functions to show or update a statusbar. \n    It will add a statusbar if none exists, with the following parameters:     header  this will set a piece of text to put before any messages.    fields  this will set the number of fields to show in the statusbar.    side  this will set whether to show the fields on the  LEFT ,  RIGHT , or the default  stretched .    text  text to put in the first field.       .statusbar(**kwargs) \n    Or, update the statusbar if one does exist:     text  text to put in the field.    field  the field numberis applicable.", 
            "title": "Statusbar"
        }, 
        {
            "location": "/pythonBars/", 
            "text": "Toolbars, Menubars \n Statusbars\n\n\n\n\nToolbars and Menubars are features common to most GUIs, you'll be used to seeing them along the top of apps, such as MS Word.\n\nStatusbars are also useful features, they allow you to show information about what's going on in a GUI, usually along the bottom of the app.  \n\n\nToolbar\n\n\n\n\nToolbars (sometimes known as ribbons) appear across the top of a GUI.\n\nThey offer a series of buttons to click, which can be used to change settings/functionality in a GUI.\n\n\nNB.\n Icons don't work in python 2.7, due to an issue showing PNG images.  \n\n\n  \n\n\ntools = [\nABOUT\n, \nREFRESH\n, \nOPEN\n, \nCLOSE\n, \nSAVE\n,\n        \nNEW\n, \nSETTINGS\n, \nPRINT\n, \nSEARCH\n, \nUNDO\n,\n        \nREDO\n, \nPREFERENCES\n, \nHOME\n, \nHELP\n, \nCALENDAR\n,\n        \nWEB\n, \nOFF\n]\n\napp.addToolbar(tools, tbFunc, findIcon=True)\n\n\n\n\nCreate Toolbars\n\n\n\n\n\n\n.addToolbar(names, funcs, findIcon=False)\n\n    Will add a list of buttons along the top, in a toolbar. Each button will call the corresponding function.\n\n    If only one function is supplied, they will all call the same function, providing the button's name as a parameter.\n\n    A set of icons is available, if \nfindIcon\n is set to True, then appJar will attempt to find an icon for each button.  \n\n\n\n\n\n\n.addToolbarButton(name, func, findIcon=False)\n\n    Adds a single button to the toolbar - see above.  \n\n\n\n\n\n\nSet Toolbars\n\n\n\n\n.setToolbarPinned(pinned=True)\n\n    Will configure the toolbar to be \npinnable\n\n    When the mouse is not over the toolbar it will minimise.  \n\n\n\n\n\n\nThe toolbar will also gain an extra button (a pin) allowing the user to configure it to be pinned or not.  \n\n\n  \n\n\n\n\n\n\n.setToolbarIcon(name, icon)\n\n    Will set an icon for the corresponding button in the toolbar.\n\n    Use the name of any of the icons in the resource folder (without the folder or file extension).  \n\n\n\n\n\n\n.setToolbarImage(name, image)\n\n    Will set an image for the corresponding button in the toolbar.  \n\n\n\n\n\n\n.setToolbarEnabled()\n \n \n.setToolbarDisabled()\n\n    Will enable/disable all buttons on the toolbar.  \n\n\n\n\n\n\n.setToolbarButtonEnabled(name)\n \n \n.setToolbarButtonDisabled(name)\n\n    Will enable/disable the named toolbar button.  \n\n\n\n\n\n\n.showToolbar()\n \n \n.hideToolbar()\n\n    Will show/hide the toolbar.  \n\n\n\n\n\n\n.removeToolbarButton(name, hide=True)\n\n    Will remove the named button from the toolbar.\n\n    The toolbar will be hidden when there are no buttons on it, unless \nhide\n is set to False.  \n\n\n\n\n\n\n.removeToolbar(hide=True)\n\n    Will remove all buttons from the toolbar.\n\n    The empty toolbar will be hidden, unless \nhide\n is set to False.  \n\n\n\n\n\n\n\n\n\n\nAdvertisement\nwhy?\n\n\n\n\n\n\n(adsbygoogle = window.adsbygoogle || []).push({});\n\n\n\n\n\n\nMenubar\n\n\n\n\nAdds a standard Menubar along the top of the GUI.\n\nOn Windows/Linux a menubar will only be shown, once the first menu has been added.\n\nOn Mac, a menubar is always present.\n\nMenubars are made up of a series of menus, each containing a list of names.\n\nThese names can be menu-items, radio buttons, check boxes, separators, or sub-menus.  \n\n\nCreate Menus\n\n\n\n\n.addMenuList(menu, names, functions)\n\n    Will create a new menu, with the specified title, containing the list of names.\n\n    Pass a single function - all names will call that function, passing their name.\n\n    Or a list of functions (the same length as the names), each menu will call the corresponding function.\n\n    If a name is \n-\n, then a separator will be added to the menu.  \n\n\n\n\n    \n\n\nfileMenus = [\nOpen\n, \nSave\n, \nSave as...\n, \n-\n, \nExport\n, \nPrint\n, \n-\n, \nClose\n]\napp.addMenuList(\nFile\n, fileMenus, menuPress)\n\n\n\n\n\n\n\n\n.createMenu(menu, tearable=False)\n\n    Will create a new, empty menu, to add menu-items to.\n\n\n\n\n\n\n.addMenuItem(menu, name, func=None, shortcut=None, underline=-1)\n\n    Add a menu-item to the named menu, with the specified function.\n\n    If the named menu does not exist, it will be automatically created.\n\n    If the name is \n-\n, then a separator will be added to the menu.  \n\n\n\n\n\n\n.addMenuSeparator(menu)\n\n    Add a separator to the named menu.  \n\n\n\n\n\n\n.addMenuCheckBox(menu, name, function=None, shortcut=None, underline=-1)\n\n    Add a check box, to the named menu, with the specified name.  \n\n\n\n\n\n\n.addMenuRadioButton(menu, name, value, function=None, shortcut=None, underline=-1)\n\n    Add a radio button, to the named menu, grouped by name, with the specified value.  \n\n\n\n\n\n\n\n\napp.createMenu(\nConfig\n)\n\nfor i in range(5):\n    app.addMenuRadioButton(\nConfig\n, \nfont\n, \n1\n + str(i), menuPress)\n\napp.addMenuSeparator(\nConfig\n)\n\nfor i in range(5):\n    app.addMenuCheckBox(\nConfig\n, \nSize 1\n + str(i), menuPress)\n\n\n\n\n\n\n.addSubMenu(menu, subMenu)\n\n    Adds a sub-menu to the specified menu.\n\n    Then add menu-items to this menu (using its name).  \n\n\n\n\n\n\napp.createMenu(\nConfig\n)\napp.addSubMenu(\nConfig\n, \nFont Size\n)\nfor i in range(5):\n    app.addMenuRadioButton(\nFont Size\n, \nfont\n, \n1\n + str(i), menuPress)\n\n\n\n\n\n\n\n.addMenu(menu, function, shortcut=None, underline=-1)\n\n    Adds a single menu, with no list of menu-items,  that will call the specified function.  \n\n\n\n\nSet Menus\n\n\n\n\n\n\n.setMenuCheckBox(menu, name)\n\n    Inverts the specified check box, in the named menu.\n\n\n\n\n\n\n.setMenuRadioButton(menu, name, value)\n\n    Selects the specified value, of the specified radio button, in the named menu.\n\n\n\n\n\n\n.setMenuImage(menu, name, image, align='text')\n\n    Will set the specified image for the specified menu-item.  \n\n\n\n\n\n\n.setMenuIcon(menu, name, icon, align='text')\n\n    Will set the specified icon for the specified menu-item.  \n\n\n\n\n\n\n.disableMenuItem(menu, name)\n \n \n.enableMenuItem(menu, name)\n\n    Will enable/disable the specified menu name.  \n\n\n\n\n\n\n.disableMenu(menu)\n \n \n.enableMenu(menu)\n\n    Will disable/enable the specified menu.  \n\n\n\n\n\n\n.disableMenubar()\n \n \n.enableMenubar()\n\n    Will disable/enable all menus.\n\n    NB. currently doesn't disable entries in default Mac menus.  \n\n\n\n\n\n\nGet Menus\n\n\n\n\n\n\n.getMenuCheckBox(menu, name)\n\n    Get the value of the specified check box, from the named menu.\n\n    Returns True or False.  \n\n\n\n\n\n\n.getMenuRadioButton(menu, name)\n\n    Get the value of the specified radio button, from the named menu.\n\n    Returns the name of the checked radio button, for this group.  \n\n\n\n\n\n\n\n\nExtra Features:\n\n\n\n\n\n\nshortcut\n These are keyboard shortcuts to call a menu-item.\n\n    These should always be a combination of \nspecial keys\n and a \nregular key\n, separated by dashes.\n\n    e.g. \n\"Control-s\"\n or \n\"Control-Shift-z\"\n\n    The following \nspecial keys\n are available: \nControl\n, \nOption\n, \nAlt\n, \nShift\n, \nCommand\n, \nMeta\n  \n\n\n\n\n\n\nunderline\n If set to an Integer, the corresponding character will be underlined.  \n\n\n\n\n\n\ntearable\n If this is set to True, it's possible to undock the menu.  \n\n\n\n\n\n\n\n\nPlatform Specific/Custom Menus\n\n\nIt's possible to interact with menus that are specific to particular platforms, or prebuilt for specific purposes.\n\nSimply use the menu names given below when adding menu-items to a menu.  \n\n\n\n\n\n\nGeneric\n  \n\n\n\n\n\n\nRight-click Menu\n\n    Call \n.createRightClickMenu(menu, showInBar=False)\n to create an empty \nright-click menu\n \n\n    If \nshowInBar\n is set to \nTrue\n, the Menu will also appear in the topLevel Menubar.\n\n    The right-click menu can be populated the same way as a regular menu.  \n\n\nTo link the \nright-click menu\n to a widget, call \n.setXXXRightClick(widgetName, menu)\n  \n\n\n\n\n\n\nEdit Menu\n - \nEDIT\n provides a right-click, \ncut \n paste\n menu automatically linked to all \ntext\n, \nentry\n \n \noption boxes\n.\n\n    Call \n.addMenuEdit(inMenuBar=False)\n to enable the \nEdit\n menu.\n\n    Set the parameter to True, to also show it in the menu bar.\n\n    This menu does its best to show the appropriate options, for all situations - but doesn't know when you can't \nredo\n an action.  \n\n\n\n\n\n\n\n\n\n\nWindows\n  \n\n\n\n\nSystem Menu\n - \nWIN_SYS\n accessed by clicking the icon in the top left corner of the GUI.  \n\n\n\n\n\n\n\n\nMac\n - there are three \ndefault\n menus, each containing platform specific menus-item. \n\n    There are also a couple of menu-items the user can/should provide.  \n\n\n\n\nApplication Menu\n - \nMAC_APP\n after the Apple logo (\uf8ff), usually called \nPython\n.\n\n    This menu is always present, and cannot be renamed - no matter how much I wish it could!\n\n    Call \n.addMenuPreferences(function)\n to enable the \nPreferences\n menu-item, within the \nApplication Menu\n.  \n\n\nWindow Menu\n - \nMAC_WIN\n contains menu-items related to windows. \n\n    To access this menu, you must first call \n.addMenuWindow()\n  \n\n\nHelp Menu\n - \nMAC_HELP\n provides a \nSearch\n menu-item \n\n    To access this menu, you must first call \n.addMenuHelp(function)\n, passing the function to call for the default \nPython Help\n menu-item.  \n\n\n\n\n\n\n\n\nLinux\n - by default, there is no menu, but it's easy enough to get access to the appJar menus:\n\n\n\n\n\n\n  \n\n\napp.addMenuItem(\nappJar\n, \nHelp\n, app.appJarHelp)\napp.addMenuItem(\nappJar\n, \nAbout\n, app.appJarAbout)\n\n\n\n\nStatusbar\n\n\n\n\nAdds a statusbar along the bottom of the GUI.\nThis can be used for easy debugging, as info for the user, or to show current settings.  \n\n\n  \n\n\napp.addStatusbar(fields=3)\napp.setStatusbar(\nLine: 20\n, 0)\napp.setStatusbar(\nColumn: 4\n, 1)\napp.setStatusbar(\nMode: Edit\n, 2)\n\n\n\n\n  \n\n\napp.addToolbar(tools, tbFunc, True)\napp.addStatusbar(fields=3, side=\nRIGHT\n)\n# NOTE: 0 is now on the right\napp.setStatusbarWidth(50, 2)\napp.setStatusbarBg(\nred\n, 2)\napp.setStatusbarFg(\nwhite\n, 2)\n\n\n\n\nCreate Statusbars\n\n\n\n\n.addStatusbar(header=\"\", fields=1, side=None)\n\n    This turns the statusbar on, and if a header is supplied, will prepend the header before every status.\n\n    If \nfields\n is populated, it's possible to have multiple status boxes, each addressable by a number.\n\n\nside\n can be set as LEFT/RIGHT to make the fields appear from the left or right side, otherwise they will stretch equally.  \n\n\n\n\nSet Statusbars\n\n\n\n\n\n\n.setStatusbar(text, field=0)\n\n    This updates the contents of the statusbar.\n\n    Again, if a header was set when adding the statusbar, it will be prepended to the message.\n\n    If multiple fields were created, a position should be supplied to populate (starting from 0).  \n\n\n\n\n\n\n.clearStatusbar(field=0)\n\n    Clear anything displayed in the statusbar, along with any header that might be set.\n\n    If multiple fields were created, specify which one, otherwise all fields will be cleared.  \n\n\n\n\n\n\n.setStatusbarWidth(width, field=0)\n\n    Set the width of the specified statusbar field (in characters).  \n\n\n\n\n\n\n.setStatusbarHeader(header)\n\n    Set a new header value to be used from the next time the statusbar text is updated.  \n\n\n\n\n\n\n.removeStatusbarField(field)\n\n    Remove the field at the specified position from the the statusbar.  \n\n\n\n\n\n\n.removeStatusbar()\n\n    Removes the statusbar from the GUI.", 
            "title": "Bars"
        }, 
        {
            "location": "/pythonBars/#toolbars-menubars-statusbars", 
            "text": "Toolbars and Menubars are features common to most GUIs, you'll be used to seeing them along the top of apps, such as MS Word. \nStatusbars are also useful features, they allow you to show information about what's going on in a GUI, usually along the bottom of the app.", 
            "title": "Toolbars, Menubars &amp; Statusbars"
        }, 
        {
            "location": "/pythonBars/#toolbar", 
            "text": "Toolbars (sometimes known as ribbons) appear across the top of a GUI. \nThey offer a series of buttons to click, which can be used to change settings/functionality in a GUI.  NB.  Icons don't work in python 2.7, due to an issue showing PNG images.        tools = [ ABOUT ,  REFRESH ,  OPEN ,  CLOSE ,  SAVE ,\n         NEW ,  SETTINGS ,  PRINT ,  SEARCH ,  UNDO ,\n         REDO ,  PREFERENCES ,  HOME ,  HELP ,  CALENDAR ,\n         WEB ,  OFF ]\n\napp.addToolbar(tools, tbFunc, findIcon=True)", 
            "title": "Toolbar"
        }, 
        {
            "location": "/pythonBars/#create-toolbars", 
            "text": ".addToolbar(names, funcs, findIcon=False) \n    Will add a list of buttons along the top, in a toolbar. Each button will call the corresponding function. \n    If only one function is supplied, they will all call the same function, providing the button's name as a parameter. \n    A set of icons is available, if  findIcon  is set to True, then appJar will attempt to find an icon for each button.      .addToolbarButton(name, func, findIcon=False) \n    Adds a single button to the toolbar - see above.", 
            "title": "Create Toolbars"
        }, 
        {
            "location": "/pythonBars/#set-toolbars", 
            "text": ".setToolbarPinned(pinned=True) \n    Will configure the toolbar to be  pinnable \n    When the mouse is not over the toolbar it will minimise.      The toolbar will also gain an extra button (a pin) allowing the user to configure it to be pinned or not.          .setToolbarIcon(name, icon) \n    Will set an icon for the corresponding button in the toolbar. \n    Use the name of any of the icons in the resource folder (without the folder or file extension).      .setToolbarImage(name, image) \n    Will set an image for the corresponding button in the toolbar.      .setToolbarEnabled()     .setToolbarDisabled() \n    Will enable/disable all buttons on the toolbar.      .setToolbarButtonEnabled(name)     .setToolbarButtonDisabled(name) \n    Will enable/disable the named toolbar button.      .showToolbar()     .hideToolbar() \n    Will show/hide the toolbar.      .removeToolbarButton(name, hide=True) \n    Will remove the named button from the toolbar. \n    The toolbar will be hidden when there are no buttons on it, unless  hide  is set to False.      .removeToolbar(hide=True) \n    Will remove all buttons from the toolbar. \n    The empty toolbar will be hidden, unless  hide  is set to False.        Advertisement why?    (adsbygoogle = window.adsbygoogle || []).push({});", 
            "title": "Set Toolbars"
        }, 
        {
            "location": "/pythonBars/#menubar", 
            "text": "Adds a standard Menubar along the top of the GUI. \nOn Windows/Linux a menubar will only be shown, once the first menu has been added. \nOn Mac, a menubar is always present. \nMenubars are made up of a series of menus, each containing a list of names. \nThese names can be menu-items, radio buttons, check boxes, separators, or sub-menus.", 
            "title": "Menubar"
        }, 
        {
            "location": "/pythonBars/#create-menus", 
            "text": ".addMenuList(menu, names, functions) \n    Will create a new menu, with the specified title, containing the list of names. \n    Pass a single function - all names will call that function, passing their name. \n    Or a list of functions (the same length as the names), each menu will call the corresponding function. \n    If a name is  - , then a separator will be added to the menu.           fileMenus = [ Open ,  Save ,  Save as... ,  - ,  Export ,  Print ,  - ,  Close ]\napp.addMenuList( File , fileMenus, menuPress)    .createMenu(menu, tearable=False) \n    Will create a new, empty menu, to add menu-items to.    .addMenuItem(menu, name, func=None, shortcut=None, underline=-1) \n    Add a menu-item to the named menu, with the specified function. \n    If the named menu does not exist, it will be automatically created. \n    If the name is  - , then a separator will be added to the menu.      .addMenuSeparator(menu) \n    Add a separator to the named menu.      .addMenuCheckBox(menu, name, function=None, shortcut=None, underline=-1) \n    Add a check box, to the named menu, with the specified name.      .addMenuRadioButton(menu, name, value, function=None, shortcut=None, underline=-1) \n    Add a radio button, to the named menu, grouped by name, with the specified value.       app.createMenu( Config )\n\nfor i in range(5):\n    app.addMenuRadioButton( Config ,  font ,  1  + str(i), menuPress)\n\napp.addMenuSeparator( Config )\n\nfor i in range(5):\n    app.addMenuCheckBox( Config ,  Size 1  + str(i), menuPress)   .addSubMenu(menu, subMenu) \n    Adds a sub-menu to the specified menu. \n    Then add menu-items to this menu (using its name).      app.createMenu( Config )\napp.addSubMenu( Config ,  Font Size )\nfor i in range(5):\n    app.addMenuRadioButton( Font Size ,  font ,  1  + str(i), menuPress)   .addMenu(menu, function, shortcut=None, underline=-1) \n    Adds a single menu, with no list of menu-items,  that will call the specified function.", 
            "title": "Create Menus"
        }, 
        {
            "location": "/pythonBars/#set-menus", 
            "text": ".setMenuCheckBox(menu, name) \n    Inverts the specified check box, in the named menu.    .setMenuRadioButton(menu, name, value) \n    Selects the specified value, of the specified radio button, in the named menu.    .setMenuImage(menu, name, image, align='text') \n    Will set the specified image for the specified menu-item.      .setMenuIcon(menu, name, icon, align='text') \n    Will set the specified icon for the specified menu-item.      .disableMenuItem(menu, name)     .enableMenuItem(menu, name) \n    Will enable/disable the specified menu name.      .disableMenu(menu)     .enableMenu(menu) \n    Will disable/enable the specified menu.      .disableMenubar()     .enableMenubar() \n    Will disable/enable all menus. \n    NB. currently doesn't disable entries in default Mac menus.", 
            "title": "Set Menus"
        }, 
        {
            "location": "/pythonBars/#get-menus", 
            "text": ".getMenuCheckBox(menu, name) \n    Get the value of the specified check box, from the named menu. \n    Returns True or False.      .getMenuRadioButton(menu, name) \n    Get the value of the specified radio button, from the named menu. \n    Returns the name of the checked radio button, for this group.", 
            "title": "Get Menus"
        }, 
        {
            "location": "/pythonBars/#extra-features", 
            "text": "shortcut  These are keyboard shortcuts to call a menu-item. \n    These should always be a combination of  special keys  and a  regular key , separated by dashes. \n    e.g.  \"Control-s\"  or  \"Control-Shift-z\" \n    The following  special keys  are available:  Control ,  Option ,  Alt ,  Shift ,  Command ,  Meta       underline  If set to an Integer, the corresponding character will be underlined.      tearable  If this is set to True, it's possible to undock the menu.", 
            "title": "Extra Features:"
        }, 
        {
            "location": "/pythonBars/#platform-specificcustom-menus", 
            "text": "It's possible to interact with menus that are specific to particular platforms, or prebuilt for specific purposes. \nSimply use the menu names given below when adding menu-items to a menu.      Generic       Right-click Menu \n    Call  .createRightClickMenu(menu, showInBar=False)  to create an empty  right-click menu   \n    If  showInBar  is set to  True , the Menu will also appear in the topLevel Menubar. \n    The right-click menu can be populated the same way as a regular menu.    To link the  right-click menu  to a widget, call  .setXXXRightClick(widgetName, menu)       Edit Menu  -  EDIT  provides a right-click,  cut   paste  menu automatically linked to all  text ,  entry     option boxes . \n    Call  .addMenuEdit(inMenuBar=False)  to enable the  Edit  menu. \n    Set the parameter to True, to also show it in the menu bar. \n    This menu does its best to show the appropriate options, for all situations - but doesn't know when you can't  redo  an action.        Windows      System Menu  -  WIN_SYS  accessed by clicking the icon in the top left corner of the GUI.       Mac  - there are three  default  menus, each containing platform specific menus-item.  \n    There are also a couple of menu-items the user can/should provide.     Application Menu  -  MAC_APP  after the Apple logo (\uf8ff), usually called  Python . \n    This menu is always present, and cannot be renamed - no matter how much I wish it could! \n    Call  .addMenuPreferences(function)  to enable the  Preferences  menu-item, within the  Application Menu .    Window Menu  -  MAC_WIN  contains menu-items related to windows.  \n    To access this menu, you must first call  .addMenuWindow()     Help Menu  -  MAC_HELP  provides a  Search  menu-item  \n    To access this menu, you must first call  .addMenuHelp(function) , passing the function to call for the default  Python Help  menu-item.       Linux  - by default, there is no menu, but it's easy enough to get access to the appJar menus:        app.addMenuItem( appJar ,  Help , app.appJarHelp)\napp.addMenuItem( appJar ,  About , app.appJarAbout)", 
            "title": "Platform Specific/Custom Menus"
        }, 
        {
            "location": "/pythonBars/#statusbar", 
            "text": "Adds a statusbar along the bottom of the GUI.\nThis can be used for easy debugging, as info for the user, or to show current settings.        app.addStatusbar(fields=3)\napp.setStatusbar( Line: 20 , 0)\napp.setStatusbar( Column: 4 , 1)\napp.setStatusbar( Mode: Edit , 2)      app.addToolbar(tools, tbFunc, True)\napp.addStatusbar(fields=3, side= RIGHT )\n# NOTE: 0 is now on the right\napp.setStatusbarWidth(50, 2)\napp.setStatusbarBg( red , 2)\napp.setStatusbarFg( white , 2)", 
            "title": "Statusbar"
        }, 
        {
            "location": "/pythonBars/#create-statusbars", 
            "text": ".addStatusbar(header=\"\", fields=1, side=None) \n    This turns the statusbar on, and if a header is supplied, will prepend the header before every status. \n    If  fields  is populated, it's possible to have multiple status boxes, each addressable by a number.  side  can be set as LEFT/RIGHT to make the fields appear from the left or right side, otherwise they will stretch equally.", 
            "title": "Create Statusbars"
        }, 
        {
            "location": "/pythonBars/#set-statusbars", 
            "text": ".setStatusbar(text, field=0) \n    This updates the contents of the statusbar. \n    Again, if a header was set when adding the statusbar, it will be prepended to the message. \n    If multiple fields were created, a position should be supplied to populate (starting from 0).      .clearStatusbar(field=0) \n    Clear anything displayed in the statusbar, along with any header that might be set. \n    If multiple fields were created, specify which one, otherwise all fields will be cleared.      .setStatusbarWidth(width, field=0) \n    Set the width of the specified statusbar field (in characters).      .setStatusbarHeader(header) \n    Set a new header value to be used from the next time the statusbar text is updated.      .removeStatusbarField(field) \n    Remove the field at the specified position from the the statusbar.      .removeStatusbar() \n    Removes the statusbar from the GUI.", 
            "title": "Set Statusbars"
        }, 
        {
            "location": "/pythonDialogs/", 
            "text": "Pop-ups\n\n\n\n\nA number of pop-ups (aka dialogs) are available, to add a different user experience, notify the user of information, or get one off pieces of data.\n\n\nTooltips\n\n\n\n\n\n\n\n\n.set XXX Tooltip(name, value)\n\n    Sets a tooltip for the named widget, with the specified value.\n\n    The specified value will be displayed in a small pop-up, when the mouse is left over the widget.\n\n\n\n\nIf called a second time, it will update the value of the tooltip.\n\nNB. \nXXX\n must be the widget type, eg. \nLabel\n  \n\n\n\n\n\n\n.enable XXX Tooltip(name)\n \n \n.disable XXX Tooltip(name)\n\n    These will enable or disable the named tooltip.\n\n    When disabled, it will not show-up.  \n\n\n\n\n\n\n\n\n\n\nAdvertisement\nwhy?\n\n\n\n\n\n\n(adsbygoogle = window.adsbygoogle || []).push({});\n\n\n\n\n\n\nMessage Boxes\n\n\n\n\n\n\n\n\n.infoBox(title, message, parent=None)\n\n    Shows a simple information message, with an OK button.\n\n    If this dialog is being launched from a \nsubWindow\n set \nparent\n to be the name of the subWindow.\n\n\n\n\n\n\n\n\n.errorBox(title, message, parent=None)\n\n    Shows a simple error message, with an OK button.\n\n    If this dialog is being launched from a \nsubWindow\n set \nparent\n to be the name of the subWindow.\n\n\n\n\n\n\n\n\n.warningBox(title, message, parent=None)\n\n    Shows a simple warning message, with an OK message.\n\n    If this dialog is being launched from a \nsubWindow\n set \nparent\n to be the name of the subWindow.\n\n\n\n\n\n\n\n\nQuestion Boxes\n\n\n\n\n\n\n\n\n.yesNoBox(title, message, parent=None)\n\n    Shows a question, with Yes/No buttons. Returns True/False.\n\n    If this dialog is being launched from a \nsubWindow\n set \nparent\n to be the name of the subWindow.\n\n\n\n\n\n\n\n\n.questionBox(title, message, parent=None)\n\n    Shows a question, with Yes/No buttons. Returns True/False.\n\n    If this dialog is being launched from a \nsubWindow\n set \nparent\n to be the name of the subWindow.\n\n\n\n\n\n\n\n\n.okBox(title, message, parent=None)\n\n    Shows a question, with OK/Cancel buttons. Returns True/False.\n\n    If this dialog is being launched from a \nsubWindow\n set \nparent\n to be the name of the subWindow.\n\n\n\n\n\n\n\n\n.retryBox(title, message, parent=None)\n\n    Shows a question, with Cancel/Retry buttons. Returns True/False.\n\n    If this dialog is being launched from a \nsubWindow\n set \nparent\n to be the name of the subWindow.\n\n\n\n\n\n\n\n\n.stringBox(title, message, parent=None)\n\n    Shows a question requesting a text response. Returns a String, or None if Cancel pressed.\n\n    If this dialog is being launched from a \nsubWindow\n set \nparent\n to be the name of the subWindow.\n\n\n\n\n\n\n\n\n.integerBox(title, message, parent=None)\n\n    Shows a question requesting an integer response. Returns an integer, or None if Cancel pressed.\n\n    If this dialog is being launched from a \nsubWindow\n set \nparent\n to be the name of the subWindow.\n\n\n\n\n\n\n\n\n.floatBox(title, message, parent=None)\n\n    Shows a question requesting a float response. Returns a float, or None if Cancel pressed.\n\n    If this dialog is being launched from a \nsubWindow\n set \nparent\n to be the name of the subWindow.\n\n\n\n\n\n\n\n\nappJar Question Boxes\n\n\n\n\n\n\n\n\n.textBox(title, message, parent=None)\n\n    Shows a question requesting a text response. Returns a String, or None if Cancel pressed.\n\n    If this dialog is being launched from a \nsubWindow\n set \nparent\n to be the name of the subWindow.\n\n\n\n\n\n\n\n\n.numberBox(title, message, parent=None)\n\n    Shows a question requesting a numeric response. Returns a number, or None if Cancel pressed.\n\n    If this dialog is being launched from a \nsubWindow\n set \nparent\n to be the name of the subWindow.\n\n\n\n\n\n\n\n\nFile Boxes\n\n\n\n\n\n\n\n\n.openBox(title=None, dirName=None, fileTypes=None, asFile=False, parent=None)\n\n    Shows an open file dialog.\n\n    If this dialog is being launched from a \nsubWindow\n set \nparent\n to be the name of the subWindow.  \n\n\n\n\n\nVarious parameters can be provided (although they don't work on all platforms):  \n\n\n\n\ntitle\n this will set a title for the dialog  \n\n\ndirName\n this will set a starting directory, defaults to the current working directory  \n\n\nfileTypes=[('images', '*.png'), ('images', '*.jpg')]\n\nThis will set the allowed file extensions, it should be a list of tuples. They will be grouped by the name.  \n\n\nasFile\n this will determine whether a path or actual Python file object is returned, defaults to filename   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.saveBox(title=None, fileName=none, dirName=None, fileExt=\".txt\", fileTypes=None, asFile=None, parent=None)\n\n    Shows a save file dialog.\n\n    If this dialog is being launched from a \nsubWindow\n set \nparent\n to be the name of the subWindow.  \n\n\n  \n\n\nVarious parameters can be provided (although they don't work on all platforms):  \n\n\n\n\ntitle\n this will set a title for the dialog  \n\n\nfileName\n this will set a starting file name to save as  \n\n\ndirName\n this will set a starting directory, defaults to the current working directory\n\n\nfileExt\n this will set a file extension to start with  \n\n\nfileTypes=[('images', '*.png'), ('images', '*.jpg')]\n\nThis will set the allowed file extensions, it should be a list of tuples. They will be grouped by the name.  \n\n\nasFile\n this will determine whether a path or actual Python file object is returned, defaults to filename   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.directoryBox(title=None, dirName=None, parent=None)\n\n    Shows a choose directory dialog.\n\n    If this dialog is being launched from a \nsubWindow\n set \nparent\n to be the name of the subWindow.  \n\n\n  \n\n\n\n\ntitle\n this will set a title for the dialog  \n\n\ndirName\n this will set a starting directory, defaults to the current working directory  \n\n\n\n\n\n\n\n\nOther Boxes\n\n\n\n\n\n\n\n\n.colourBox(colour=\"#FF0000\", parent=None)\n\n    Shows a dialog for choosing colours.\n\n    If this dialog is being launched from a \nsubWindow\n set \nparent\n to be the name of the subWindow.  \n\n\n  \n\n\nCan be passed a colour to start with, defaults to red.", 
            "title": "Pop-ups"
        }, 
        {
            "location": "/pythonDialogs/#pop-ups", 
            "text": "A number of pop-ups (aka dialogs) are available, to add a different user experience, notify the user of information, or get one off pieces of data.", 
            "title": "Pop-ups"
        }, 
        {
            "location": "/pythonDialogs/#tooltips", 
            "text": ".set XXX Tooltip(name, value) \n    Sets a tooltip for the named widget, with the specified value. \n    The specified value will be displayed in a small pop-up, when the mouse is left over the widget.   If called a second time, it will update the value of the tooltip. \nNB.  XXX  must be the widget type, eg.  Label       .enable XXX Tooltip(name)     .disable XXX Tooltip(name) \n    These will enable or disable the named tooltip. \n    When disabled, it will not show-up.        Advertisement why?    (adsbygoogle = window.adsbygoogle || []).push({});", 
            "title": "Tooltips"
        }, 
        {
            "location": "/pythonDialogs/#message-boxes", 
            "text": ".infoBox(title, message, parent=None) \n    Shows a simple information message, with an OK button. \n    If this dialog is being launched from a  subWindow  set  parent  to be the name of the subWindow.     .errorBox(title, message, parent=None) \n    Shows a simple error message, with an OK button. \n    If this dialog is being launched from a  subWindow  set  parent  to be the name of the subWindow.     .warningBox(title, message, parent=None) \n    Shows a simple warning message, with an OK message. \n    If this dialog is being launched from a  subWindow  set  parent  to be the name of the subWindow.", 
            "title": "Message Boxes"
        }, 
        {
            "location": "/pythonDialogs/#question-boxes", 
            "text": ".yesNoBox(title, message, parent=None) \n    Shows a question, with Yes/No buttons. Returns True/False. \n    If this dialog is being launched from a  subWindow  set  parent  to be the name of the subWindow.     .questionBox(title, message, parent=None) \n    Shows a question, with Yes/No buttons. Returns True/False. \n    If this dialog is being launched from a  subWindow  set  parent  to be the name of the subWindow.     .okBox(title, message, parent=None) \n    Shows a question, with OK/Cancel buttons. Returns True/False. \n    If this dialog is being launched from a  subWindow  set  parent  to be the name of the subWindow.     .retryBox(title, message, parent=None) \n    Shows a question, with Cancel/Retry buttons. Returns True/False. \n    If this dialog is being launched from a  subWindow  set  parent  to be the name of the subWindow.     .stringBox(title, message, parent=None) \n    Shows a question requesting a text response. Returns a String, or None if Cancel pressed. \n    If this dialog is being launched from a  subWindow  set  parent  to be the name of the subWindow.     .integerBox(title, message, parent=None) \n    Shows a question requesting an integer response. Returns an integer, or None if Cancel pressed. \n    If this dialog is being launched from a  subWindow  set  parent  to be the name of the subWindow.     .floatBox(title, message, parent=None) \n    Shows a question requesting a float response. Returns a float, or None if Cancel pressed. \n    If this dialog is being launched from a  subWindow  set  parent  to be the name of the subWindow.", 
            "title": "Question Boxes"
        }, 
        {
            "location": "/pythonDialogs/#appjar-question-boxes", 
            "text": ".textBox(title, message, parent=None) \n    Shows a question requesting a text response. Returns a String, or None if Cancel pressed. \n    If this dialog is being launched from a  subWindow  set  parent  to be the name of the subWindow.     .numberBox(title, message, parent=None) \n    Shows a question requesting a numeric response. Returns a number, or None if Cancel pressed. \n    If this dialog is being launched from a  subWindow  set  parent  to be the name of the subWindow.", 
            "title": "appJar Question Boxes"
        }, 
        {
            "location": "/pythonDialogs/#file-boxes", 
            "text": ".openBox(title=None, dirName=None, fileTypes=None, asFile=False, parent=None) \n    Shows an open file dialog. \n    If this dialog is being launched from a  subWindow  set  parent  to be the name of the subWindow.     \nVarious parameters can be provided (although they don't work on all platforms):     title  this will set a title for the dialog    dirName  this will set a starting directory, defaults to the current working directory    fileTypes=[('images', '*.png'), ('images', '*.jpg')] \nThis will set the allowed file extensions, it should be a list of tuples. They will be grouped by the name.    asFile  this will determine whether a path or actual Python file object is returned, defaults to filename           .saveBox(title=None, fileName=none, dirName=None, fileExt=\".txt\", fileTypes=None, asFile=None, parent=None) \n    Shows a save file dialog. \n    If this dialog is being launched from a  subWindow  set  parent  to be the name of the subWindow.        Various parameters can be provided (although they don't work on all platforms):     title  this will set a title for the dialog    fileName  this will set a starting file name to save as    dirName  this will set a starting directory, defaults to the current working directory  fileExt  this will set a file extension to start with    fileTypes=[('images', '*.png'), ('images', '*.jpg')] \nThis will set the allowed file extensions, it should be a list of tuples. They will be grouped by the name.    asFile  this will determine whether a path or actual Python file object is returned, defaults to filename           .directoryBox(title=None, dirName=None, parent=None) \n    Shows a choose directory dialog. \n    If this dialog is being launched from a  subWindow  set  parent  to be the name of the subWindow.         title  this will set a title for the dialog    dirName  this will set a starting directory, defaults to the current working directory", 
            "title": "File Boxes"
        }, 
        {
            "location": "/pythonDialogs/#other-boxes", 
            "text": ".colourBox(colour=\"#FF0000\", parent=None) \n    Shows a dialog for choosing colours. \n    If this dialog is being launched from a  subWindow  set  parent  to be the name of the subWindow.        Can be passed a colour to start with, defaults to red.", 
            "title": "Other Boxes"
        }, 
        {
            "location": "/pythonSound/", 
            "text": "Sound\n\n\n\n\nSound is only supported in Windows, using the Winsound API.\n\nTherefore, only \n.WAV\n files will work.\n\n\nPlaying Sound Files\n\n\n\n\n\n\n\n\n.playSound(sound, wait=False)\n\n    Play the named sound file.\n\n    By default, the sound plays in the background (asynchronously), meaning the function will return immediately.\n\n    If you set \nwait=True\n the GUI will wait for the sound to finish - \nnot recommended\n, as the GUI will become unresponsive.  \n\n\n\n\n\n\nIf you want to \nwait\n for a sound to finish, use a \nthread\n. \nNB.\n this causes a few \nissues\n:  \n\n\n\n\nThreaded sounds queue up and only start when the previous threaded sound finishes.  \n\n\nTrying to play a non-threaded sound does nothing, and returns immediately.  \n\n\nTrying to stop a threaded sound won't work, but \nWILL\n cause the GUI to hang, until the sound (and any queued sounds) finishes.  \n\n\n\n\n\n\n\n\nfrom appJar import gui\n\n# this function only returns once the sound finishes \ndef blockingSound():\n    app.playSound(\nsound.wav\n, wait=True)\n    app.infoBox(\nSound\n, \nFinished sound\n)\n\n# play the sound in a thread\ndef playSound():\n    app.thread(blockingSound)\n\nwith gui(\nSOUND\n) as app:\n    app.button(\nPLAY\n, playSound)\n\n\n\n\n\n\n\n\n.stopSound()\n\n    This will stop whatever sound is currently being played.\n\n\n\n\n\n\n.loopSound(sound)\n\n    This will play the named sound in a loop, in the background.\n\n\n\n\n\n\n.setSoundLocation(location)\n\n    Set a folder for the sound files.\n\n    This will be put before the names of any sound files used.  \n\n\n\n\n\n\nPlaying Built-In Sounds\n\n\n\n\n\n\n\n\n.bell()\n\n    This will work on all platforms, playing a bell sound.  \n\n\n\n\n\n\n.soundError()\n\n    This will sound a simple error beep.\n\n\n\n\n\n\n.soundWarning()\n\n    This will sound a simple warning beep.\n\n\n\n\n\n\nPlaying Musical Notes\n\n\n\n\n\n\n\n\n.playNote(note, duration=200)\n\n\nSupport is built in for playing musical notes, using winsound.\nThe note can be a numeric frequency, or a String note.\nThe duration can be a number in milliseconds, or a String duration.\n\n\nOver 50 String notes are available, such as:\n\n\n\n\nf#1 = 46\n\n\nb7 = 3951\n\n\ng9 = 12543  \n\n\n\n\nThe following String durations are supported:\n\n\n\n\nBREVE = 2000\n\n\nSEMIBREVE = 1000\n\n\nMINIM = 500\n\n\nCROTCHET = 250\n\n\nQUAVER = 125\n\n\nSEMIQUAVER = 63\n\n\nDEMISEMIQUAVER = 32\n\n\nHEMIDEMISEMIQUAVER = 16\n\n\n\n\nThese can be accessed through the variables \ngui.NOTES\n and \ngui.DURATIONS", 
            "title": "Sounds"
        }, 
        {
            "location": "/pythonSound/#sound", 
            "text": "Sound is only supported in Windows, using the Winsound API. \nTherefore, only  .WAV  files will work.", 
            "title": "Sound"
        }, 
        {
            "location": "/pythonSound/#playing-sound-files", 
            "text": ".playSound(sound, wait=False) \n    Play the named sound file. \n    By default, the sound plays in the background (asynchronously), meaning the function will return immediately. \n    If you set  wait=True  the GUI will wait for the sound to finish -  not recommended , as the GUI will become unresponsive.      If you want to  wait  for a sound to finish, use a  thread .  NB.  this causes a few  issues :     Threaded sounds queue up and only start when the previous threaded sound finishes.    Trying to play a non-threaded sound does nothing, and returns immediately.    Trying to stop a threaded sound won't work, but  WILL  cause the GUI to hang, until the sound (and any queued sounds) finishes.       from appJar import gui\n\n# this function only returns once the sound finishes \ndef blockingSound():\n    app.playSound( sound.wav , wait=True)\n    app.infoBox( Sound ,  Finished sound )\n\n# play the sound in a thread\ndef playSound():\n    app.thread(blockingSound)\n\nwith gui( SOUND ) as app:\n    app.button( PLAY , playSound)    .stopSound() \n    This will stop whatever sound is currently being played.    .loopSound(sound) \n    This will play the named sound in a loop, in the background.    .setSoundLocation(location) \n    Set a folder for the sound files. \n    This will be put before the names of any sound files used.", 
            "title": "Playing Sound Files"
        }, 
        {
            "location": "/pythonSound/#playing-built-in-sounds", 
            "text": ".bell() \n    This will work on all platforms, playing a bell sound.      .soundError() \n    This will sound a simple error beep.    .soundWarning() \n    This will sound a simple warning beep.", 
            "title": "Playing Built-In Sounds"
        }, 
        {
            "location": "/pythonSound/#playing-musical-notes", 
            "text": ".playNote(note, duration=200)  Support is built in for playing musical notes, using winsound.\nThe note can be a numeric frequency, or a String note.\nThe duration can be a number in milliseconds, or a String duration.  Over 50 String notes are available, such as:   f#1 = 46  b7 = 3951  g9 = 12543     The following String durations are supported:   BREVE = 2000  SEMIBREVE = 1000  MINIM = 500  CROTCHET = 250  QUAVER = 125  SEMIQUAVER = 63  DEMISEMIQUAVER = 32  HEMIDEMISEMIQUAVER = 16   These can be accessed through the variables  gui.NOTES  and  gui.DURATIONS", 
            "title": "Playing Musical Notes"
        }, 
        {
            "location": "/pythonWidgetGrouping/", 
            "text": "Grouping Widgets\n\n\n\n\nThe standard way of using \nappJar\n, is simply to place all widgets into a single window.\n\nEverything is grouped into that single window, and any changes affect everything in that window.  \n\n\nIt's sometimes desirable to group widgets together within a window.\n\nOr to have multiple \npages\n of widgets.\n\nA number of options are provided to make this easier.  \n\n\nFormat\n\n\nAll of these methods work in the same way.\n\nYou call the \nstart\n function when you want to start a container, then the \nstop\n function when you're done.\n\nWhen you call \nstart\n you can pass in positional arguments like any other widget (row, column, rowspan, colspan).\n\nAny \nGUI Options\n you set, within the container, will only affect that container.  \n\n\nReopening Containers\n\n\nIf you want to dynamically add widgets to a container, once the gui has been started, you can open a specific container, perform the desired actions, then stop it again.\n\n\ndef addRows(btn):\n    count = app.getEntry(\nnumRows\n)\n    app.openTab(\ntabbedPane\n, \nDetails Tab\n) # open the required tab\n    for rowLoop in range(count):\n        # add a new label, with a unique ID\n        # make sure to put it in the right place\n        app.addLabel(\ndyn\n+str(rowLoop), \nDynamic Label\n, rowLoop+5)\n    app.stopTab()\n\n\n\n\nFrame\n\n\nA way of grouping together widgets.\n\nPosition the \nFrame\n within the grid, then position widgets inside the \nFrame\n  \n\n\n\n\nfrom appJar import gui \n\napp=gui(\nFRAME DEMO\n, \n250x150\n)\napp.setBg(\nyellow\n)\n\napp.startFrame(\nLEFT\n, row=0, column=0)\napp.setBg(\nblue\n)\napp.setSticky(\nNEW\n)\napp.setStretch(\nCOLUMN\n)\n\napp.addLabel(\nLEFT LABEL\n, \nLabel on the left 1\n)\napp.setLabelBg(\nLEFT LABEL\n, \nred\n)\napp.addLabel(\nLEFT LABEL2\n, \nLabel on the left 2\n)\napp.setLabelBg(\nLEFT LABEL2\n, \norange\n)\napp.addLabel(\nLEFT LABEL3\n, \nLabel on the left 3\n)\napp.setLabelBg(\nLEFT LABEL3\n, \nyellow\n)\napp.stopFrame()\n\napp.startFrame(\nRIGHT\n, row=0, column=1)\napp.setBg(\ngreen\n)\napp.setFg(\nwhite\n)\nfor x in range(5):\n    app.addRadioButton(\nRADIO\n, \nChoice \n + str(x))\napp.stopFrame()\n\napp.go()\n\n\n\n\n\nOr in v1.0:  \n\n\nfrom appJar import gui \n\nwith gui(\nFRAME DEMO\n, \n250x150\n, bg='yellow') as app:\n\n    with app.frame(\nLEFT\n, row=0, column=0, bg='blue', sticky='NEW', stretch='COLUMN'):\n        app.label(\nLabel on the left 1\n, bg='red')\n        app.label(\nLabel on the left 2\n, bg='orange')\n        app.label(\nLabel on the left 3\n, bg='yellow')\n\n    with app.frame(\nRIGHT\n, row=0, column=1, bg='green', fg='white'):\n        for x in range(5):\n            app.radio(\nRADIO\n, \nChoice \n + str(x))\n\n\n\n\nStart/Stop Frames\n\n\n\n\n\n\n.startFrame(name)\n \n \n.stopFrame()\n\n    Used to start and stop a \nFrame\n.  \n\n\n\n\n\n\n.openFrame(title)\n\n    Used to reopen the named \nFrame\n.  \n\n\n\n\n\n\nLabel Frame\n\n\n\n\nA way of grouping widgets into a box, with a label at the top of the box.\n\nPosition the \nLabelFrame\n within the grid, then position widgets inside the \nLabelFrame\n  \n\n\nNB.\n \nLabelFrames\n have a different \nstickiness\n to the \nappJar\n GUI - they only stick widgets to the \nw\n (left) side.\n\nIf you want your widgets to stretch across the \nLabelFrame\n, like the rest of \nappJar\n, you will need to call \napp.setSticky(\"ew\")\n after starting the \nLabelFrame\n.  \n\n\n\n\nfrom appJar import gui\n\napp=gui()\n\napp.startLabelFrame(\nLogin Details\n)\n# these only affect the labelFrame\napp.setSticky(\new\n)\napp.setFont(20)\n\napp.addLabel(\nl1\n, \nName\n, 0, 0)\napp.addEntry(\nName\n, 0, 1)\napp.addLabel(\nl2\n, \nPassword\n, 1, 0)\napp.addEntry(\nPassword\n, 1, 1)\napp.addButtons([\nSubmit\n, \nCancel\n], None, 2, 0, 2)\napp.stopLabelFrame()\n\napp.go()\n\n\n\n\nStart/Stop Label Frames\n\n\n\n\n\n\n.startLabelFrame(name, hideTitle=False)\n \n \n.stopLabelFrame()\n\n    Used to start and stop a \nLabelFrame\n\n    The specified title will be used as the label for the frame.\n\n    Set hideTitle to be True if you don;t want to show a title.  \n\n\n\n\n\n\n.openLabelFrame(title)\n\n    Used to reopen the named \nLabelFrame\n, for later modification.  \n\n\n\n\n\n\nSet Label Frames\n\n\n\n\n\n\n.setLabelFrameTitle(name, newTitle)\n\n    Used to change the label displayed in the \nLabelFrame\n.  \n\n\n\n\n\n\n.setLabelFrameAnchor(name, position)\n\n    Used to change the position of the label on the \nLabelFrame\n.\n\n    Use compass coordinates, eg. \n\"ne\"\n or \n\"sw\"\n.  \n\n\n\n\n\n\n.setSticky(coords)\n\n    By default, widgets in the frame will align on the left.\n\n    If you want to change this, specify a different \nsticky\n value.\n\n    For example, \n.setSticky(\"ew\")\n will cause the widgets to stretch to fit the width, aligning in the centre.  \n\n\n\n\n\n\nScroll Pane\n\n\n\n\nA scrollable pane, inside a frame, to contain widgets.\n\nAllows you to have more widgets than will fit on the screen, or have a smaller window than required.\n\n\n\n\nfrom appJar import gui \n\napp=gui(\nSCROLLPABE DEMO\n, \n150x150\n)\n\napp.startScrollPane(\nPANE\n)\nfor x in range(10):\n    for y in range(10):\n        name = str(x) + \n-\n + str(y)\n        app.addLabel(name, name, row=x, column=y)\n        app.setLabelBg(name, app.RANDOM_COLOUR())\napp.stopScrollPane()\n\napp.go()\n\n\n\n\nScrolling\n\n\nThe \nScrollPane\n has been configured to allow scrolling through lots of different methods:  \n\n\n\n\nOn Mac \n Windows horizontal \n vertical scroll events (generated by amouse/trackpad) will work as normal.  \n\n\nOn Linux horizontal scroll events will work, \nSHIFT\n horizontal scroll events will scroll vertically.  \n\n\nThe following key presses will also work:  \n\n\nUp\n \n \nDown\n: Move up or down the equivalent of a line  \n\n\nLeft\n \n \nRight\n: Move left or right the equivalent of a line  \n\n\nPageUp\n \n \nPageDown\n: Move up or down the equivalent of a page  \n\n\nCtrl\nPageUp\n \n \nCtrl\nPageDown\n: Move left or right the equivalent of a page  \n\n\nCtrl\nUp\n \n \nCtrl\nDown\n: Move up or down the equivalent of a page  \n\n\nCtrl\nLeft\n \n \nCtrl\nRight\n: Move left or right the equivalent of a page   \n\n\nHome\n \n \nEnd\n: Move to the top or bottom  \n\n\nCtrl\nHome\n \n \nCtrl\nEnd\n: Move to the far-left or the far-right  \n\n\n\n\n\n\n\n\nStart/Stop Scroll Panes\n\n\n\n\n\n\n.startScrollPane(title)\n \n \n.stopScrollPane()\n\n    Used to start and stop the \nScrollPane\n.\n\n    Pass a \ndisabled\n parameter of \nhorizontal\n or \nvertical\n to disable one of the scrollbars.  \n\n\n\n\n\n\n.openScrollPane(title)\n\n    Used to reopen the named \nScrollPane\n, for later modification.  \n\n\n\n\n\n\nToggle Frame\n\n\n\n\nA collapsible container for a group of related widgets.\n\nBy default, the contents of the frame are hidden.\n\nThey can be revealed/hidden again by clicking an associated button.\n\n\n\n\n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(20)\n\napp.startToggleFrame(\nOptions\n)\napp.addCheckBox(\nShow this\n)\napp.addCheckBox(\nShow that\n)\napp.addCheckBox(\nShow the other\n)\napp.setCheckBox(\nShow that\n)\napp.stopToggleFrame()\n\napp.go()\n\n\n\n\nStart/Stop Toggle Frames\n\n\n\n\n\n\n.startToggleFrame(title)\n \n \n.stopToggleFrame(title)\n\n    Used to start and stop a \nToggleFrame\n.\n\n    The \ntitle\n will be used as the title for the \nToggleFrame\n.  \n\n\n\n\n\n\n.openToggleFrame(title)\n\n    Used to reopen the named \nToggleFrame\n.  \n\n\n\n\n\n\nSet Toggle Frames\n\n\n\n\n\n\n.setToggleFrameText(title, newText)\n\n    Will update the text displayed in the \nToggleFrame\n.  \n\n\n\n\n\n\n.toggleToggleFrame(title)\n\n    Will toggle the state of the specified \nToggleFrame\n.  \n\n\n\n\n\n\n.disableToggleFrame(title, disabled=True)\n\n    Will disable the specified \nToggleFrame\n.\n\n    If \ndisabled\n is set to False, the \nToggleFrame\n will be re-enabled.  \n\n\n\n\n\n\nGet Toggle Frames\n\n\n\n\n.getToggleFrameState(title)\n\n    Will return True if the \nToggleFrame\n is open, else will return False.  \n\n\n\n\nTabbed Frame\n\n\n\n\nA way to create a (basic) tabbed-style interface.\n\nPosition the \nTabbedFrame\n within the grid, start a \nTab\n, then position widgets inside the \nTab\n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\n\napp.startTabbedFrame(\nTabbedFrame\n)\napp.startTab(\nTab1\n)\napp.addLabel(\nl1\n, \nTab 1 Label\n)\napp.stopTab()\n\napp.startTab(\nTab2\n)\napp.addLabel(\nl2\n, \nTab 2 Label\n)\napp.stopTab()\n\napp.startTab(\nTab3\n)\napp.addLabel(\nl3\n, \nTab 3 Label\n)\napp.stopTab()\napp.stopTabbedFrame()\n\napp.go()\n\n\n\n\nStart/Stop Tabbed Frames\n\n\n\n\n\n\n.startTabbedFrame(name)\n \n \n.stopTabbedFrame()\n\n    Used to start \n stop a \nTabbedFrame\n, with the specified name.  \n\n\n\n\n\n\n.startTab(name)\n \n \n.stopTab()\n\n    Used to start and stop each of the tabs in the \nTabbedFrame\n.\n\n    The title for the tab will be the specified \nname\n.  \n\n\n\n\n\n\n.openTabbedFrame(title)\n \n \n.openTab(frameTitle, tabTitle)\n\n    Used to reopen the named \nTabbedFrame\n or named \nTab\n.  \n\n\n\n\n\n\nSet TabbedFrame\n\n\n\n\n\n\n.setTabText(title, tab, newText=None)\n\n    Change the text of the named tab in the specified \nTabbedFrame\n.\n\n    If no \nnewText\n is provided, the tab will revert back to its original text.  \n\n\n\n\n\n\n.setTabbedFrameTabExpand(title, expand=True)\n\n    By default, the tabs take up the minimum amount of space necessary.\n\n    Set this to True, to have the tabs fill the entire row.\n\n\n  \n\n\n\n\n\n\n.setTabbedFrameSelectedTab(title, tab)\n\n    Select the specified tab in the TabbedFrame.  \n\n\n\n\n\n\n.setTabbedFrameDisabledTab(title, tab, disabled=True)\n\n    Disable the specified tab in the TabbedFrame.\n\n    Set disabled to False to re-enable it.\n\n    This will also change the displayed tab, if the displayed tab is being disabled.  \n\n\n\n\n\n\n.setTabbedFrameDisableAllTabs(title, disabled=True)\n\n    Will disable all tabs for the named TabFrame.\n\n    Or, enable them if disabled is set to False.  \n\n\n\n\n\n\nChanging Colours\n\n\nTabbedFrames have a set of colours that can be changed:  \n\n\n\n\nActiveFg\n - Sets the colour of the text in the active tab  \n\n\nActiveBg\n - Sets the background colour of the active tab  \n\n\nInactiveFg\n - Sets the colour of the text in all inactive tabs  \n\n\nInactiveBg\n - Sets the background colour of all inactive tabs  \n\n\nDisabledFg\n - Sets the colour of the text in all disabled tabs  \n\n\nDisabledBg\n - Sets the background colour of all disabled tabs  \n\n\nBg\n - Sets the background colour behind the widget - only visible at the end of the tabs  \n\n\n\n\nThese are all changed via the standard property changing functions, eg:  \n\n\n\n\n.setTabbedFrameBg(\"t1\", \"red\")\n\n\n.setTabbedFrameActiveBg(\"t1\", \"yellow\")\n\n\n\n\nIt is also possible to change the colour of individual panes.\n\nCall \n.setBg(\"colour\")\n while adding widgets to the specific pane.\n\nOr \n.setTabBg(title, tab, 'colour')\n at other times.  \n\n\nGet TabbedFrame\n\n\n\n\n.getTabbedFrameSelectedTab(title)\n\n    Gets the name of the currently selected tab, for the named TabFrame.  \n\n\n\n\nPaned Frame\n\n\n\n\nA way to present re-sizable panes, separated by drag-bars.\n\nOnce the first pane is placed, all additional panes should be placed inside it.\n\nBy default, panes will be placed side-by-side (horizontally).\n\nThis can be changed by setting the pane to vertical, then they'll be placed underneath each other.  \n\n\nStart/Stop Paned Frames\n\n\n\n\n\n\n.startPanedFrame(name)\n, \n.startPanedFrameVertical(name)\n \n \n.stopPanedFrame()\n\n    Used to start \n stop \nPanedFrames\n, with the specified name.\n\n    By default, any panes added to this pane will be added side-by-side (horizontally).\n\n    Starting a vertical pane will cause additional panes to be stacked on top of each other.  \n\n\n\n\n\n\n.openPanedFrame(title)\n\n    Used to reopen the named \nPanedFrame\n.  \n\n\n\n\n\n\nHorizontal Pane Layout\n\n\n  \n\n\n\n\nStart an initial pane  \n\n\nStart all additional panes inside the initial pane  \n\n\n\n\nfrom appJar import gui\napp = gui()\n\n# start initial pane\napp.startPanedFrame(\np1\n)\napp.addLabel(\nl1\n, \nInside Pane 1\n)\n\n# start additional panes inside initial pane\napp.startPanedFrame(\np2\n)\napp.addLabel(\nl2\n, \nInside Pane 2\n)\napp.stopPanedFrame()\n\napp.startPanedFrame(\np3\n)\napp.addLabel(\nl3\n, \nInside Pane 3\n)\napp.stopPanedFrame()\n\n# stop initial pane\napp.stopPanedFrame()\n\napp.go()\n\n\n\n\nVertical Pane Layout\n\n\n  \n\n\n\n\nStart an initial, vertical pane  \n\n\nStart all additional panes inside the initial pane  \n\n\n\n\nfrom appJar import gui\napp = gui()\n\n# start initial, vertical pane\napp.startPanedFrameVertical(\np1\n)\napp.addLabel(\nl1\n, \nInside Pane 1\n)\n\n# start additional panes inside initial pane\napp.startPanedFrame(\np2\n)\napp.addLabel(\nl2\n, \nInside Pane 2\n)\napp.stopPanedFrame()\n\napp.startPanedFrame(\np3\n)\napp.addLabel(\nl3\n, \nInside Pane 3\n)\napp.stopPanedFrame()\n\n# stop initial pane\napp.stopPanedFrame()\n\napp.go()\n\n\n\n\nE-Pane Layout\n\n\n  \n\n\n\n\nStart an initial pane  \n\n\nStart a second, vertical pane inside the initial pane  \n\n\nStart all additional panes inside the second pane  \n\n\n\n\nfrom appJar import gui\napp = gui()\n\n# start initial pane\napp.startPanedFrame(\np1\n)\napp.addLabel(\nl1\n, \nInside Pane 1\n)\n\n# start second, vertical pane inside initial pane\napp.startPanedFrameVertical(\np2\n)\napp.addLabel(\nl2\n, \nInside Pane 2\n)\n\n# start additional panes inside second pane\napp.startPanedFrame(\np3\n)\napp.addLabel(\nl3\n, \nInside Pane 3\n)\napp.stopPanedFrame()\n\n# stop second \n initial panes\napp.stopPanedFrame()\napp.stopPanedFrame()\n\napp.go()\n\n\n\n\nT-Pane Layout\n\n\n  \n\n\n\n\nStart an initial, vertical pane  \n\n\nStart a second pane, inside the initial pane  \n\n\nStart additional panes inside the second pane  \n\n\n\n\nfrom appJar import gui\napp = gui()\n\n# start intial, vertical pane\napp.startPanedFrameVertical(\np1\n)\napp.addLabel(\nl1\n, \nInside Pane 1\n)\n\n# start second pane\napp.startPanedFrame(\np2\n)\napp.addLabel(\nl2\n, \nInside Pane 2\n)\n\n# start additional panes inside second pane \napp.startPanedFrame(\np3\n)\napp.addLabel(\nl3\n, \nInside Pane 3\n)\napp.stopPanedFrame()\n\n# stop second \n initial panes\napp.stopPanedFrame()\napp.stopPanedFrame()\n\napp.go()\n\n\n\n\nPaged Window\n\n\n\n\nA container that mimics a classic phone based interface.\n\nIt provides \nPREVIOUS\n/\nNEXT\n buttons to navigate through a series of pages.\n\nIt has an optional widget title, and shows the current page, in a page counter.\n\nKeyboard bindings are provided to navigate with arrow key presses. CTRL-arrow will navigate to the beginning/end.\n\nEvents can be bound to page changes, the page can be changed via a function call, and the current page number can be queried.\n\n\n\n\nfrom appJar import gui\n\napp=gui()\n\napp.setBg(\nDarkKhaki\n)\napp.setGeometry(280,400)\n\napp.startPagedWindow(\nMain Title\n)\napp.startPage()\napp.addLabel(\nl13\n, \nLabel 1\n)\napp.stopPage()\n\napp.startPage()\napp.addLabel(\nl21\n, \nLabel 2\n)\napp.stopPage()\n\napp.startPage()\napp.addLabel(\nl3\n, \nLabel 3\n)\napp.stopPage()\n\napp.startPage()\napp.addLabel(\nl4\n, \nLabel 4\n)\napp.stopPage()\napp.stopPagedWindow()\n\napp.go()\n\n\n\n\nStart/Stop Paged Windows\n\n\n\n\n\n\n.startPagedWindow(title)\n \n \n.stopPagedWindow()\n\n    Used to start and stop a \nPagedWindow\n.\n\n    The \ntitle\n will be used in the title section of the widget.  \n\n\n\n\n\n\n.startPage()\n \n \n.stopPage()\n\n    Used to start and stop each new page.\n\n    Navigation, page count, etc are all dealt with automatically.  \n\n\n\n\n\n\n.openPagedWindow(title)\n \n \n.openPage(windowTitle, pageNumber)\n \n\n    Used to reopen the named \nPagedWindow\n or \nPage\n.\n\n\nNB.\n \npageNumber\n must be an integer, starting at 1 for the first page.  \n\n\n\n\n\n\nSet Paged Windows\n\n\n\n\n\n\n.setPagedWindowTitle(title, title)\n \n \n.setPagedWindowButtons(title, [buttons])\n\n    Used to change the text in the title and buttons.\n\n    When changing the buttons, two values must be passed in: previous/next.  \n\n\n\n\n\n\n.setPagedWindowButtonsTop(title, top=True)\n\n    Used to position the navigation buttons.  By default, they are at the bottom.\n\n    Call this function to move them to the top.  \n\n\n\n\n\n\n.setPagedWindowPage(title, pageNum)\n\n    Used to display the selected page.  \n\n\n\n\n\n\n.setPagedWindowFunction(title, function)\n\n    Declare a function to call, each time the page is changed.  \n\n\n\n\n\n\n.showPagedWindowPageNumber(title, show=True)\n \n \n.showPagedWindowTitle(title, show=True)\n\n    Use these to declare if you want the page title, page numbers to be shown.  \n\n\n\n\n\n\nGet Paged Windows\n\n\n\n\n.getPagedWindowPageNumber(title)\n\n    Used to get the page number currently being shown.  \n\n\n\n\nSub Window\n\n\n\n\nA way to add additional windows, which can be hidden and shown.\n\n\n\n\nThis has been moved to its own page: \nMultiple Windows\n.", 
            "title": "Grouping Widgets"
        }, 
        {
            "location": "/pythonWidgetGrouping/#grouping-widgets", 
            "text": "The standard way of using  appJar , is simply to place all widgets into a single window. \nEverything is grouped into that single window, and any changes affect everything in that window.    It's sometimes desirable to group widgets together within a window. \nOr to have multiple  pages  of widgets. \nA number of options are provided to make this easier.", 
            "title": "Grouping Widgets"
        }, 
        {
            "location": "/pythonWidgetGrouping/#format", 
            "text": "All of these methods work in the same way. \nYou call the  start  function when you want to start a container, then the  stop  function when you're done. \nWhen you call  start  you can pass in positional arguments like any other widget (row, column, rowspan, colspan). \nAny  GUI Options  you set, within the container, will only affect that container.", 
            "title": "Format"
        }, 
        {
            "location": "/pythonWidgetGrouping/#reopening-containers", 
            "text": "If you want to dynamically add widgets to a container, once the gui has been started, you can open a specific container, perform the desired actions, then stop it again.  def addRows(btn):\n    count = app.getEntry( numRows )\n    app.openTab( tabbedPane ,  Details Tab ) # open the required tab\n    for rowLoop in range(count):\n        # add a new label, with a unique ID\n        # make sure to put it in the right place\n        app.addLabel( dyn +str(rowLoop),  Dynamic Label , rowLoop+5)\n    app.stopTab()", 
            "title": "Reopening Containers"
        }, 
        {
            "location": "/pythonWidgetGrouping/#frame", 
            "text": "A way of grouping together widgets. \nPosition the  Frame  within the grid, then position widgets inside the  Frame      from appJar import gui \n\napp=gui( FRAME DEMO ,  250x150 )\napp.setBg( yellow )\n\napp.startFrame( LEFT , row=0, column=0)\napp.setBg( blue )\napp.setSticky( NEW )\napp.setStretch( COLUMN )\n\napp.addLabel( LEFT LABEL ,  Label on the left 1 )\napp.setLabelBg( LEFT LABEL ,  red )\napp.addLabel( LEFT LABEL2 ,  Label on the left 2 )\napp.setLabelBg( LEFT LABEL2 ,  orange )\napp.addLabel( LEFT LABEL3 ,  Label on the left 3 )\napp.setLabelBg( LEFT LABEL3 ,  yellow )\napp.stopFrame()\n\napp.startFrame( RIGHT , row=0, column=1)\napp.setBg( green )\napp.setFg( white )\nfor x in range(5):\n    app.addRadioButton( RADIO ,  Choice   + str(x))\napp.stopFrame()\n\napp.go()  Or in v1.0:    from appJar import gui \n\nwith gui( FRAME DEMO ,  250x150 , bg='yellow') as app:\n\n    with app.frame( LEFT , row=0, column=0, bg='blue', sticky='NEW', stretch='COLUMN'):\n        app.label( Label on the left 1 , bg='red')\n        app.label( Label on the left 2 , bg='orange')\n        app.label( Label on the left 3 , bg='yellow')\n\n    with app.frame( RIGHT , row=0, column=1, bg='green', fg='white'):\n        for x in range(5):\n            app.radio( RADIO ,  Choice   + str(x))", 
            "title": "Frame"
        }, 
        {
            "location": "/pythonWidgetGrouping/#startstop-frames", 
            "text": ".startFrame(name)     .stopFrame() \n    Used to start and stop a  Frame .      .openFrame(title) \n    Used to reopen the named  Frame .", 
            "title": "Start/Stop Frames"
        }, 
        {
            "location": "/pythonWidgetGrouping/#label-frame", 
            "text": "A way of grouping widgets into a box, with a label at the top of the box. \nPosition the  LabelFrame  within the grid, then position widgets inside the  LabelFrame     NB.   LabelFrames  have a different  stickiness  to the  appJar  GUI - they only stick widgets to the  w  (left) side. \nIf you want your widgets to stretch across the  LabelFrame , like the rest of  appJar , you will need to call  app.setSticky(\"ew\")  after starting the  LabelFrame .     from appJar import gui\n\napp=gui()\n\napp.startLabelFrame( Login Details )\n# these only affect the labelFrame\napp.setSticky( ew )\napp.setFont(20)\n\napp.addLabel( l1 ,  Name , 0, 0)\napp.addEntry( Name , 0, 1)\napp.addLabel( l2 ,  Password , 1, 0)\napp.addEntry( Password , 1, 1)\napp.addButtons([ Submit ,  Cancel ], None, 2, 0, 2)\napp.stopLabelFrame()\n\napp.go()", 
            "title": "Label Frame"
        }, 
        {
            "location": "/pythonWidgetGrouping/#startstop-label-frames", 
            "text": ".startLabelFrame(name, hideTitle=False)     .stopLabelFrame() \n    Used to start and stop a  LabelFrame \n    The specified title will be used as the label for the frame. \n    Set hideTitle to be True if you don;t want to show a title.      .openLabelFrame(title) \n    Used to reopen the named  LabelFrame , for later modification.", 
            "title": "Start/Stop Label Frames"
        }, 
        {
            "location": "/pythonWidgetGrouping/#set-label-frames", 
            "text": ".setLabelFrameTitle(name, newTitle) \n    Used to change the label displayed in the  LabelFrame .      .setLabelFrameAnchor(name, position) \n    Used to change the position of the label on the  LabelFrame . \n    Use compass coordinates, eg.  \"ne\"  or  \"sw\" .      .setSticky(coords) \n    By default, widgets in the frame will align on the left. \n    If you want to change this, specify a different  sticky  value. \n    For example,  .setSticky(\"ew\")  will cause the widgets to stretch to fit the width, aligning in the centre.", 
            "title": "Set Label Frames"
        }, 
        {
            "location": "/pythonWidgetGrouping/#scroll-pane", 
            "text": "A scrollable pane, inside a frame, to contain widgets. \nAllows you to have more widgets than will fit on the screen, or have a smaller window than required.   from appJar import gui \n\napp=gui( SCROLLPABE DEMO ,  150x150 )\n\napp.startScrollPane( PANE )\nfor x in range(10):\n    for y in range(10):\n        name = str(x) +  -  + str(y)\n        app.addLabel(name, name, row=x, column=y)\n        app.setLabelBg(name, app.RANDOM_COLOUR())\napp.stopScrollPane()\n\napp.go()", 
            "title": "Scroll Pane"
        }, 
        {
            "location": "/pythonWidgetGrouping/#scrolling", 
            "text": "The  ScrollPane  has been configured to allow scrolling through lots of different methods:     On Mac   Windows horizontal   vertical scroll events (generated by amouse/trackpad) will work as normal.    On Linux horizontal scroll events will work,  SHIFT  horizontal scroll events will scroll vertically.    The following key presses will also work:    Up     Down : Move up or down the equivalent of a line    Left     Right : Move left or right the equivalent of a line    PageUp     PageDown : Move up or down the equivalent of a page    Ctrl PageUp     Ctrl PageDown : Move left or right the equivalent of a page    Ctrl Up     Ctrl Down : Move up or down the equivalent of a page    Ctrl Left     Ctrl Right : Move left or right the equivalent of a page     Home     End : Move to the top or bottom    Ctrl Home     Ctrl End : Move to the far-left or the far-right", 
            "title": "Scrolling"
        }, 
        {
            "location": "/pythonWidgetGrouping/#startstop-scroll-panes", 
            "text": ".startScrollPane(title)     .stopScrollPane() \n    Used to start and stop the  ScrollPane . \n    Pass a  disabled  parameter of  horizontal  or  vertical  to disable one of the scrollbars.      .openScrollPane(title) \n    Used to reopen the named  ScrollPane , for later modification.", 
            "title": "Start/Stop Scroll Panes"
        }, 
        {
            "location": "/pythonWidgetGrouping/#toggle-frame", 
            "text": "A collapsible container for a group of related widgets. \nBy default, the contents of the frame are hidden. \nThey can be revealed/hidden again by clicking an associated button.    from appJar import gui\n\napp=gui()\napp.setFont(20)\n\napp.startToggleFrame( Options )\napp.addCheckBox( Show this )\napp.addCheckBox( Show that )\napp.addCheckBox( Show the other )\napp.setCheckBox( Show that )\napp.stopToggleFrame()\n\napp.go()", 
            "title": "Toggle Frame"
        }, 
        {
            "location": "/pythonWidgetGrouping/#startstop-toggle-frames", 
            "text": ".startToggleFrame(title)     .stopToggleFrame(title) \n    Used to start and stop a  ToggleFrame . \n    The  title  will be used as the title for the  ToggleFrame .      .openToggleFrame(title) \n    Used to reopen the named  ToggleFrame .", 
            "title": "Start/Stop Toggle Frames"
        }, 
        {
            "location": "/pythonWidgetGrouping/#set-toggle-frames", 
            "text": ".setToggleFrameText(title, newText) \n    Will update the text displayed in the  ToggleFrame .      .toggleToggleFrame(title) \n    Will toggle the state of the specified  ToggleFrame .      .disableToggleFrame(title, disabled=True) \n    Will disable the specified  ToggleFrame . \n    If  disabled  is set to False, the  ToggleFrame  will be re-enabled.", 
            "title": "Set Toggle Frames"
        }, 
        {
            "location": "/pythonWidgetGrouping/#get-toggle-frames", 
            "text": ".getToggleFrameState(title) \n    Will return True if the  ToggleFrame  is open, else will return False.", 
            "title": "Get Toggle Frames"
        }, 
        {
            "location": "/pythonWidgetGrouping/#tabbed-frame", 
            "text": "A way to create a (basic) tabbed-style interface. \nPosition the  TabbedFrame  within the grid, start a  Tab , then position widgets inside the  Tab      from appJar import gui\n\napp=gui()\n\napp.startTabbedFrame( TabbedFrame )\napp.startTab( Tab1 )\napp.addLabel( l1 ,  Tab 1 Label )\napp.stopTab()\n\napp.startTab( Tab2 )\napp.addLabel( l2 ,  Tab 2 Label )\napp.stopTab()\n\napp.startTab( Tab3 )\napp.addLabel( l3 ,  Tab 3 Label )\napp.stopTab()\napp.stopTabbedFrame()\n\napp.go()", 
            "title": "Tabbed Frame"
        }, 
        {
            "location": "/pythonWidgetGrouping/#startstop-tabbed-frames", 
            "text": ".startTabbedFrame(name)     .stopTabbedFrame() \n    Used to start   stop a  TabbedFrame , with the specified name.      .startTab(name)     .stopTab() \n    Used to start and stop each of the tabs in the  TabbedFrame . \n    The title for the tab will be the specified  name .      .openTabbedFrame(title)     .openTab(frameTitle, tabTitle) \n    Used to reopen the named  TabbedFrame  or named  Tab .", 
            "title": "Start/Stop Tabbed Frames"
        }, 
        {
            "location": "/pythonWidgetGrouping/#set-tabbedframe", 
            "text": ".setTabText(title, tab, newText=None) \n    Change the text of the named tab in the specified  TabbedFrame . \n    If no  newText  is provided, the tab will revert back to its original text.      .setTabbedFrameTabExpand(title, expand=True) \n    By default, the tabs take up the minimum amount of space necessary. \n    Set this to True, to have the tabs fill the entire row.        .setTabbedFrameSelectedTab(title, tab) \n    Select the specified tab in the TabbedFrame.      .setTabbedFrameDisabledTab(title, tab, disabled=True) \n    Disable the specified tab in the TabbedFrame. \n    Set disabled to False to re-enable it. \n    This will also change the displayed tab, if the displayed tab is being disabled.      .setTabbedFrameDisableAllTabs(title, disabled=True) \n    Will disable all tabs for the named TabFrame. \n    Or, enable them if disabled is set to False.", 
            "title": "Set TabbedFrame"
        }, 
        {
            "location": "/pythonWidgetGrouping/#changing-colours", 
            "text": "TabbedFrames have a set of colours that can be changed:     ActiveFg  - Sets the colour of the text in the active tab    ActiveBg  - Sets the background colour of the active tab    InactiveFg  - Sets the colour of the text in all inactive tabs    InactiveBg  - Sets the background colour of all inactive tabs    DisabledFg  - Sets the colour of the text in all disabled tabs    DisabledBg  - Sets the background colour of all disabled tabs    Bg  - Sets the background colour behind the widget - only visible at the end of the tabs     These are all changed via the standard property changing functions, eg:     .setTabbedFrameBg(\"t1\", \"red\")  .setTabbedFrameActiveBg(\"t1\", \"yellow\")   It is also possible to change the colour of individual panes. \nCall  .setBg(\"colour\")  while adding widgets to the specific pane. \nOr  .setTabBg(title, tab, 'colour')  at other times.", 
            "title": "Changing Colours"
        }, 
        {
            "location": "/pythonWidgetGrouping/#get-tabbedframe", 
            "text": ".getTabbedFrameSelectedTab(title) \n    Gets the name of the currently selected tab, for the named TabFrame.", 
            "title": "Get TabbedFrame"
        }, 
        {
            "location": "/pythonWidgetGrouping/#paned-frame", 
            "text": "A way to present re-sizable panes, separated by drag-bars. \nOnce the first pane is placed, all additional panes should be placed inside it. \nBy default, panes will be placed side-by-side (horizontally). \nThis can be changed by setting the pane to vertical, then they'll be placed underneath each other.", 
            "title": "Paned Frame"
        }, 
        {
            "location": "/pythonWidgetGrouping/#startstop-paned-frames", 
            "text": ".startPanedFrame(name) ,  .startPanedFrameVertical(name)     .stopPanedFrame() \n    Used to start   stop  PanedFrames , with the specified name. \n    By default, any panes added to this pane will be added side-by-side (horizontally). \n    Starting a vertical pane will cause additional panes to be stacked on top of each other.      .openPanedFrame(title) \n    Used to reopen the named  PanedFrame .", 
            "title": "Start/Stop Paned Frames"
        }, 
        {
            "location": "/pythonWidgetGrouping/#horizontal-pane-layout", 
            "text": "Start an initial pane    Start all additional panes inside the initial pane     from appJar import gui\napp = gui()\n\n# start initial pane\napp.startPanedFrame( p1 )\napp.addLabel( l1 ,  Inside Pane 1 )\n\n# start additional panes inside initial pane\napp.startPanedFrame( p2 )\napp.addLabel( l2 ,  Inside Pane 2 )\napp.stopPanedFrame()\n\napp.startPanedFrame( p3 )\napp.addLabel( l3 ,  Inside Pane 3 )\napp.stopPanedFrame()\n\n# stop initial pane\napp.stopPanedFrame()\n\napp.go()", 
            "title": "Horizontal Pane Layout"
        }, 
        {
            "location": "/pythonWidgetGrouping/#vertical-pane-layout", 
            "text": "Start an initial, vertical pane    Start all additional panes inside the initial pane     from appJar import gui\napp = gui()\n\n# start initial, vertical pane\napp.startPanedFrameVertical( p1 )\napp.addLabel( l1 ,  Inside Pane 1 )\n\n# start additional panes inside initial pane\napp.startPanedFrame( p2 )\napp.addLabel( l2 ,  Inside Pane 2 )\napp.stopPanedFrame()\n\napp.startPanedFrame( p3 )\napp.addLabel( l3 ,  Inside Pane 3 )\napp.stopPanedFrame()\n\n# stop initial pane\napp.stopPanedFrame()\n\napp.go()", 
            "title": "Vertical Pane Layout"
        }, 
        {
            "location": "/pythonWidgetGrouping/#e-pane-layout", 
            "text": "Start an initial pane    Start a second, vertical pane inside the initial pane    Start all additional panes inside the second pane     from appJar import gui\napp = gui()\n\n# start initial pane\napp.startPanedFrame( p1 )\napp.addLabel( l1 ,  Inside Pane 1 )\n\n# start second, vertical pane inside initial pane\napp.startPanedFrameVertical( p2 )\napp.addLabel( l2 ,  Inside Pane 2 )\n\n# start additional panes inside second pane\napp.startPanedFrame( p3 )\napp.addLabel( l3 ,  Inside Pane 3 )\napp.stopPanedFrame()\n\n# stop second   initial panes\napp.stopPanedFrame()\napp.stopPanedFrame()\n\napp.go()", 
            "title": "E-Pane Layout"
        }, 
        {
            "location": "/pythonWidgetGrouping/#t-pane-layout", 
            "text": "Start an initial, vertical pane    Start a second pane, inside the initial pane    Start additional panes inside the second pane     from appJar import gui\napp = gui()\n\n# start intial, vertical pane\napp.startPanedFrameVertical( p1 )\napp.addLabel( l1 ,  Inside Pane 1 )\n\n# start second pane\napp.startPanedFrame( p2 )\napp.addLabel( l2 ,  Inside Pane 2 )\n\n# start additional panes inside second pane \napp.startPanedFrame( p3 )\napp.addLabel( l3 ,  Inside Pane 3 )\napp.stopPanedFrame()\n\n# stop second   initial panes\napp.stopPanedFrame()\napp.stopPanedFrame()\n\napp.go()", 
            "title": "T-Pane Layout"
        }, 
        {
            "location": "/pythonWidgetGrouping/#paged-window", 
            "text": "A container that mimics a classic phone based interface. \nIt provides  PREVIOUS / NEXT  buttons to navigate through a series of pages. \nIt has an optional widget title, and shows the current page, in a page counter. \nKeyboard bindings are provided to navigate with arrow key presses. CTRL-arrow will navigate to the beginning/end. \nEvents can be bound to page changes, the page can be changed via a function call, and the current page number can be queried.   from appJar import gui\n\napp=gui()\n\napp.setBg( DarkKhaki )\napp.setGeometry(280,400)\n\napp.startPagedWindow( Main Title )\napp.startPage()\napp.addLabel( l13 ,  Label 1 )\napp.stopPage()\n\napp.startPage()\napp.addLabel( l21 ,  Label 2 )\napp.stopPage()\n\napp.startPage()\napp.addLabel( l3 ,  Label 3 )\napp.stopPage()\n\napp.startPage()\napp.addLabel( l4 ,  Label 4 )\napp.stopPage()\napp.stopPagedWindow()\n\napp.go()", 
            "title": "Paged Window"
        }, 
        {
            "location": "/pythonWidgetGrouping/#startstop-paged-windows", 
            "text": ".startPagedWindow(title)     .stopPagedWindow() \n    Used to start and stop a  PagedWindow . \n    The  title  will be used in the title section of the widget.      .startPage()     .stopPage() \n    Used to start and stop each new page. \n    Navigation, page count, etc are all dealt with automatically.      .openPagedWindow(title)     .openPage(windowTitle, pageNumber)   \n    Used to reopen the named  PagedWindow  or  Page .  NB.   pageNumber  must be an integer, starting at 1 for the first page.", 
            "title": "Start/Stop Paged Windows"
        }, 
        {
            "location": "/pythonWidgetGrouping/#set-paged-windows", 
            "text": ".setPagedWindowTitle(title, title)     .setPagedWindowButtons(title, [buttons]) \n    Used to change the text in the title and buttons. \n    When changing the buttons, two values must be passed in: previous/next.      .setPagedWindowButtonsTop(title, top=True) \n    Used to position the navigation buttons.  By default, they are at the bottom. \n    Call this function to move them to the top.      .setPagedWindowPage(title, pageNum) \n    Used to display the selected page.      .setPagedWindowFunction(title, function) \n    Declare a function to call, each time the page is changed.      .showPagedWindowPageNumber(title, show=True)     .showPagedWindowTitle(title, show=True) \n    Use these to declare if you want the page title, page numbers to be shown.", 
            "title": "Set Paged Windows"
        }, 
        {
            "location": "/pythonWidgetGrouping/#get-paged-windows", 
            "text": ".getPagedWindowPageNumber(title) \n    Used to get the page number currently being shown.", 
            "title": "Get Paged Windows"
        }, 
        {
            "location": "/pythonWidgetGrouping/#sub-window", 
            "text": "A way to add additional windows, which can be hidden and shown.   This has been moved to its own page:  Multiple Windows .", 
            "title": "Sub Window"
        }, 
        {
            "location": "/pythonSubWindows/", 
            "text": "Sub Window\n\n\n\n\nA way to add additional windows, which can be hidden and shown.  \n\n\n\n\nfrom appJar import gui \n\ndef launch(win):\n    app.showSubWindow(win)\n\napp=gui()\n\n# these go in the main window\napp.addButtons([\none\n, \ntwo\n], launch)\n\n# this is a pop-up\napp.startSubWindow(\none\n, modal=True)\napp.addLabel(\nl1\n, \nSubWindow One\n)\napp.stopSubWindow()\n\n# this is another pop-up\napp.startSubWindow(\ntwo\n)\napp.addLabel(\nl2\n, \nSubWindow Two\n)\napp.stopSubWindow()\n\napp.go()\n\n\n\n\nDefinition of SubWindows happens in the same part of the code as the rest of the GUI, but they default to being hidden.\n\nBoth SubWindows and the main window can be \nshown\n and \nhidden\n - this is usually done through button presses.  \n\n\nStart/Stop Sub Windows\n\n\n\n\n\n\n\n\n.startSubWindow(name, title=None, modal=False, transient=False, blocking=False)\n \n \n.stopSubWindow()\n\n    Used to start and stop defining a \nSubWindow\n\n    Setting a \ntitle\n will override the \nname\n as a title for the \nSubWindow\n.\n\n    Setting \nmodal\n to True, will prevent the user from interacting with the parent window until the \nSubWindow\n is closed.\n\n    Setting \ntransient\n to True, will cause the \nSubWindow\n to respond to parent window events such as hide, show \n move.\n\n    Setting \nblocking\n to True, will stop execution of your code once the \nSubWindow\n is shown, until the user closes it.  \n\n\n\n\n\n\n.openSubWindow(title)\n\n    Used to reopen the named \nSubWindow\n.\n\n    This lets you modify SubWindows in a different part of the code, for example in a function call.  \n\n\n\n\n\n\nShow/Hide Sub Windows\n\n\n\n\n\n\n.go(startWindow=None)\n\n    If you set a \nSubWindow\n as the \nstartWindow\n \nappJar\n will start-up showing the named \nSubWindow\n.\n\n    The main window will be minimized.  \n\n\n\n\ndef login(btn):\n    app.hideSubWindow(\nLogin\n)\n    app.show()\n\napp.startSubWindow(\nLogin\n)\napp.addLabel(\nl2\n, \nLogin Window\n)\napp.addButton(\nSUBMIT\n, login)\napp.stopSubWindow()\n\napp.go(startWindow=\nLogin\n)\n\n\n\n\n\n\n\n\n.showSubWindow(title, hide=False)\n\n    Will cause the specified \nSubWindow\n to be shown.\n\n    If it is set as \nmodal\n the parent window will become uninteractive until the \nSubWindow\n is closed.\n\n    If \nhide\n is set to True, all other \nSubWindows\n will be hidden.  \n\n\n\n\n\n\n.hideSubWindow(title, useStopFunction=False)\n \n \n.confirmHideSubWindow(title)\n\n    Used to hide the specified \nSubWindow\n.\n\n    This will not destroy the \nSubWindow\n, so it can be shown again later.\n\n    By default it bypasses any \nstopFunction\n.\n\n    Set \nuseStopFunction\n to be True or call \n.confirmHideSubWindow()\n to use the \nstopFunction\n.  \n\n\n\n\n\n\n.hideAllSubWindows(useStopFunction=False)\n\n    Will hide all \nSubWindows\n.\n\n    Set \nuseStopFunction\n to be True to use the \nstopFunction\n.  \n\n\n\n\n\n\n.destroySubWindow(title)\n\n    This will hide and permanently destroy the specified \nSubWindow\n.\n\n    It cannot be shown again.  \n\n\n\n\n\n\nIt's useful to be able to create a button that stops a SubWindow:\n\nIf you define a button, that calls \n.hideSubWindow()\n or \n.destroySubWindow()\n, and give it the same name as the \nSubWindow\n, then it will hide/destroy the \nSubWindow\n, and call any associated \n.stopFunction()\n.  \n\n\napp.startSubWindow(\nDemo\n)\napp.addLabel(\nl1\n, \nPress the button to close this window\n)\n# set the button's name to match the SubWindow's name\napp.addNamedButton(\nCLOSE\n, \nDemo\n, app.hideSubWindow)\napp.stopSubWindow()\n\n\n\n\nSet Sub Windows\n\n\n\n\nNote, all functions available on the main window are also available on \nSubWindows\n.\n\nSimply call those functions after starting a \nSubWindow\n.  \n\n\napp.startSubWindow(\none\n, modal=True)\napp.setBg(\norange\n)\napp.setGeometry(\n400x400\n)\napp.setTransparency(25)\napp.setStopFunction(checkDone)\napp.addLabel(\nl1\n, \nIn sub window\n)\napp.stopSubWindow()", 
            "title": "Multiple Windows"
        }, 
        {
            "location": "/pythonSubWindows/#sub-window", 
            "text": "A way to add additional windows, which can be hidden and shown.     from appJar import gui \n\ndef launch(win):\n    app.showSubWindow(win)\n\napp=gui()\n\n# these go in the main window\napp.addButtons([ one ,  two ], launch)\n\n# this is a pop-up\napp.startSubWindow( one , modal=True)\napp.addLabel( l1 ,  SubWindow One )\napp.stopSubWindow()\n\n# this is another pop-up\napp.startSubWindow( two )\napp.addLabel( l2 ,  SubWindow Two )\napp.stopSubWindow()\n\napp.go()  Definition of SubWindows happens in the same part of the code as the rest of the GUI, but they default to being hidden. \nBoth SubWindows and the main window can be  shown  and  hidden  - this is usually done through button presses.", 
            "title": "Sub Window"
        }, 
        {
            "location": "/pythonSubWindows/#startstop-sub-windows", 
            "text": ".startSubWindow(name, title=None, modal=False, transient=False, blocking=False)     .stopSubWindow() \n    Used to start and stop defining a  SubWindow \n    Setting a  title  will override the  name  as a title for the  SubWindow . \n    Setting  modal  to True, will prevent the user from interacting with the parent window until the  SubWindow  is closed. \n    Setting  transient  to True, will cause the  SubWindow  to respond to parent window events such as hide, show   move. \n    Setting  blocking  to True, will stop execution of your code once the  SubWindow  is shown, until the user closes it.      .openSubWindow(title) \n    Used to reopen the named  SubWindow . \n    This lets you modify SubWindows in a different part of the code, for example in a function call.", 
            "title": "Start/Stop Sub Windows"
        }, 
        {
            "location": "/pythonSubWindows/#showhide-sub-windows", 
            "text": ".go(startWindow=None) \n    If you set a  SubWindow  as the  startWindow   appJar  will start-up showing the named  SubWindow . \n    The main window will be minimized.     def login(btn):\n    app.hideSubWindow( Login )\n    app.show()\n\napp.startSubWindow( Login )\napp.addLabel( l2 ,  Login Window )\napp.addButton( SUBMIT , login)\napp.stopSubWindow()\n\napp.go(startWindow= Login )    .showSubWindow(title, hide=False) \n    Will cause the specified  SubWindow  to be shown. \n    If it is set as  modal  the parent window will become uninteractive until the  SubWindow  is closed. \n    If  hide  is set to True, all other  SubWindows  will be hidden.      .hideSubWindow(title, useStopFunction=False)     .confirmHideSubWindow(title) \n    Used to hide the specified  SubWindow . \n    This will not destroy the  SubWindow , so it can be shown again later. \n    By default it bypasses any  stopFunction . \n    Set  useStopFunction  to be True or call  .confirmHideSubWindow()  to use the  stopFunction .      .hideAllSubWindows(useStopFunction=False) \n    Will hide all  SubWindows . \n    Set  useStopFunction  to be True to use the  stopFunction .      .destroySubWindow(title) \n    This will hide and permanently destroy the specified  SubWindow . \n    It cannot be shown again.      It's useful to be able to create a button that stops a SubWindow: \nIf you define a button, that calls  .hideSubWindow()  or  .destroySubWindow() , and give it the same name as the  SubWindow , then it will hide/destroy the  SubWindow , and call any associated  .stopFunction() .    app.startSubWindow( Demo )\napp.addLabel( l1 ,  Press the button to close this window )\n# set the button's name to match the SubWindow's name\napp.addNamedButton( CLOSE ,  Demo , app.hideSubWindow)\napp.stopSubWindow()", 
            "title": "Show/Hide Sub Windows"
        }, 
        {
            "location": "/pythonSubWindows/#set-sub-windows", 
            "text": "Note, all functions available on the main window are also available on  SubWindows . \nSimply call those functions after starting a  SubWindow .    app.startSubWindow( one , modal=True)\napp.setBg( orange )\napp.setGeometry( 400x400 )\napp.setTransparency(25)\napp.setStopFunction(checkDone)\napp.addLabel( l1 ,  In sub window )\napp.stopSubWindow()", 
            "title": "Set Sub Windows"
        }, 
        {
            "location": "/splash/", 
            "text": "Splashscreen\n\n\nIt's possible to show a very simple SplashScreen when your GUI starts up.\n\nIt will fill the whole screen, and stay up for a couple of seconds, while your GUI loads.\n\n\n  \n\n\nSimply call:  \n\n\n\n\n.showSplash(text, fill='red', stripe='black', fg='white', font=44)\n\n    Pass in the text you want to show, plus any colours (not required).\n\n\ntext\n This should be a short message to show in the center of the screen.\n\n\nfill\n - this is the bg colour for the splashscreen.\n\n\nstripe\n - this is the bg colour of a stripe across the screen.\n\n\nfg\n - this is the colour of the writing to put in the stripe.\n\n\nfont\n - the size of the text.  \n\n\n\n\nThis is only a very simple splashScreen, eventually, it will be possible to arrange labels and images in it, just as is possible in the main GUI layout...", 
            "title": "Splashscreen"
        }, 
        {
            "location": "/splash/#splashscreen", 
            "text": "It's possible to show a very simple SplashScreen when your GUI starts up. \nIt will fill the whole screen, and stay up for a couple of seconds, while your GUI loads.      Simply call:     .showSplash(text, fill='red', stripe='black', fg='white', font=44) \n    Pass in the text you want to show, plus any colours (not required).  text  This should be a short message to show in the center of the screen.  fill  - this is the bg colour for the splashscreen.  stripe  - this is the bg colour of a stripe across the screen.  fg  - this is the colour of the writing to put in the stripe.  font  - the size of the text.     This is only a very simple splashScreen, eventually, it will be possible to arrange labels and images in it, just as is possible in the main GUI layout...", 
            "title": "Splashscreen"
        }, 
        {
            "location": "/specialCharacters/", 
            "text": "Special Characters\n\n\n\n\nIf you've ever tried a \nValidationEntry\n, you'll notice we use some special characters:\n\n\n\n\nExplanation\n\n\n\n\nYou can't find these on the keyboard, so can't type them in your code.\n\nInstead, you need to use a special code (\nunicode\n), for the character you want.\n\n\nFor example, Unicode for the tick is \n2714\n, and the cross is \n2716\n\n\nTo represent these in Python, you need to use a special syntax:\n\n\nTICK=\n\\u2714\n\nCROSS=\n\\u2716\n\n\napp.addLabel(\ntick\n, TICK)\napp.addLabel(\ncross\n, CROSS)\n\n\n\n\nBy putting \n\\u\n at the start of the String, you tell Python it is a Unicode character.\n\nThis works well in Python 3.x, as it knows what unicode characters are.\n\n\nIf you're still using python 2.x (not recommended), you'll need to use a little extra magic:  \n\n\nTICK=u\n\\u2714\n\nCROSS=u\n\\u2716\n\n\napp.addLabel(\ntick\n, TICK)\napp.addLabel(\ncross\n, CROSS)\n\n\n\n\nBy also putting a \nu\n before the string, you tell Python to expect a unicode character.\n(In fact, it calls the Unicode function, converting the string data into Unicode.)\n\n\n\n\n\n\nAdvertisement\nwhy?\n\n\n\n\n\n\n(adsbygoogle = window.adsbygoogle || []).push({});\n\n\n\n\n\n\nExample\n\n\n\n\nAs demonstrated above, it's best to define any Unicode characters you want to use as constants, then you can use them in your code just like any other string.  \n\n\n\n\nPLAY  = \n\\u25B6\n  # 23F5 should work...\nPAUSE = \n\\u23F8\n\nRWD   = \n\\u23EA\n\nFWD   = \n\\u23E9\n\nSTOP  = \n\\u23F9\n\n\ndef music(btn):\n    if btn == PLAY:\n        # play music\n    elif btn == PAUSE:\n        # pause music\n\napp.setButtonFont(20)\napp.addButtons([PLAY, PAUSE, STOP, RWD, FWD], music)\n\n\n\n\nUnicode Search\n\n\n\n\nSo, now you just need to find the right Unicode...  \n\n\nOur favourite site is \nFileFormat.info\n:\n\n\n\n\nSimply type what you are looking for into the search box, and it will give you the best matches:\n\n\n\n\nIdentify the one you want, and take a note of the Unicode: 263C\n\n(Note, these are hexadecimal codes, so the values will be between 0 and F)  \n\n\nYou can then use this code in your gui: \n  \n\n\nFLOWER = \n\\u263C\n\napp.addButton(FLOWER, flowerPower)\n\n\n\n\nImportant\n\n\n\n\nDifferent platforms will (potentially) display these characters in different ways...\n\nAs you can see in the music example, for some reason, the PLAY character doesn't display like the other characters...  \n\n\nThere is also an issue with Python GUIs in general, where they can't actually (yet) display all of the different Unicode characters.\n\nIf the character has more than 4 digits in its code, it probably won't work.\n\nYou may even get an error similar to: \ncharacter is above the range (U+0000-U+FFFF) allowed by Tcl\n\nSo, make sure you test them!  \n\n\nCompatability\n\n\n\n\nAs you can see, it's hard to make your code work on all versions of Python.\n\nThe switch from Python2 to Python3 caused lots of problems, as the \nu\n prefix was removed.\n\nThat meant there were two different ways to get unicode to work: Python2: \nu'\\u23F9'\n, Python3: \n'\\u23F9'\n  \n\n\nAs of Python 3.3, the \nu\n prefix was brought back (although it doesn't do anything), but that still meant Python3.0 to Python3.2 didn't support it.\n\n\nSo, the best solution, if you want your code to work on all versions of Python, is to not use the \nu\n prefix, and instead change the way Python2 works.  \n\n\nIf you include \nfrom __future__ import unicode_literals\n at the start of your code, you can include unicode characters in Python2, without using the \nu\n prefix - \nprint('\\u23F9')\n will then work on every version of python.  \n\n\nEaster Egg\n\n\n\n\nTry holding the \nALT\n key and typing different codes on a Windows computer...", 
            "title": "Special Characters"
        }, 
        {
            "location": "/specialCharacters/#special-characters", 
            "text": "If you've ever tried a  ValidationEntry , you'll notice we use some special characters:", 
            "title": "Special Characters"
        }, 
        {
            "location": "/specialCharacters/#explanation", 
            "text": "You can't find these on the keyboard, so can't type them in your code. \nInstead, you need to use a special code ( unicode ), for the character you want.  For example, Unicode for the tick is  2714 , and the cross is  2716  To represent these in Python, you need to use a special syntax:  TICK= \\u2714 \nCROSS= \\u2716 \n\napp.addLabel( tick , TICK)\napp.addLabel( cross , CROSS)  By putting  \\u  at the start of the String, you tell Python it is a Unicode character. \nThis works well in Python 3.x, as it knows what unicode characters are.  If you're still using python 2.x (not recommended), you'll need to use a little extra magic:    TICK=u \\u2714 \nCROSS=u \\u2716 \n\napp.addLabel( tick , TICK)\napp.addLabel( cross , CROSS)  By also putting a  u  before the string, you tell Python to expect a unicode character.\n(In fact, it calls the Unicode function, converting the string data into Unicode.)    Advertisement why?    (adsbygoogle = window.adsbygoogle || []).push({});", 
            "title": "Explanation"
        }, 
        {
            "location": "/specialCharacters/#example", 
            "text": "As demonstrated above, it's best to define any Unicode characters you want to use as constants, then you can use them in your code just like any other string.     PLAY  =  \\u25B6   # 23F5 should work...\nPAUSE =  \\u23F8 \nRWD   =  \\u23EA \nFWD   =  \\u23E9 \nSTOP  =  \\u23F9 \n\ndef music(btn):\n    if btn == PLAY:\n        # play music\n    elif btn == PAUSE:\n        # pause music\n\napp.setButtonFont(20)\napp.addButtons([PLAY, PAUSE, STOP, RWD, FWD], music)", 
            "title": "Example"
        }, 
        {
            "location": "/specialCharacters/#unicode-search", 
            "text": "So, now you just need to find the right Unicode...    Our favourite site is  FileFormat.info :   Simply type what you are looking for into the search box, and it will give you the best matches:   Identify the one you want, and take a note of the Unicode: 263C \n(Note, these are hexadecimal codes, so the values will be between 0 and F)    You can then use this code in your gui:      FLOWER =  \\u263C \napp.addButton(FLOWER, flowerPower)", 
            "title": "Unicode Search"
        }, 
        {
            "location": "/specialCharacters/#important", 
            "text": "Different platforms will (potentially) display these characters in different ways... \nAs you can see in the music example, for some reason, the PLAY character doesn't display like the other characters...    There is also an issue with Python GUIs in general, where they can't actually (yet) display all of the different Unicode characters. \nIf the character has more than 4 digits in its code, it probably won't work. \nYou may even get an error similar to:  character is above the range (U+0000-U+FFFF) allowed by Tcl \nSo, make sure you test them!", 
            "title": "Important"
        }, 
        {
            "location": "/specialCharacters/#compatability", 
            "text": "As you can see, it's hard to make your code work on all versions of Python. \nThe switch from Python2 to Python3 caused lots of problems, as the  u  prefix was removed. \nThat meant there were two different ways to get unicode to work: Python2:  u'\\u23F9' , Python3:  '\\u23F9'     As of Python 3.3, the  u  prefix was brought back (although it doesn't do anything), but that still meant Python3.0 to Python3.2 didn't support it.  So, the best solution, if you want your code to work on all versions of Python, is to not use the  u  prefix, and instead change the way Python2 works.    If you include  from __future__ import unicode_literals  at the start of your code, you can include unicode characters in Python2, without using the  u  prefix -  print('\\u23F9')  will then work on every version of python.", 
            "title": "Compatability"
        }, 
        {
            "location": "/specialCharacters/#easter-egg", 
            "text": "Try holding the  ALT  key and typing different codes on a Windows computer...", 
            "title": "Easter Egg"
        }, 
        {
            "location": "/pythonGuiOptions/", 
            "text": "GUI Options\n\n\n\n\nThere are a number of generic configurations available, which will affect the whole GUI.\n\nSome of these are also available at a widget level, where you can specify individual configurations tor specified widgets.  \n\n\nGUI Configuration\n\n\n\n\nSome basic configuration for the size, position, transparency, etc. of the GUI.\n\n\nLook \n Feel\n\n\n\n\n\n\n.setTitle(title)\n\n    Sets the title of the GUI. By default, it is the name of the script.\n\n\n\n\n\n\n.setIcon(fileName)\n\n    Sets an icon for the GUI.\n    If you want to disable the icon, set the \nshowIcon\n flag to True, when you call appJar's constructor.  \n\n\n\n\n\n\n.setTransparency(percentage)\n\n    Sets how transparent the GUI is. Between 0 and 100%.\n\n\n\n\n\n\nSize \n Location\n\n\n\n\n\n\n.hide()\n \n \n.show()\n\n    Used to hide and show the main window.\n\n    Useful in conjunction with \nSubWindows\n\n    You can have a menu or logon SubWindow that hides/shows the main window as necessary.\n\n\nNB.\n hiding the window, effectively minimizes it, it is still there...\n\n\n\n\n\n\n.setGeometry(geom)\n \n \n.setGeometry(width, height)\n\n    Sets the height \n width of the GUI:  \n\n\n\n\nEither as a single String \n.setGeometry(\"200x100\")\n (widthxheight)  \n\n\nAs two separate parameters \n.setGeometry(200,100)\n\n\nOr to go \nFullscreen\n \n.setGeometry(\"Fullscreen\")\n  \n\n\n\n\n\n\n\n\n.exitFullscreen()\n\n    Leave fullscreen, if set in the geometry.  \n\n    Returns True/False - if the app was able to leave fullscreen.\n    Can be called safely, even if app is not in fullscreen:\n    \nEscape\n will call this automatically, while in fullscreen.  \n\n\n\n\n\n\nif app.exitFullscreen():\n    # do something\nelse:\n    app.setGeometry(\nfullscreen\n)\n    # do something else\n\n\n\n\n\n\n\n\n.setResizable(canResize=True)\n\n    Sets whether the GUI can be resized or not.  \n\n\n\n\n\n\n.setLocation(x, y=None)\n\n    Sets the position of the GUI.\n\n    If you want to position the widget in the center of the screen, set \nx\n to CENTER:\n\n\n\n\n\n\napp.setLocation(\nCENTER\n)\n\n\n\n\n\n\n\n\n.setGuiPadding(x, y)\n\n    Sets the size of the border inside the GUI - defaults to 2.  \n\n\n\n\n\n\n.hideTitleBar()\n \n \n.showTitleBar()\n\n    Hides/shows the GUI's title bar.\n\n    Note, if the title bar is removed, it's not possible to move or resize the GUI.  \n\n\n\n\n\n\nGUI Design\n\n\n\n\nIt's possible to change the default colours and fonts for widgets in the GUI.\n\n\nColour\n\n\n\n\n\n\n.setFg(colour, override=False)\n\n    Set a foreground colour for the entire GUI. By default, this will only apply to labels (including on RadioButtons \n CheckButtons).\n\n\nNB.\n To change the colour inside interactive widgets (Entry, TextArea, SpinBox, OptionMenu, etc), set \noverride\n to be True.  \n\n\n\n\n\n\n.setBg(colour, override=False, tint=False)\n\n    Set the background colour for the GUI. This should affect all widgets, and will override any backgrounds set before.\n\n\nNB.\n this doesn't change the background colour of interactive widgets (Entry, TextArea, etc). If you also want to update those, set \noverride\n to True.\n\n    It's also possible to set a \ntint\n - this will determine an appropriate colour to set mouse-over, highlight colours, etc. It is set automatically if \noverride\n is True.  \n\n\n\n\n\n\nFont\n\n\nWhen configuring a font, the following style options can be set:\n\n\n\n\nsize\n - the height in points  \n\n\nfamily\n - the family name, such as: \nArial\n, \nCourier\n, \nComic Sans\n, \nSans Serif\n, \nTimes\n or \nVerdana\n  \n\n\nweight\n - \nbold\n or \nnormal\n  \n\n\nslant\n - \nitalic\n or \nroman\n  \n\n\nunderline\n - \nTrue\n or \nFalse\n  \n\n\noverstrike\n - \nTrue\n or \nFalse\n  \n\n\n\n\napp.setFont(size=16, family=\nTimes\n, underline=True, slant=\nitalic\n)\napp.setButtonFont(size=14, family=\nVerdana\n, underline=False, slant=\nroman\n)\n\n\n\n\nSetting a font\n\n\n\n\n\n\n.setFont(**style)\n\n    This can be used to set the font for all widgets.\n\n    Pass in any of the above styles that are required.  \n\n\n\n\n\n\n.setLabelFont(**style)\n\n    This can be used to set the font for all label-type widgets.\n\n    Pass in any of the above styles that are required.  \n\n\n\n\n\n\n.setButtonFont(**style)\n\n    This can be used to set the font for all button-type widgets.\n\n    Pass in any of the above styles that are required.  \n\n\n\n\n\n\nModifying fonts\n\n\n\n\n\n\n.decreaseFont()\n \n \n.increaseFont()\n\n    These can be used to increase or decrease the font of all widgets.\n\n\n\n\n\n\n.increaseLabelFont()\n \n \n.decreaseLabelFont()\n\n    These can be used to increase or decrease the font of all label-type widgets.\n\n\n\n\n\n\n.increaseButtonFont()\n \n \n.decreaseButtonFont()\n\n    These can be used to increase or decrease the font of all butotn-type widgets.", 
            "title": "GUI Options"
        }, 
        {
            "location": "/pythonGuiOptions/#gui-options", 
            "text": "There are a number of generic configurations available, which will affect the whole GUI. \nSome of these are also available at a widget level, where you can specify individual configurations tor specified widgets.", 
            "title": "GUI Options"
        }, 
        {
            "location": "/pythonGuiOptions/#gui-configuration", 
            "text": "Some basic configuration for the size, position, transparency, etc. of the GUI.", 
            "title": "GUI Configuration"
        }, 
        {
            "location": "/pythonGuiOptions/#look-feel", 
            "text": ".setTitle(title) \n    Sets the title of the GUI. By default, it is the name of the script.    .setIcon(fileName) \n    Sets an icon for the GUI.\n    If you want to disable the icon, set the  showIcon  flag to True, when you call appJar's constructor.      .setTransparency(percentage) \n    Sets how transparent the GUI is. Between 0 and 100%.", 
            "title": "Look &amp; Feel"
        }, 
        {
            "location": "/pythonGuiOptions/#size-location", 
            "text": ".hide()     .show() \n    Used to hide and show the main window. \n    Useful in conjunction with  SubWindows \n    You can have a menu or logon SubWindow that hides/shows the main window as necessary.  NB.  hiding the window, effectively minimizes it, it is still there...    .setGeometry(geom)     .setGeometry(width, height) \n    Sets the height   width of the GUI:     Either as a single String  .setGeometry(\"200x100\")  (widthxheight)    As two separate parameters  .setGeometry(200,100)  Or to go  Fullscreen   .setGeometry(\"Fullscreen\")        .exitFullscreen() \n    Leave fullscreen, if set in the geometry.   \n    Returns True/False - if the app was able to leave fullscreen.\n    Can be called safely, even if app is not in fullscreen:\n     Escape  will call this automatically, while in fullscreen.      if app.exitFullscreen():\n    # do something\nelse:\n    app.setGeometry( fullscreen )\n    # do something else    .setResizable(canResize=True) \n    Sets whether the GUI can be resized or not.      .setLocation(x, y=None) \n    Sets the position of the GUI. \n    If you want to position the widget in the center of the screen, set  x  to CENTER:    app.setLocation( CENTER )    .setGuiPadding(x, y) \n    Sets the size of the border inside the GUI - defaults to 2.      .hideTitleBar()     .showTitleBar() \n    Hides/shows the GUI's title bar. \n    Note, if the title bar is removed, it's not possible to move or resize the GUI.", 
            "title": "Size &amp; Location"
        }, 
        {
            "location": "/pythonGuiOptions/#gui-design", 
            "text": "It's possible to change the default colours and fonts for widgets in the GUI.", 
            "title": "GUI Design"
        }, 
        {
            "location": "/pythonGuiOptions/#colour", 
            "text": ".setFg(colour, override=False) \n    Set a foreground colour for the entire GUI. By default, this will only apply to labels (including on RadioButtons   CheckButtons).  NB.  To change the colour inside interactive widgets (Entry, TextArea, SpinBox, OptionMenu, etc), set  override  to be True.      .setBg(colour, override=False, tint=False) \n    Set the background colour for the GUI. This should affect all widgets, and will override any backgrounds set before.  NB.  this doesn't change the background colour of interactive widgets (Entry, TextArea, etc). If you also want to update those, set  override  to True. \n    It's also possible to set a  tint  - this will determine an appropriate colour to set mouse-over, highlight colours, etc. It is set automatically if  override  is True.", 
            "title": "Colour"
        }, 
        {
            "location": "/pythonGuiOptions/#font", 
            "text": "When configuring a font, the following style options can be set:   size  - the height in points    family  - the family name, such as:  Arial ,  Courier ,  Comic Sans ,  Sans Serif ,  Times  or  Verdana     weight  -  bold  or  normal     slant  -  italic  or  roman     underline  -  True  or  False     overstrike  -  True  or  False      app.setFont(size=16, family= Times , underline=True, slant= italic )\napp.setButtonFont(size=14, family= Verdana , underline=False, slant= roman )", 
            "title": "Font"
        }, 
        {
            "location": "/pythonGuiOptions/#setting-a-font", 
            "text": ".setFont(**style) \n    This can be used to set the font for all widgets. \n    Pass in any of the above styles that are required.      .setLabelFont(**style) \n    This can be used to set the font for all label-type widgets. \n    Pass in any of the above styles that are required.      .setButtonFont(**style) \n    This can be used to set the font for all button-type widgets. \n    Pass in any of the above styles that are required.", 
            "title": "Setting a font"
        }, 
        {
            "location": "/pythonGuiOptions/#modifying-fonts", 
            "text": ".decreaseFont()     .increaseFont() \n    These can be used to increase or decrease the font of all widgets.    .increaseLabelFont()     .decreaseLabelFont() \n    These can be used to increase or decrease the font of all label-type widgets.    .increaseButtonFont()     .decreaseButtonFont() \n    These can be used to increase or decrease the font of all butotn-type widgets.", 
            "title": "Modifying fonts"
        }, 
        {
            "location": "/pythonWidgetLayout/", 
            "text": "Arranging Widgets\n\n\n\n\nYou can make your GUIs as simple or as complicated as you want...  \n\n\nSequential Layout\n\n\n\n\nBy default, each time you add a widget to a GUI, it is simply added on a new row:\n\n\n\n\nfrom appJar import gui  \n\ndef changeLabel(btn):  \n    app.setLabel(\nl2\n, app.getEntry(\ntext\n))  \n\napp = gui()  \napp.addLabel(\nl1\n, \nSimple Demo\n)\napp.addEntry(\ntext\n)\napp.addButton(\nOK\n, changeLabel)\napp.addEmptyLabel(\nl2\n)\napp.go()\n\n\n\n\n\n\n\n\nAdvertisement\nwhy?\n\n\n\n\n\n\n(adsbygoogle = window.adsbygoogle || []).push({});\n\n\n\n\n\n\nGrid Layout\n\n\n\n\nIf, however, you want a bit more control, then you can treat your GUI like a \nGRID\n.\n\nThink of it just like a spreadsheet, and position your widgets in whichever cell you want.  \n\n\nEach time you add a widget, simply specify the row and column it should appear in (always in that order):\n\n\n\n\nfrom appJar import gui\n\napp=gui(\nGrid Demo\n, \n300x300\n)\napp.setSticky(\nnews\n)\napp.setExpand(\nboth\n)\napp.setFont(20)\n\napp.addLabel(\nl1\n, \nrow=0\\ncolumn=0\n, 0, 0)\napp.addLabel(\nl2\n, \nrow=0\\ncolumn=1\n, 0, 1)\napp.addLabel(\nl3\n, \nrow=0\\ncolumn=2\n, 0, 2)\napp.addLabel(\nl4\n, \nrow=1\\ncolumn=0\n, 1, 0)\napp.addLabel(\nl5\n, \nrow=1\\ncolumn=1\n, 1, 1)\napp.addLabel(\nl6\n, \nrow=1\\ncolumn=2\n, 1, 2)\napp.addLabel(\nl7\n, \nrow=2\\ncolumn=0\n, 2, 0)\napp.addLabel(\nl8\n, \nrow=2\\ncolumn=1\n, 2, 1)\napp.addLabel(\nl9\n, \nrow=2\\ncolumn=2\n, 2, 2)\n\napp.setLabelBg(\nl1\n, \nLightYellow\n)\napp.setLabelBg(\nl2\n, \nLemonChiffon\n)\napp.setLabelBg(\nl3\n, \nLightGoldenRodYellow\n)\napp.setLabelBg(\nl4\n, \nPapayaWhip\n)\napp.setLabelBg(\nl5\n, \nMoccasin\n)\napp.setLabelBg(\nl6\n, \nPeachPuff\n)\napp.setLabelBg(\nl7\n, \nPaleGoldenRod\n)\napp.setLabelBg(\nl8\n, \nKhaki\n)\napp.setLabelBg(\nl9\n, \nDarkKhaki\n)\n\napp.go()\n\n\n\n\nIf you're still not satisfied, you can configure widgets to span across multiple columns or rows.\n\nSimply provide a third \n fourth parameter to specify how many rows and columns to span:  \n\n\n\n\nfrom appJar import gui\n\napp=gui(\nGrid Demo\n, \n300x300\n)\napp.setSticky(\nnews\n)\napp.setExpand(\nboth\n)\napp.setFont(14)\n\napp.addLabel(\nl1\n, \nrow=0\\ncolumn=0\n)\napp.addLabel(\nl2\n, \nrow=0\\ncolumn=1\\ncolspan=2\n, 0, 1, 2)\napp.addLabel(\nl4\n, \nrow=1\\ncolumn=0\\ncolspan=2\n, 1, 0, 2)\napp.addLabel(\nl6\n, \nrow=1\\ncolumn=2\\ncolspan=1\\nrowspan=2\n, 1, 2, 1, 2)\napp.addLabel(\nl7\n, \nrow=2\\ncolumn=0\n, 2)\napp.addLabel(\nl8\n, \nrow=2\\ncolumn=1\n, 2, 1)\n\napp.setLabelBg(\nl1\n, \nred\n)\napp.setLabelBg(\nl2\n, \nblue\n)\napp.setLabelBg(\nl4\n, \ngreen\n)\napp.setLabelBg(\nl6\n, \norange\n)\napp.setLabelBg(\nl7\n, \nyellow\n)\n\napp.go()\n\n\n\n\nNote, the parameters are read from left to right, so:  \n\n\n\n\nIf you're specifying a column, you must first specify a row  \n\n\nIf you're specifying a row-span, you must first specify both the row \n column  \n\n\nAnd, if you're specifying a column-span, you must first specify a row, column \n column-span  \n\n\n\n\nLayout Tricks\n\n\n\n\nThere are a few tricks you can employ, to make life a bit easier...\n\n\nNamed Arguments\n\n\nIt can be annoying having to specify all of the positional parameters each time, so why not take advantage of Python's support for \nNamed Arguments\n. These allow you to set specific parameters, using their name.\n\nFor example: \napp.addLabel(\"l1\", \"text here\", colspan=2)\n, will set the \ncolspan\n parameter, without having to set the preceding ones.   \n\n\nRow Helpers\n\n\nappJar tracks the next available row.:\n\n\n\n\n.getRow()\n or \n.gr()\n\n    Returns the next free row.\n\n    Useful if you're mainly adding things sequentially, but want to modify one line out of sequence.  \n\n\n\n\n\n\nfrom appJar import gui\n\ncolours=[\nred\n,\nblue\n]\n\napp=gui()\n\nfor loop in range(3):\n    app.addLabel(loop, \nNew Row\n, colspan=2)\n    app.setLabelBg(loop, colours[loop%2])\n\nrow = app.getRow() # get current row\n\napp.addLabel(\na\n, \nLEFT\n, row, 0) \napp.addLabel(\nb\n, \nRIGHT\n, row, 1) \n\napp.setLabelBg(\na\n, \ngreen\n)\napp.setLabelBg(\nb\n, \norange\n)\n\nfor loop in range(3, 6):\n    app.addLabel(loop, \nNew Row\n, colspan=2)\n    app.setLabelBg(loop, colours[loop%2])\n\napp.go()\n\n\n\n\nInstead of calling \n.getRow()\n, you can specify the string \"previous\" or \"p\" to use the the previous row:  \n\n\nfrom appJar import gui \nwith gui(\nLABS\n, \n400x400\n, sticky=\nnews\n) as app:\n    app.label(\n0-0\n, bg=\nred\n)\n    app.label(\n0-1\n, bg=\norange\n, row=\nprevious\n, column=1)\n    app.label(\n0-2\n, bg=\nyellow\n, row=\nprevious\n, column=2)\n    app.label(\n1-0\n, bg=\ngreen\n)\n    app.label(\n1-1-2\n, bg=\nblue\n, row=\nprevious\n, column=1, colspan=2)\n\n\n\n\n\n\n\n\nAdvertisement\nwhy?\n\n\n\n\n\n\n(adsbygoogle = window.adsbygoogle || []).push({});\n\n\n\n\n\n\nWidget Positioning\n\n\n\n\nOnce you've laid out your widgets, the next most important thing is how they line up in their rows and columns.  \n\n\nNB.\n These only take affect from the point they are added, so include them before adding the widgets.  \n\n\nThere are two things you can configure:    \n\n\n\n\nHow columns and rows stretch to fill the GUI - \nstretchiness\n  \n\n\nHow widgets stretch to fill their cells - \nstickiness\n  \n\n\n\n\nNote, you can also change these settings for \nindividual widgets\n\n\nSet Stretch \n Sticky\n\n\n\n\n.setStretch(sides)\n\n    This tells rows \n columns how to stretch when the GUI is resized.\n\n    It allows them to adjust to fill the available space:\n\n\nnone\n - don't stretch  \n\n\nrow\n - only rows should stretch down  \n\n\ncolumn\n - only columns should stretch across  \n\n\nboth\n - stretch rows \n columns  \n\n\n\n\n\n\n.setSticky(sides)\n\n    This determines which sides of the grid-cell the widget will stick to.\n\n    It should be a string, made up of any combination of \nn\n, \ne\n, \ns\n or \nw\n\n    By default, most widgets use \n\"ew\"\n\n\n\n\nColumns \n Rows Stretchiness\n\n\nBy default, the columns stretch (equally) to fill the width of the GUI, but rows don't - they take up the minimum space required.    \n\n\n  \n\n\nIt's possible to tell the rows to stretch too:\n\n\n  \n\n\napp.setStretch(\nboth\n)\n\n\n\n\nBut, as you can see - this doesn't make much difference...\n\n\nWidget Stickiness\n\n\nEven if the cells in the columns \n rows are stretching, the widgets inside them might not.  \n\n\nWidgets have a \nstickiness\n which tells them which sides of their cells to stick to.  \n\n\nAgain, widgets are configured to stick to the left \n right, but not the top \n bottom.  \n\n\nTo change this, you need to set a new stickiness:  \n\n\n  \n\n\napp.setStretch(\nboth\n)\napp.setSticky(\nnesw\n)\n\n\n\n\nIf you remove all stickiness, you end up with this:\n\n\n  \n\n\napp.setStretch(\nboth\n)\napp.setSticky(\n)\n\n\n\n\nIt's even possible to give each widget its own \nstickiness\n:\n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\n\napp.setBg(\nblue\n)\napp.setStretch(\nboth\n)\n\napp.setSticky(\nnw\n)\napp.addLabel(\nl1\n, \nOne\n, 0, 0)\napp.setLabelBg(\nl1\n, \nyellow\n)\n\napp.setSticky(\nne\n)\napp.addLabel(\nl2\n, \nTwo\n, 0, 1)\napp.setLabelBg(\nl2\n, \ngreen\n)\n\napp.setSticky(\nsw\n)\napp.addLabel(\nl3\n, \nThree\n, 1, 0)\napp.setLabelBg(\nl3\n, \npink\n)\n\napp.setSticky(\nse\n)\napp.addLabel(\nl4\n, \nFour\n, 1, 1)\napp.setLabelBg(\nl4\n, \nOrange\n)\n\napp.go()\n\n\n\n\nWidget Padding\n\n\nIt's possible to configure how much empty space is around a widget.\n\nThis is known as padding. You can put padding both inside and outside a widget...  \n\n\n\n\napp.setPadding([20,20]) # 20 pixels padding outside the widget [X, Y]\napp.setInPadding([20,20]) # 20 pixels padding inside the widget [X, Y]\n\n\n\n\nSet Padding \n InPadding\n\n\n\n\n.setPadding([x,y])\n\n    This sets the X \n Y padding outside a widget.  \n\n\n.setInPadding([x,y])\n\n    This sets the X \n Y padding inside a widget.  \n\n\n\n\n\n\napp.setPadding([20,20]) # padding outside the widget\napp.setInPadding([40,20]) # padding inside the widget", 
            "title": "Layout"
        }, 
        {
            "location": "/pythonWidgetLayout/#arranging-widgets", 
            "text": "You can make your GUIs as simple or as complicated as you want...", 
            "title": "Arranging Widgets"
        }, 
        {
            "location": "/pythonWidgetLayout/#sequential-layout", 
            "text": "By default, each time you add a widget to a GUI, it is simply added on a new row:   from appJar import gui  \n\ndef changeLabel(btn):  \n    app.setLabel( l2 , app.getEntry( text ))  \n\napp = gui()  \napp.addLabel( l1 ,  Simple Demo )\napp.addEntry( text )\napp.addButton( OK , changeLabel)\napp.addEmptyLabel( l2 )\napp.go()    Advertisement why?    (adsbygoogle = window.adsbygoogle || []).push({});", 
            "title": "Sequential Layout"
        }, 
        {
            "location": "/pythonWidgetLayout/#grid-layout", 
            "text": "If, however, you want a bit more control, then you can treat your GUI like a  GRID . \nThink of it just like a spreadsheet, and position your widgets in whichever cell you want.    Each time you add a widget, simply specify the row and column it should appear in (always in that order):   from appJar import gui\n\napp=gui( Grid Demo ,  300x300 )\napp.setSticky( news )\napp.setExpand( both )\napp.setFont(20)\n\napp.addLabel( l1 ,  row=0\\ncolumn=0 , 0, 0)\napp.addLabel( l2 ,  row=0\\ncolumn=1 , 0, 1)\napp.addLabel( l3 ,  row=0\\ncolumn=2 , 0, 2)\napp.addLabel( l4 ,  row=1\\ncolumn=0 , 1, 0)\napp.addLabel( l5 ,  row=1\\ncolumn=1 , 1, 1)\napp.addLabel( l6 ,  row=1\\ncolumn=2 , 1, 2)\napp.addLabel( l7 ,  row=2\\ncolumn=0 , 2, 0)\napp.addLabel( l8 ,  row=2\\ncolumn=1 , 2, 1)\napp.addLabel( l9 ,  row=2\\ncolumn=2 , 2, 2)\n\napp.setLabelBg( l1 ,  LightYellow )\napp.setLabelBg( l2 ,  LemonChiffon )\napp.setLabelBg( l3 ,  LightGoldenRodYellow )\napp.setLabelBg( l4 ,  PapayaWhip )\napp.setLabelBg( l5 ,  Moccasin )\napp.setLabelBg( l6 ,  PeachPuff )\napp.setLabelBg( l7 ,  PaleGoldenRod )\napp.setLabelBg( l8 ,  Khaki )\napp.setLabelBg( l9 ,  DarkKhaki )\n\napp.go()  If you're still not satisfied, you can configure widgets to span across multiple columns or rows. \nSimply provide a third   fourth parameter to specify how many rows and columns to span:     from appJar import gui\n\napp=gui( Grid Demo ,  300x300 )\napp.setSticky( news )\napp.setExpand( both )\napp.setFont(14)\n\napp.addLabel( l1 ,  row=0\\ncolumn=0 )\napp.addLabel( l2 ,  row=0\\ncolumn=1\\ncolspan=2 , 0, 1, 2)\napp.addLabel( l4 ,  row=1\\ncolumn=0\\ncolspan=2 , 1, 0, 2)\napp.addLabel( l6 ,  row=1\\ncolumn=2\\ncolspan=1\\nrowspan=2 , 1, 2, 1, 2)\napp.addLabel( l7 ,  row=2\\ncolumn=0 , 2)\napp.addLabel( l8 ,  row=2\\ncolumn=1 , 2, 1)\n\napp.setLabelBg( l1 ,  red )\napp.setLabelBg( l2 ,  blue )\napp.setLabelBg( l4 ,  green )\napp.setLabelBg( l6 ,  orange )\napp.setLabelBg( l7 ,  yellow )\n\napp.go()  Note, the parameters are read from left to right, so:     If you're specifying a column, you must first specify a row    If you're specifying a row-span, you must first specify both the row   column    And, if you're specifying a column-span, you must first specify a row, column   column-span", 
            "title": "Grid Layout"
        }, 
        {
            "location": "/pythonWidgetLayout/#layout-tricks", 
            "text": "There are a few tricks you can employ, to make life a bit easier...", 
            "title": "Layout Tricks"
        }, 
        {
            "location": "/pythonWidgetLayout/#named-arguments", 
            "text": "It can be annoying having to specify all of the positional parameters each time, so why not take advantage of Python's support for  Named Arguments . These allow you to set specific parameters, using their name. \nFor example:  app.addLabel(\"l1\", \"text here\", colspan=2) , will set the  colspan  parameter, without having to set the preceding ones.", 
            "title": "Named Arguments"
        }, 
        {
            "location": "/pythonWidgetLayout/#row-helpers", 
            "text": "appJar tracks the next available row.:   .getRow()  or  .gr() \n    Returns the next free row. \n    Useful if you're mainly adding things sequentially, but want to modify one line out of sequence.      from appJar import gui\n\ncolours=[ red , blue ]\n\napp=gui()\n\nfor loop in range(3):\n    app.addLabel(loop,  New Row , colspan=2)\n    app.setLabelBg(loop, colours[loop%2])\n\nrow = app.getRow() # get current row\n\napp.addLabel( a ,  LEFT , row, 0) \napp.addLabel( b ,  RIGHT , row, 1) \n\napp.setLabelBg( a ,  green )\napp.setLabelBg( b ,  orange )\n\nfor loop in range(3, 6):\n    app.addLabel(loop,  New Row , colspan=2)\n    app.setLabelBg(loop, colours[loop%2])\n\napp.go()  Instead of calling  .getRow() , you can specify the string \"previous\" or \"p\" to use the the previous row:    from appJar import gui \nwith gui( LABS ,  400x400 , sticky= news ) as app:\n    app.label( 0-0 , bg= red )\n    app.label( 0-1 , bg= orange , row= previous , column=1)\n    app.label( 0-2 , bg= yellow , row= previous , column=2)\n    app.label( 1-0 , bg= green )\n    app.label( 1-1-2 , bg= blue , row= previous , column=1, colspan=2)    Advertisement why?    (adsbygoogle = window.adsbygoogle || []).push({});", 
            "title": "Row Helpers"
        }, 
        {
            "location": "/pythonWidgetLayout/#widget-positioning", 
            "text": "Once you've laid out your widgets, the next most important thing is how they line up in their rows and columns.    NB.  These only take affect from the point they are added, so include them before adding the widgets.    There are two things you can configure:       How columns and rows stretch to fill the GUI -  stretchiness     How widgets stretch to fill their cells -  stickiness      Note, you can also change these settings for  individual widgets", 
            "title": "Widget Positioning"
        }, 
        {
            "location": "/pythonWidgetLayout/#set-stretch-sticky", 
            "text": ".setStretch(sides) \n    This tells rows   columns how to stretch when the GUI is resized. \n    It allows them to adjust to fill the available space:  none  - don't stretch    row  - only rows should stretch down    column  - only columns should stretch across    both  - stretch rows   columns      .setSticky(sides) \n    This determines which sides of the grid-cell the widget will stick to. \n    It should be a string, made up of any combination of  n ,  e ,  s  or  w \n    By default, most widgets use  \"ew\"", 
            "title": "Set Stretch &amp; Sticky"
        }, 
        {
            "location": "/pythonWidgetLayout/#columns-rows-stretchiness", 
            "text": "By default, the columns stretch (equally) to fill the width of the GUI, but rows don't - they take up the minimum space required.          It's possible to tell the rows to stretch too:      app.setStretch( both )  But, as you can see - this doesn't make much difference...", 
            "title": "Columns &amp; Rows Stretchiness"
        }, 
        {
            "location": "/pythonWidgetLayout/#widget-stickiness", 
            "text": "Even if the cells in the columns   rows are stretching, the widgets inside them might not.    Widgets have a  stickiness  which tells them which sides of their cells to stick to.    Again, widgets are configured to stick to the left   right, but not the top   bottom.    To change this, you need to set a new stickiness:        app.setStretch( both )\napp.setSticky( nesw )  If you remove all stickiness, you end up with this:      app.setStretch( both )\napp.setSticky( )  It's even possible to give each widget its own  stickiness :      from appJar import gui\n\napp=gui()\n\napp.setBg( blue )\napp.setStretch( both )\n\napp.setSticky( nw )\napp.addLabel( l1 ,  One , 0, 0)\napp.setLabelBg( l1 ,  yellow )\n\napp.setSticky( ne )\napp.addLabel( l2 ,  Two , 0, 1)\napp.setLabelBg( l2 ,  green )\n\napp.setSticky( sw )\napp.addLabel( l3 ,  Three , 1, 0)\napp.setLabelBg( l3 ,  pink )\n\napp.setSticky( se )\napp.addLabel( l4 ,  Four , 1, 1)\napp.setLabelBg( l4 ,  Orange )\n\napp.go()", 
            "title": "Widget Stickiness"
        }, 
        {
            "location": "/pythonWidgetLayout/#widget-padding", 
            "text": "It's possible to configure how much empty space is around a widget. \nThis is known as padding. You can put padding both inside and outside a widget...     app.setPadding([20,20]) # 20 pixels padding outside the widget [X, Y]\napp.setInPadding([20,20]) # 20 pixels padding inside the widget [X, Y]", 
            "title": "Widget Padding"
        }, 
        {
            "location": "/pythonWidgetLayout/#set-padding-inpadding", 
            "text": ".setPadding([x,y]) \n    This sets the X   Y padding outside a widget.    .setInPadding([x,y]) \n    This sets the X   Y padding inside a widget.      app.setPadding([20,20]) # padding outside the widget\napp.setInPadding([40,20]) # padding inside the widget", 
            "title": "Set Padding &amp; InPadding"
        }, 
        {
            "location": "/pythonWidgetOptions/", 
            "text": "Changing Widgets\n\n\n\n\nThere are a lot of things that can be changed in a widget.\n\nThere is a pattern to how this works, you simply specify the widget type and the parameter, eg:\n\n\n\n\n.setLabelBg(name, value)\n\n\n.setButtonFg(name, value)\n\n\n.setListBoxState(name, value)\n\n\n\n\nThis should work for most widgets \n containers.\n\nSome widgets have different types, eg. TextArea \n ScrolledTextArea, all types can be configured with the main widget name.  \n\n\nBasic  Looks\n\n\n\n\nThe following options are available for all widgets:\n\n\n\n\n\n\n.set XXX Fg(name, value)\n\n    Sets the foreground colour (usually the text) of the named widget.\n\n\n\n\n\n\n.set XXX Bg(name, value)\n\n    Sets the background colour of the named widget.\n\n\n\n\n\n\n.set XXX DisabledFg(name, value)\n\n    Sets the disabled foreground colour (usually the text) of the named widget.\n\n\n\n\n\n\n.set XXX DisabledBg(name, value)\n\n    Sets the disabled background colour of the named widget.\n\n\n\n\n\n\n.set XXX ActiveFg(name, value)\n\n    Sets the active foreground colour (usually the text) of the named widget.\n\n\n\n\n\n\n.set XXX ActiveBg(name, value)\n\n    Sets the active background colour of the named widget.\n\n\n\n\n\n\n.set XXX Width(name, value)\n\n    Sets the width of the named widget.\n\n\n\n\n\n\n.set XXX Height(name, value)\n\n    Set the height of the named widget.\n\n\n\n\n\n\n.set XXX Relief(name, value)\n\n    Sets the border of the named widget. One of: \n\"sunken\"\n, \n\"raised\"\n, \n\"groove\"\n, \n\"ridge\"\n, \n\"flat\"\n  \n\n\n\n\n\n\n.set XXX State(name, value)\n\n    Sets the state of the named widget. One of: \n\"normal\"\n, \n\"active\"\n, \n\"disabled\"\n  \n\n\n\n\n\n\nIt's possible to change \nglobal GUI settings\n, such as the background and font.\n\nIf you need to modify individual settings of a widget, you can access it directly, and use the traditional tKinter methods.  \n\n\nTo change the font for a specific widget, try the following:\n\n\n\n\napp.addLabel(\nl1\n, \nTimes\n)\napp.addLabel(\nl2\n, \nComic Sans\n)\napp.addLabel(\nl3\n, \nHelvetica\n)\napp.addLabel(\nl4\n, \nSans Serif\n)\napp.addLabel(\nl5\n, \nVerdana\n)\napp.addLabel(\nl6\n, \nCourier\n)\n\napp.getLabelWidget(\nl1\n).config(font=\nTimes 20 italic underline\n)\napp.getLabelWidget(\nl2\n).config(font=(\nComic Sans\n, \n20\n, \nnormal\n))\napp.getLabelWidget(\nl3\n).config(font=\nHelvetica 20 underline\n)\napp.getLabelWidget(\nl4\n).config(font=(\nSans Serif\n, \n20\n, \nbold\n))\napp.getLabelWidget(\nl5\n).config(font=\nVerdana 20 overstrike\n)\napp.getLabelWidget(\nl6\n).config(font=\nCourier 20\n)\n\n\n\n\n\n\n\n\nAdvertisement\nwhy?\n\n\n\n\n\n\n(adsbygoogle = window.adsbygoogle || []).push({});\n\n\n\n\n\n\nAdvanced Looks\n\n\n\n\nThe following are supported by most widgets:\n\n\n\n\n\n\n.set XXX Align(name, value)\n\n    Specifies how to align text within the widget: \n\"left\"\n, \n\"right\"\n, \n\"center\"\n\n    Calls \njustify\n on the Entry widget, and anchor on all others (converting left/right into e/w)  .  \n\n\n\n\n\n\n.set XXX Anchor(name, value)\n\n    Sets where the text is positioned within the widget. One of: \n\"center\"\n, \n\"n\"\n, \n\"s\"\n, \n\"e\"\n, \n\"w\"\n, \n\"ne\"\n, \n\"nw\"\n, \n\"se\"\n, \n\"sw\"\n  \n\n\n\n\n\n\n.set XXX Sticky(name, value)\n\n    Specifies which side of the cell to stick the widget to, as the GUI expands: \n\"left\"\n, \n\"right\"\n, \n\"both\"\n\n\n\n\n\n\n.set XXX Padding(name, [x, y])\n\n    Set external padding of the named widget.  \n\n\n\n\n\n\n.set XXX InPadding(name, [x, y])\n\n    Set internal padding of the named widget.  \n\n\n\n\n\n\nFancy Options\n\n\n\n\n\n\n\n\n.set XXX Tooltip(name, value)\n\n    Sets a tooltip for the named widget, with the specified value.\n\n    The specified value will be displayed in a small pop-up, when the mouse is left over the widget.\n\n    If called a second time, it will update the text of the tooltip.\n\n    See \nTooltips\n for more info.  \n\n\n\n\n\n\n.enable XXX Tooltip(name)\n \n \n.disable XXX Tooltip(name)\n\n    These will enable or disable the named tooltip. When disabled, it will not show-up.  \n\n\n\n\n\n\n.set XXX Cursor(name, value)\n\n    Sets the cursor shown, when the mouse goes over this widget.\n\n    There are lots of cursors available, for different platforms, see \nhere\n\n\n\n\n\n\n.set XXX RightClickMenu(name, menu)\n\n    Links the right-click menu to the specified widget.\n\n    Make sure you have created a right-click menu first, \n.createRightClickMenu(menu)\n and added some menu-items to it.\n\n    See \nMenubars\n for more info.  \n\n\n\n\n\n\n.set XXX Focus(name)\n\n    Gives focus to the specified widget. This is the widget where the user will be able to start typing.\n\n\n\n\n\n\n\n\n\n\nAdvertisement\nwhy?\n\n\n\n\n\n\n(adsbygoogle = window.adsbygoogle || []).push({});\n\n\n\n\n\n\nWidget Manipulation\n\n\n\n\nThe following allow widgets to be manipulated on screen:\n\n\n\n\n\n\n.disable XXX (name)\n\n    Disable the widget - stops the user from interacting with it, but keeps it visible.\n\n\n\n\n\n\n.enable XXX (name)\n\n    Enable a disabled widget.\n\n\n\n\n\n\n.hide XXX (name)\n\n    Temporarily hides the widget from view.\n\n\n\n\n\n\n.show XXX (name)\n\n    Show the widget, if it was already hidden.\n\n\n\n\n\n\n.remove XXX (name)\n\n    Permanently remove the widget (deletes it).\n\n\n\n\n\n\n.removeAllWidgets()\n\n    Permanently remove all widgets.\n\n\n\n\n\n\nGrouped Options\n\n\n\n\nThe following are convenience functions, for modifying a group of widgets:  \n\n\n\n\n\n\n.set XXX Widths(names, val)\n \n \n.set XXX Heights(names, val)\n\n    Sets the widths/heights of the specified widgets.\n\n\n\n\n\n\n.setAll XXX Widths(val)\n \n \n.setAll XXX Heights(val)\n\n    Sets the widths/heights of all widgets of the specified type.\n\n\n\n\n\n\ntkinter Options\n\n\n\n\nIt's also possible to request a widget, and modify it directly:  \n\n\n\n\n.get XXX Widget(name, value=None)\n\n    This will get the named widget of the specified type.\n\n    Any standard tkinter options can then be changed.\n\n    If it's a RadioButton, you also need to specify a \nvalue\n - the text displayed in the widget.", 
            "title": "Configuration"
        }, 
        {
            "location": "/pythonWidgetOptions/#changing-widgets", 
            "text": "There are a lot of things that can be changed in a widget. \nThere is a pattern to how this works, you simply specify the widget type and the parameter, eg:   .setLabelBg(name, value)  .setButtonFg(name, value)  .setListBoxState(name, value)   This should work for most widgets   containers. \nSome widgets have different types, eg. TextArea   ScrolledTextArea, all types can be configured with the main widget name.", 
            "title": "Changing Widgets"
        }, 
        {
            "location": "/pythonWidgetOptions/#basic-looks", 
            "text": "The following options are available for all widgets:    .set XXX Fg(name, value) \n    Sets the foreground colour (usually the text) of the named widget.    .set XXX Bg(name, value) \n    Sets the background colour of the named widget.    .set XXX DisabledFg(name, value) \n    Sets the disabled foreground colour (usually the text) of the named widget.    .set XXX DisabledBg(name, value) \n    Sets the disabled background colour of the named widget.    .set XXX ActiveFg(name, value) \n    Sets the active foreground colour (usually the text) of the named widget.    .set XXX ActiveBg(name, value) \n    Sets the active background colour of the named widget.    .set XXX Width(name, value) \n    Sets the width of the named widget.    .set XXX Height(name, value) \n    Set the height of the named widget.    .set XXX Relief(name, value) \n    Sets the border of the named widget. One of:  \"sunken\" ,  \"raised\" ,  \"groove\" ,  \"ridge\" ,  \"flat\"       .set XXX State(name, value) \n    Sets the state of the named widget. One of:  \"normal\" ,  \"active\" ,  \"disabled\"       It's possible to change  global GUI settings , such as the background and font. \nIf you need to modify individual settings of a widget, you can access it directly, and use the traditional tKinter methods.    To change the font for a specific widget, try the following:   app.addLabel( l1 ,  Times )\napp.addLabel( l2 ,  Comic Sans )\napp.addLabel( l3 ,  Helvetica )\napp.addLabel( l4 ,  Sans Serif )\napp.addLabel( l5 ,  Verdana )\napp.addLabel( l6 ,  Courier )\n\napp.getLabelWidget( l1 ).config(font= Times 20 italic underline )\napp.getLabelWidget( l2 ).config(font=( Comic Sans ,  20 ,  normal ))\napp.getLabelWidget( l3 ).config(font= Helvetica 20 underline )\napp.getLabelWidget( l4 ).config(font=( Sans Serif ,  20 ,  bold ))\napp.getLabelWidget( l5 ).config(font= Verdana 20 overstrike )\napp.getLabelWidget( l6 ).config(font= Courier 20 )    Advertisement why?    (adsbygoogle = window.adsbygoogle || []).push({});", 
            "title": "Basic  Looks"
        }, 
        {
            "location": "/pythonWidgetOptions/#advanced-looks", 
            "text": "The following are supported by most widgets:    .set XXX Align(name, value) \n    Specifies how to align text within the widget:  \"left\" ,  \"right\" ,  \"center\" \n    Calls  justify  on the Entry widget, and anchor on all others (converting left/right into e/w)  .      .set XXX Anchor(name, value) \n    Sets where the text is positioned within the widget. One of:  \"center\" ,  \"n\" ,  \"s\" ,  \"e\" ,  \"w\" ,  \"ne\" ,  \"nw\" ,  \"se\" ,  \"sw\"       .set XXX Sticky(name, value) \n    Specifies which side of the cell to stick the widget to, as the GUI expands:  \"left\" ,  \"right\" ,  \"both\"    .set XXX Padding(name, [x, y]) \n    Set external padding of the named widget.      .set XXX InPadding(name, [x, y]) \n    Set internal padding of the named widget.", 
            "title": "Advanced Looks"
        }, 
        {
            "location": "/pythonWidgetOptions/#fancy-options", 
            "text": ".set XXX Tooltip(name, value) \n    Sets a tooltip for the named widget, with the specified value. \n    The specified value will be displayed in a small pop-up, when the mouse is left over the widget. \n    If called a second time, it will update the text of the tooltip. \n    See  Tooltips  for more info.      .enable XXX Tooltip(name)     .disable XXX Tooltip(name) \n    These will enable or disable the named tooltip. When disabled, it will not show-up.      .set XXX Cursor(name, value) \n    Sets the cursor shown, when the mouse goes over this widget. \n    There are lots of cursors available, for different platforms, see  here    .set XXX RightClickMenu(name, menu) \n    Links the right-click menu to the specified widget. \n    Make sure you have created a right-click menu first,  .createRightClickMenu(menu)  and added some menu-items to it. \n    See  Menubars  for more info.      .set XXX Focus(name) \n    Gives focus to the specified widget. This is the widget where the user will be able to start typing.      Advertisement why?    (adsbygoogle = window.adsbygoogle || []).push({});", 
            "title": "Fancy Options"
        }, 
        {
            "location": "/pythonWidgetOptions/#widget-manipulation", 
            "text": "The following allow widgets to be manipulated on screen:    .disable XXX (name) \n    Disable the widget - stops the user from interacting with it, but keeps it visible.    .enable XXX (name) \n    Enable a disabled widget.    .hide XXX (name) \n    Temporarily hides the widget from view.    .show XXX (name) \n    Show the widget, if it was already hidden.    .remove XXX (name) \n    Permanently remove the widget (deletes it).    .removeAllWidgets() \n    Permanently remove all widgets.", 
            "title": "Widget Manipulation"
        }, 
        {
            "location": "/pythonWidgetOptions/#grouped-options", 
            "text": "The following are convenience functions, for modifying a group of widgets:      .set XXX Widths(names, val)     .set XXX Heights(names, val) \n    Sets the widths/heights of the specified widgets.    .setAll XXX Widths(val)     .setAll XXX Heights(val) \n    Sets the widths/heights of all widgets of the specified type.", 
            "title": "Grouped Options"
        }, 
        {
            "location": "/pythonWidgetOptions/#tkinter-options", 
            "text": "It's also possible to request a widget, and modify it directly:     .get XXX Widget(name, value=None) \n    This will get the named widget of the specified type. \n    Any standard tkinter options can then be changed. \n    If it's a RadioButton, you also need to specify a  value  - the text displayed in the widget.", 
            "title": "tkinter Options"
        }, 
        {
            "location": "/pythonContextManager/", 
            "text": "The Power of WITH\n\n\nUsing ContextManagers to make GUIs even easier.\n  \n\n\n\n\nOne thing I really wanted to get into appJar, was some indentation - I wanted the code for the GUI to look more like the actual GUI.  \n\n\nI also wanted to simplify the creation of containers, and even the GUI itself.  \n\n\nwith gui(\nMy first GUI\n) as app:\n    app.addLabel(\nlab\n, \nHello world!\n)\n\n\n\n\nThat's it - 2 lines to create a GUI.\n  \n\n\nIf you want to add containers, it's the same process:\n\n\n\n\nfrom appJar import gui\nwith gui(\nMy first GUI\n) as app:\n    app.setBg(\nlightblue\n)\n\n    with app.labelFrame(\nLeft\n):\n        app.addLabel(\nleft\n, \nHello world!\n)\n\n    with app.labelFrame(\nRight\n, row=0, column=1):\n        app.addLabel(\nright\n, \nHello world again!\n)\n\n    app.addNamedButton(\nPRESS ME\n, \nPop-up\n, app.showSubWindow, colspan=2)\n\n    with app.subWindow(\nPop-up\n):\n        app.addLabel(\npopLab\n, \nHere's a pop-up!\n)\n\n\n\n\nAnd, that's all there is to it - this feature is available on all containers, and I think it's going to make things a lot simpler!\n\n\nThe old start/stop functions all still exist, so there is no need to use the \nwith\n command. But if you prefer this method, it's there.  \n\n\nAn added bonus, is that the same syntax works for starting a container or opening a container!\n\n\n\n\n\n\nAdvertisement\nwhy?\n\n\n\n\n\n\n(adsbygoogle = window.adsbygoogle || []).push({});\n\n\n\n\n\n\nAvailable Containers\n\n\n\n\nfrom appJar import gui\n\ndef press(btn):\n    with app.page(windowTitle=\npages\n, pageNumber=1):\n        app.addLabel(\nnewLab\n, \nNew Label\n)\n\nwith gui() as app:\n    app.setGeometry(250, 300)\n    with app.pagedWindow(\npages\n):\n        with app.page():\n            app.addLabel(\nl1\n, \nPage One\n)\n            app.addButton(\nPRESS\n, press)\n        with app.page():\n            app.addLabel(\nl2\n, \nPage Two\n)\n        with app.page():\n            app.addLabel(\nl3\n, \nPage Three\n)\n\n\n\n\nThe following can all be used in the same format to \nstart\n or \nopen\n a container:\n\nHave a look on the \ncontainers page\n for usage information.  \n\n\n\n\n.labelFrame(title, hideTitle=False)\n  \n\n\n.toggleFrame(title)\n  \n\n\n.scrollPane(title)\n  \n\n\n.frame(title)\n  \n\n\n.tabbedFrame(title)\n  \n\n\n.tab(title, tabTitle=None)\n  \n\n\n.panedFrame(title)\n  \n\n\n.panedFrameVertical(title)\n  \n\n\n.pagedWindow(title)\n  \n\n\n.page(windowTitle, pageNumber)\n - \nNB.\n only provide the named parameters if \nopening\n a page  \n\n\n.subWindow(name, title=None, modal=False, blocking=False, transient=False, grouped=True)\n  \n\n\n\n\nIf you're playing with \nttk\n, you can try:  \n\n\n\n\n.notebook(title)\n  \n\n\n.note(title, tabTitle=None)", 
            "title": "The power of WITH"
        }, 
        {
            "location": "/pythonContextManager/#the-power-of-with", 
            "text": "Using ContextManagers to make GUIs even easier.      One thing I really wanted to get into appJar, was some indentation - I wanted the code for the GUI to look more like the actual GUI.    I also wanted to simplify the creation of containers, and even the GUI itself.    with gui( My first GUI ) as app:\n    app.addLabel( lab ,  Hello world! )  That's it - 2 lines to create a GUI.     If you want to add containers, it's the same process:   from appJar import gui\nwith gui( My first GUI ) as app:\n    app.setBg( lightblue )\n\n    with app.labelFrame( Left ):\n        app.addLabel( left ,  Hello world! )\n\n    with app.labelFrame( Right , row=0, column=1):\n        app.addLabel( right ,  Hello world again! )\n\n    app.addNamedButton( PRESS ME ,  Pop-up , app.showSubWindow, colspan=2)\n\n    with app.subWindow( Pop-up ):\n        app.addLabel( popLab ,  Here's a pop-up! )  And, that's all there is to it - this feature is available on all containers, and I think it's going to make things a lot simpler!  The old start/stop functions all still exist, so there is no need to use the  with  command. But if you prefer this method, it's there.    An added bonus, is that the same syntax works for starting a container or opening a container!    Advertisement why?    (adsbygoogle = window.adsbygoogle || []).push({});", 
            "title": "The Power of WITH"
        }, 
        {
            "location": "/pythonContextManager/#available-containers", 
            "text": "from appJar import gui\n\ndef press(btn):\n    with app.page(windowTitle= pages , pageNumber=1):\n        app.addLabel( newLab ,  New Label )\n\nwith gui() as app:\n    app.setGeometry(250, 300)\n    with app.pagedWindow( pages ):\n        with app.page():\n            app.addLabel( l1 ,  Page One )\n            app.addButton( PRESS , press)\n        with app.page():\n            app.addLabel( l2 ,  Page Two )\n        with app.page():\n            app.addLabel( l3 ,  Page Three )  The following can all be used in the same format to  start  or  open  a container: \nHave a look on the  containers page  for usage information.     .labelFrame(title, hideTitle=False)     .toggleFrame(title)     .scrollPane(title)     .frame(title)     .tabbedFrame(title)     .tab(title, tabTitle=None)     .panedFrame(title)     .panedFrameVertical(title)     .pagedWindow(title)     .page(windowTitle, pageNumber)  -  NB.  only provide the named parameters if  opening  a page    .subWindow(name, title=None, modal=False, blocking=False, transient=False, grouped=True)      If you're playing with  ttk , you can try:     .notebook(title)     .note(title, tabTitle=None)", 
            "title": "Available Containers"
        }, 
        {
            "location": "/pythonEvents/", 
            "text": "Events\n\n\n\n\nAn \nevent\n is just calling a function - you want an event to be generated every time the user does something, such as clicking a button, dragging a scale, or pressing a key...  \n\n\nThe \nButton\n has an event automatically linked to it - whenever you press it, a function gets called. The other widgets don't.  \n\n\nBuilt-in Events\n\n\n\n\nappJar currently has four basic types of event you can register:  \n\n\n\n\n.set XXX ChangeFunction(title, function)\n call a function whenever the widget \nchanges\n  \n\n\n.set XXX SubmitFunction(title, function)\n call a function when the widget is \nsubmitted\n    \n\n\n.set XXX OverFunction(title, functions)\n call function(s) when the mouse \nenters/leaves\n the widget  \n\n\n.set XXX DragFunction(title, functions)\n call function(s) when the mouse is \ndragged in/out\n of the widget  \n\n\n\n\nChange \n Submit Events\n\n\nThese do similar things, so probably shouldn't both exist, but have evolved from a single \n.set XXX Function()\n which is now deprecated.  \n\n\n\n\n\n\n.set XXX ChangeFunction(title, function)\n\n    Bind the specified function to the named widget:  \n\n\n\n\nScales, OptionBoxes, SpinBoxes, ListBoxes, RadioButtons \n CheckBoxes, Entries \n TextAreas, and Properties - the function will be called each time the widget is changed.  \n\n\nButtons, Labels \n Images - it is not available.  \n\n\nOther widgets - it will set the \ncommand\n property for the underlying tkinter widget; this may or may not do anything...\n\n\n\n\n\n\n\n\n\n\n.set XXX SubmitFunction(title, function)\n\n    Creates a \nsubmit\n option for some widgets:  \n\n\n\n\nLabels \n Images - it binds a function to the \nLeft-Mouse-Button\n, making the widget clickable.  \n\n\nEntries \n Buttons - it binds a function to the \nEnter\n key  \n\n\nTextAreas - it's not available\n\n\nOther widgets - it does the same as \nChangeFunction\n  \n\n\n\n\n\n\n\n\nfrom appJar import gui\n\ndef songChanged(rb):\n    print(app.getRadioButton(rb))\n\ndef reset(btn):\n    # set back to the default, but don't call the change function\n    app.setRadioButton(\nsong\n, \nKiller Queen\n, callFunction=False)\n\napp=gui()\napp.addRadioButton(\nsong\n, \nKiller Queen\n)\napp.addRadioButton(\nsong\n, \nParadise City\n)\napp.setRadioButtonChangeFunction(\nsong\n, songChanged)\napp.addButton(\nReset\n, reset)\napp.go()\n\n\n\n\nWARNING\n - it's possible to generate a RuntimeError. If you've got two widgets changing the same variable, say a Scale and a SpinBox, and you want a change in one widget to cause an update in the other, you might inadvertently end up stuck in a recursive loop, until the \nstack overflows\n.  \n\n\nIn this case, make sure you set the optional parameter \ncallFunction = False\n when you  call the \nset XXX Function()\n of a widget.  \n\n\nOver Events\n\n\n\n\nSet functions to call whenever the mouse enters (goes over) or leaves the specified widget.  \n\n\n\n\n.set XXX OverFunction(name, [inFunction, outFunction])\n\n    The first function is called when the mouse first enters the widget.\n\n    The second function is called when the mouse leaves the widget.\n\n    If you only want a function to be called when the mouse leaves the widget, pass an array like: \n[None, leave]\n  \n\n\n\n\n    from appJar import gui\n\n    def enter(wdgt): \n        print(\nIN\n, wdgt)\n    def leave(wdgt):\n        print(\nOUT\n, wdgt)\n\n    app=gui()\n    app.addLabel(\nl1\n, \nTesting...\n)\n    app.setLabelOverFunction(\nl1\n, [enter, leave])\n    app.go()\n\n\n\n\n\n\n.setImageMouseOver(title, image)\n\n    Additional function, specific to \nimages\n, to change the specified image, while the mouse is over it.\n\n\n\n\nDrag Events\n\n\nSet functions to call when the mouse button is clicked and dragged on a Label, then released.  \n\n\n\n\n.set XXX DragFunction(name, [startDragFunction, stopDragFunction])\n\n    The named Label will be the only one that can start a drag event.\n\n    The first function will be called when the mouse is initially clicked on the Label.\n\n    The second function will be called when the mouse is released, this can happen anywhere.\n\n    The same rules for passing functions apply as above.  \n\n\n\n\nRegistering Other Events\n\n\nIt's possible to register any of the other \ntkinter event types\n with appJar widgets.\n\nJust get the widget, then call the tkinter \nbind()\n function, passing in the event name and function to call.\n\n\nNB.\n The function you register must receive a single parameter, the event object.  \n\n\n# either grab the widget when it's created, and bind the event\nent = app.addEntry(\ne1\n)\nent.bind(\nFocusOut\n, function_name, add=\n+\n)\n\n# or do the above in one line\napp.addEntry(\ne1\n).bind(\nFocusOut\n, function_name, add=\n+\n)\n\n# or, if doing later on, get the widget from appJar and bind the event\nent = app.getEntryWidget(\ne1\n)\nent.bind(\nFocusOut\n, function_name, add=\n+\n)\n\n# or do the above in one line\napp.getEntryWidget(\ne1\n).bind(\nFocusOut\n, function_name, add=\n+\n)\n\n\n\n\nBinding Keys\n\n\n\n\nWe also sometimes want keys to trigger events.\n\nThe classic example is the \nEnter\n key, we often want to be able to hit the \nEnter\n key to submit a form...\n\n\n\n\n\n\n.enableEnter(function)\n\nLink a function to the \nEnter\n key\n\n\n\n\n\n\n.disableEnter()\n\nUnlink a function from the \nEnter\n  key\n\n\n\n\n\n\nYou may also want to bind other keys to events.\n\nSee \nhere\n for a detailed list of the \nEvent Formats\n.  \n\n\nfrom appJar import gui\ndef keyPress(key):\n    if key == \nUp\n:\n        app.increaseFont()\n    elif key == \nDown\n:\n        app.decreaseFont()\n    elif key == \nF1\n:\n        app.setFont(12)\n\napp = gui(\nButton Demo\n)\napp.addLabel(\ntitle\n, \nPress the arrow keys to change the font\n)\napp.bindKey(\nUp\n, keyPress)\napp.bindKey(\nDown\n, keyPress)\napp.bindKey(\nF1\n, keyPress)\napp.go()\n\n\n\n\n\n\n\n\n.bindKey(key, function)\n\nLink the specified key to the specified function.\n\n\n\n\n\n\n.bindKeys(keys, function)\n\nLink the specified keys to the specified function.\n\n\n\n\n\n\n.unbindKey(key)\n\nUnlink the specified key from any functions bound to it.\n\n\n\n\n\n\n.unbindKeys(keys)\n\nUnlink the specified keys from any functions bound to them.\n\n\n\n\n\n\nStopping the GUI\n\n\n\n\nUsually the user just presses the \nclose icon\n to stop the GUI.\n\nHowever, you might want to let them do it in other ways - maybe by pressing a button...  \n\n\nTo stop the GUI, simply call \napp.stop()\n  \n\n\nIf you want to add a feature to confirm the user really wants to exit, or to save some data, then you'll need a \nstop function\n.  \n\n\n\n\n.setStopFunction(function)\n\n    Set a function to call, before allowing the GUI to be stopped.\n\n    This function should return True/False to confirm if the GUI should stop.  \n\n\n\n\ndef checkStop():\n    return app.yesNoBox(\nConfirm Exit\n, \nAre you sure you want to exit the application?\n)\n\napp.setStopFunction(checkStop)\n\n\n\n\nIf you have a \nLOT\n of widgets (maybe a Table with hundreds of rows), stopping the GUI can take a while...\n\nIn which case, you should enable \nfastStop\n on the GUI.\n\n\nNB.\n this doesn't work from IDLE.  \n\n\napp.setFastStop(True)", 
            "title": "Events"
        }, 
        {
            "location": "/pythonEvents/#events", 
            "text": "An  event  is just calling a function - you want an event to be generated every time the user does something, such as clicking a button, dragging a scale, or pressing a key...    The  Button  has an event automatically linked to it - whenever you press it, a function gets called. The other widgets don't.", 
            "title": "Events"
        }, 
        {
            "location": "/pythonEvents/#built-in-events", 
            "text": "appJar currently has four basic types of event you can register:     .set XXX ChangeFunction(title, function)  call a function whenever the widget  changes     .set XXX SubmitFunction(title, function)  call a function when the widget is  submitted       .set XXX OverFunction(title, functions)  call function(s) when the mouse  enters/leaves  the widget    .set XXX DragFunction(title, functions)  call function(s) when the mouse is  dragged in/out  of the widget", 
            "title": "Built-in Events"
        }, 
        {
            "location": "/pythonEvents/#change-submit-events", 
            "text": "These do similar things, so probably shouldn't both exist, but have evolved from a single  .set XXX Function()  which is now deprecated.      .set XXX ChangeFunction(title, function) \n    Bind the specified function to the named widget:     Scales, OptionBoxes, SpinBoxes, ListBoxes, RadioButtons   CheckBoxes, Entries   TextAreas, and Properties - the function will be called each time the widget is changed.    Buttons, Labels   Images - it is not available.    Other widgets - it will set the  command  property for the underlying tkinter widget; this may or may not do anything...      .set XXX SubmitFunction(title, function) \n    Creates a  submit  option for some widgets:     Labels   Images - it binds a function to the  Left-Mouse-Button , making the widget clickable.    Entries   Buttons - it binds a function to the  Enter  key    TextAreas - it's not available  Other widgets - it does the same as  ChangeFunction        from appJar import gui\n\ndef songChanged(rb):\n    print(app.getRadioButton(rb))\n\ndef reset(btn):\n    # set back to the default, but don't call the change function\n    app.setRadioButton( song ,  Killer Queen , callFunction=False)\n\napp=gui()\napp.addRadioButton( song ,  Killer Queen )\napp.addRadioButton( song ,  Paradise City )\napp.setRadioButtonChangeFunction( song , songChanged)\napp.addButton( Reset , reset)\napp.go()  WARNING  - it's possible to generate a RuntimeError. If you've got two widgets changing the same variable, say a Scale and a SpinBox, and you want a change in one widget to cause an update in the other, you might inadvertently end up stuck in a recursive loop, until the  stack overflows .    In this case, make sure you set the optional parameter  callFunction = False  when you  call the  set XXX Function()  of a widget.", 
            "title": "Change &amp; Submit Events"
        }, 
        {
            "location": "/pythonEvents/#over-events", 
            "text": "Set functions to call whenever the mouse enters (goes over) or leaves the specified widget.     .set XXX OverFunction(name, [inFunction, outFunction]) \n    The first function is called when the mouse first enters the widget. \n    The second function is called when the mouse leaves the widget. \n    If you only want a function to be called when the mouse leaves the widget, pass an array like:  [None, leave]          from appJar import gui\n\n    def enter(wdgt): \n        print( IN , wdgt)\n    def leave(wdgt):\n        print( OUT , wdgt)\n\n    app=gui()\n    app.addLabel( l1 ,  Testing... )\n    app.setLabelOverFunction( l1 , [enter, leave])\n    app.go()   .setImageMouseOver(title, image) \n    Additional function, specific to  images , to change the specified image, while the mouse is over it.", 
            "title": "Over Events"
        }, 
        {
            "location": "/pythonEvents/#drag-events", 
            "text": "Set functions to call when the mouse button is clicked and dragged on a Label, then released.     .set XXX DragFunction(name, [startDragFunction, stopDragFunction]) \n    The named Label will be the only one that can start a drag event. \n    The first function will be called when the mouse is initially clicked on the Label. \n    The second function will be called when the mouse is released, this can happen anywhere. \n    The same rules for passing functions apply as above.", 
            "title": "Drag Events"
        }, 
        {
            "location": "/pythonEvents/#registering-other-events", 
            "text": "It's possible to register any of the other  tkinter event types  with appJar widgets. \nJust get the widget, then call the tkinter  bind()  function, passing in the event name and function to call.  NB.  The function you register must receive a single parameter, the event object.    # either grab the widget when it's created, and bind the event\nent = app.addEntry( e1 )\nent.bind( FocusOut , function_name, add= + )\n\n# or do the above in one line\napp.addEntry( e1 ).bind( FocusOut , function_name, add= + )\n\n# or, if doing later on, get the widget from appJar and bind the event\nent = app.getEntryWidget( e1 )\nent.bind( FocusOut , function_name, add= + )\n\n# or do the above in one line\napp.getEntryWidget( e1 ).bind( FocusOut , function_name, add= + )", 
            "title": "Registering Other Events"
        }, 
        {
            "location": "/pythonEvents/#binding-keys", 
            "text": "We also sometimes want keys to trigger events. \nThe classic example is the  Enter  key, we often want to be able to hit the  Enter  key to submit a form...    .enableEnter(function) \nLink a function to the  Enter  key    .disableEnter() \nUnlink a function from the  Enter   key    You may also want to bind other keys to events. \nSee  here  for a detailed list of the  Event Formats .    from appJar import gui\ndef keyPress(key):\n    if key ==  Up :\n        app.increaseFont()\n    elif key ==  Down :\n        app.decreaseFont()\n    elif key ==  F1 :\n        app.setFont(12)\n\napp = gui( Button Demo )\napp.addLabel( title ,  Press the arrow keys to change the font )\napp.bindKey( Up , keyPress)\napp.bindKey( Down , keyPress)\napp.bindKey( F1 , keyPress)\napp.go()    .bindKey(key, function) \nLink the specified key to the specified function.    .bindKeys(keys, function) \nLink the specified keys to the specified function.    .unbindKey(key) \nUnlink the specified key from any functions bound to it.    .unbindKeys(keys) \nUnlink the specified keys from any functions bound to them.", 
            "title": "Binding Keys"
        }, 
        {
            "location": "/pythonEvents/#stopping-the-gui", 
            "text": "Usually the user just presses the  close icon  to stop the GUI. \nHowever, you might want to let them do it in other ways - maybe by pressing a button...    To stop the GUI, simply call  app.stop()     If you want to add a feature to confirm the user really wants to exit, or to save some data, then you'll need a  stop function .     .setStopFunction(function) \n    Set a function to call, before allowing the GUI to be stopped. \n    This function should return True/False to confirm if the GUI should stop.     def checkStop():\n    return app.yesNoBox( Confirm Exit ,  Are you sure you want to exit the application? )\n\napp.setStopFunction(checkStop)  If you have a  LOT  of widgets (maybe a Table with hundreds of rows), stopping the GUI can take a while... \nIn which case, you should enable  fastStop  on the GUI.  NB.  this doesn't work from IDLE.    app.setFastStop(True)", 
            "title": "Stopping the GUI"
        }, 
        {
            "location": "/pythonLoopsAndSleeps/", 
            "text": "Loops \n Sleeps\n\n\n\n\nWhen you call \napp.go()\n you start a loop in the GUI that is constantly checking for \nevents\n - every time it finds an event, it processes it.  \n\n\nBut\n, if an event takes a long time to process, the GUI loop won't be checking for other events - this is when the GUI hangs (stops processing events).  \n\n\nThat's why your events need to be quick - they shouldn't have \nloops\n or \nsleeps\n.  \n\n\nThere are a few ways to get around this problem...  \n\n\nSleeps\n\n\n\n\nIf you want to do something at a later date, you can use the \n.after()\n function to specify when it should happen.  \n\n\n\n\n\n\n.after(delay_ms, function, *args)\n\nThis will cause the specified \nfunction\n to be executed after the specified number of milliseconds.\n\nAdditional parameters for the function can be specified, by setting \n*args\n.\n\nIt will return an ID, which can be used to cancel the function, if it hasn't already started.  \n\n\n\n\n\n\n.afterCancel(afterId)\n\nThis will cancel the specified function, if it hasn't already started.  \n\n\n\n\n\n\n\n\n\n\nAdvertisement\nwhy?\n\n\n\n\n\n\n(adsbygoogle = window.adsbygoogle || []).push({});\n\n\n\n\n\n\nInfinite Loops\n\n\n\n\nIf you just want something to keep happening forever - maybe updating a statusbar or showing a clock, you can use appJar's built in loop.  \n\n\nAny functions registered in this way, are called at set intervals.  \n\n\n\n\n\n\n.registerEvent(function)\n\nThis will cause the GUI to keep repeating the named function in the background.\n\nBy default, the function will repeat every second.  \n\n\n\n\n\n\n.setPollTime(time)\n\nIf you want your functions to be called more or less frequently, change the frequency here.\n\n\n\n\n\n\n#function to set the status bar\ndef getLocation():\n    x,y,z = mc.player.getPos()\n    app.setStatusbar(\nX: \n+ str(round(x,3)), 0)\n    app.setStatusbar(\nY: \n+ str(round(y,3)), 1)\n    app.setStatusbar(\nZ: \n+ str(round(z,3)), 2)\n\n# call the getLocation function every second\napp.registerEvent(getLocation)\n\n\n\n\nConditional Loops\n\n\n\n\nIf you want your loop to only repeat a certain number of times or until a condition is met, you can put a decision at the beginning of the function and still use appJar's built in loop.  \n\n\nYou can use this method to simulate both \nwhile\n and \nfor\n loops.  \n\n\n# global variable to store the count\ncounter = 10\n\ndef countdown():\n    global counter\n    if counter \n 0:\n        app.setLabel(\ncounter\n, str(counter))\n        counter -= 1\n\napp.registerEvent(countdown)\n\n\n\n\nAdvanced Loops\n\n\n\n\nIf you want more control over your loops, you can simulate your own...  \n\n\nUsing the \n.after()\n function mentioned above, you can simulate a loop, by having your function call \n.after()\n again.  \n\n\n# global variable to store the count\ncounter = 10\n\ndef acceleratingCountdown():\n    global counter\n    if counter \n 0:\n        app.setLabel(\ncounter\n, str(counter))\n        counter -= 1\n        app.after(100*counter, myLoop)\n\napp.after(0, acceleratingCountdown)\n\n\n\n\nThis will simulate a countdown, but each time there is a smaller delay between counts.  \n\n\nLong Tasks\n\n\n\n\nIf you want to call a function that does something that takes a long time - such as working with files or networking, you will need a slightly different approach. Have a look at \nthread support\n in appJar.", 
            "title": "Loops & Sleeps"
        }, 
        {
            "location": "/pythonLoopsAndSleeps/#loops-sleeps", 
            "text": "When you call  app.go()  you start a loop in the GUI that is constantly checking for  events  - every time it finds an event, it processes it.    But , if an event takes a long time to process, the GUI loop won't be checking for other events - this is when the GUI hangs (stops processing events).    That's why your events need to be quick - they shouldn't have  loops  or  sleeps .    There are a few ways to get around this problem...", 
            "title": "Loops &amp; Sleeps"
        }, 
        {
            "location": "/pythonLoopsAndSleeps/#sleeps", 
            "text": "If you want to do something at a later date, you can use the  .after()  function to specify when it should happen.      .after(delay_ms, function, *args) \nThis will cause the specified  function  to be executed after the specified number of milliseconds. \nAdditional parameters for the function can be specified, by setting  *args . \nIt will return an ID, which can be used to cancel the function, if it hasn't already started.      .afterCancel(afterId) \nThis will cancel the specified function, if it hasn't already started.        Advertisement why?    (adsbygoogle = window.adsbygoogle || []).push({});", 
            "title": "Sleeps"
        }, 
        {
            "location": "/pythonLoopsAndSleeps/#infinite-loops", 
            "text": "If you just want something to keep happening forever - maybe updating a statusbar or showing a clock, you can use appJar's built in loop.    Any functions registered in this way, are called at set intervals.      .registerEvent(function) \nThis will cause the GUI to keep repeating the named function in the background. \nBy default, the function will repeat every second.      .setPollTime(time) \nIf you want your functions to be called more or less frequently, change the frequency here.    #function to set the status bar\ndef getLocation():\n    x,y,z = mc.player.getPos()\n    app.setStatusbar( X:  + str(round(x,3)), 0)\n    app.setStatusbar( Y:  + str(round(y,3)), 1)\n    app.setStatusbar( Z:  + str(round(z,3)), 2)\n\n# call the getLocation function every second\napp.registerEvent(getLocation)", 
            "title": "Infinite Loops"
        }, 
        {
            "location": "/pythonLoopsAndSleeps/#conditional-loops", 
            "text": "If you want your loop to only repeat a certain number of times or until a condition is met, you can put a decision at the beginning of the function and still use appJar's built in loop.    You can use this method to simulate both  while  and  for  loops.    # global variable to store the count\ncounter = 10\n\ndef countdown():\n    global counter\n    if counter   0:\n        app.setLabel( counter , str(counter))\n        counter -= 1\n\napp.registerEvent(countdown)", 
            "title": "Conditional Loops"
        }, 
        {
            "location": "/pythonLoopsAndSleeps/#advanced-loops", 
            "text": "If you want more control over your loops, you can simulate your own...    Using the  .after()  function mentioned above, you can simulate a loop, by having your function call  .after()  again.    # global variable to store the count\ncounter = 10\n\ndef acceleratingCountdown():\n    global counter\n    if counter   0:\n        app.setLabel( counter , str(counter))\n        counter -= 1\n        app.after(100*counter, myLoop)\n\napp.after(0, acceleratingCountdown)  This will simulate a countdown, but each time there is a smaller delay between counts.", 
            "title": "Advanced Loops"
        }, 
        {
            "location": "/pythonLoopsAndSleeps/#long-tasks", 
            "text": "If you want to call a function that does something that takes a long time - such as working with files or networking, you will need a slightly different approach. Have a look at  thread support  in appJar.", 
            "title": "Long Tasks"
        }, 
        {
            "location": "/pythonThreads/", 
            "text": "Threads\n\n\nFor things that take a long time...\n  \n\n\n\n\nLooping\n is great for regularly updating the GUI, but if you want to call a function that might take a long time (such as downloading a file) you need to use a \nthread\n.  \n\n\nRunning your functions in threads allows the main GUI loop to keep running, so that the GUI won't hang.  \n\n\nNB.\n Threads don't always work nicely with GUIs, so your thread \nmustn't\n try to change the GUI, instead you will need to put any GUI updates in a Queue (\nsee below\n).  \n\n\nThreading\n\n\n\n\n\n\n\n\n.thread(func, *args, **kwargs)\n\n    This allows you to run your own functions in a separate thread, so they doesn't cause the GUI to hang.\n\n    Pass the name of your function (with no brackets) and any arguments that it requires.\n\n    For example: \napp.thread(myFunction, param1, param2)\n  \n\n\n\n\n\n\n.threadCallback(func, callback, *args, **kwargs)\n\n    Runs the specified function in a thread, with the passed in arguments.\n\n    Once the thread completes, call the callback function, passing in any return value from the original function.  \n\n\n\n\n\n\ndef uploadFile(filename):\n    # this would upload the file to a server\n    pass\n\ndef uploader(btn=None):\n    filename = app.getEntry(\nfile\n)\n    if filename != \n:\n        app.setLabel(\nuploadStatus\n, \nUploading \n + filename)\n\n        # call uploadFile(), with the contents of the \nfile\n entry box\n        # when uploadFile() completes, its return value will be passed to uploadComplete()\n        app.threadCallback(uploadFile, uploadComplete, filename)\n\ndef uploadComplete(success):\n    if success:\n        message = \nUpload complete\n\n    else:\n        message = \nUpload failed\n\n\n    app.queueFunction(app.setLabel, \nuploadStatus\n, message)\n\napp.addLabel(\nuploadStatus\n, \nNo uploads\n)\napp.addFileEntry(\nfile\n)\napp.addButton(\nUPLOAD\n, uploader)\n\n\n\n\nQueueing\n\n\n\n\nYou \nmustn't\n try to update the GUI directly from a thread.\n\nInstead, you should add all your updates to appJar's \nupdate queue\n, and let appJar update the GUI.   \n\n\n\n\n.queueFunction(func, *args, **kwargs)\n\n    Pass the name of the GUI function (with no brackets) you want to call, along with any arguments it requires.\n\n    For example: \napp.queueFunction(app.setLabel, \"l1\", \"new label text\")\n   \n\n\n\n\ndownloadCount = 0\n\ndef downloader():\n    global downloadCount\n    # it's fine to put loops in threads\n    for i in range(5):\n        # update the GUI through the GUI queue\n        app.queueFunction(app.setLabel, \nl1\n, \nStarting download \n + str(downloadCount))\n        # this takes a long time\n        downloadFile(\nfile\n + str(downloadCount) + \n.dat\n)\n        # update the GUI through the GUI queue\n        app.queueFunction(app.setLabel, \nl1\n, \nFinished download \n + str(downloadCount))\n        # it's fine to put sleeps in threads\n        time.sleep(1)\n\n# put the downloader function in its own thread\napp.thread(downloader)", 
            "title": "Threads"
        }, 
        {
            "location": "/pythonThreads/#threads", 
            "text": "For things that take a long time...      Looping  is great for regularly updating the GUI, but if you want to call a function that might take a long time (such as downloading a file) you need to use a  thread .    Running your functions in threads allows the main GUI loop to keep running, so that the GUI won't hang.    NB.  Threads don't always work nicely with GUIs, so your thread  mustn't  try to change the GUI, instead you will need to put any GUI updates in a Queue ( see below ).", 
            "title": "Threads"
        }, 
        {
            "location": "/pythonThreads/#threading", 
            "text": ".thread(func, *args, **kwargs) \n    This allows you to run your own functions in a separate thread, so they doesn't cause the GUI to hang. \n    Pass the name of your function (with no brackets) and any arguments that it requires. \n    For example:  app.thread(myFunction, param1, param2)       .threadCallback(func, callback, *args, **kwargs) \n    Runs the specified function in a thread, with the passed in arguments. \n    Once the thread completes, call the callback function, passing in any return value from the original function.      def uploadFile(filename):\n    # this would upload the file to a server\n    pass\n\ndef uploader(btn=None):\n    filename = app.getEntry( file )\n    if filename !=  :\n        app.setLabel( uploadStatus ,  Uploading   + filename)\n\n        # call uploadFile(), with the contents of the  file  entry box\n        # when uploadFile() completes, its return value will be passed to uploadComplete()\n        app.threadCallback(uploadFile, uploadComplete, filename)\n\ndef uploadComplete(success):\n    if success:\n        message =  Upload complete \n    else:\n        message =  Upload failed \n\n    app.queueFunction(app.setLabel,  uploadStatus , message)\n\napp.addLabel( uploadStatus ,  No uploads )\napp.addFileEntry( file )\napp.addButton( UPLOAD , uploader)", 
            "title": "Threading"
        }, 
        {
            "location": "/pythonThreads/#queueing", 
            "text": "You  mustn't  try to update the GUI directly from a thread. \nInstead, you should add all your updates to appJar's  update queue , and let appJar update the GUI.      .queueFunction(func, *args, **kwargs) \n    Pass the name of the GUI function (with no brackets) you want to call, along with any arguments it requires. \n    For example:  app.queueFunction(app.setLabel, \"l1\", \"new label text\")       downloadCount = 0\n\ndef downloader():\n    global downloadCount\n    # it's fine to put loops in threads\n    for i in range(5):\n        # update the GUI through the GUI queue\n        app.queueFunction(app.setLabel,  l1 ,  Starting download   + str(downloadCount))\n        # this takes a long time\n        downloadFile( file  + str(downloadCount) +  .dat )\n        # update the GUI through the GUI queue\n        app.queueFunction(app.setLabel,  l1 ,  Finished download   + str(downloadCount))\n        # it's fine to put sleeps in threads\n        time.sleep(1)\n\n# put the downloader function in its own thread\napp.thread(downloader)", 
            "title": "Queueing"
        }, 
        {
            "location": "/pythonDnD/", 
            "text": "Drag'n Drop\n\n\n\n\nDrag and Drop functionality is something we're accustomed to in most software.\n\nBy default, python and tkinter don't provide it.\n\n\nWe've incorporated a couple of ways to include drag and drop functionality in \nappJar\n.  \n\n\nDrag'n Drop Between Widgets\n\n\n\n\nThere is a beta version of drag and drop \nbetween labels\n.  \n\n\n\n\n.set XXX DragFunction(name, [startDragFunction, stopDragFunction]\n)\n\n    Set functions to call when the mouse button is dragged from the named widget, or released over any widget.\n\n    The first function will be called when the mouse is initially dragged.\n\n    The second function will be called when the mouse is released.  \n\n\n\n\nfrom appJar import gui\n\ndef drag(widget):\n    print(\nDragged from:\n, widget)\n\ndef drop(widget):\n    print(\nDropped on:\n, widget)\n\napp = gui(\ndnd Demo\n)\n\napp.setFont(20)\napp.setBg(\nSlateGrey\n)\napp.setFg(\nyellow\n)\n\napp.addLabel(\ndragLab\n, \nDrag Me\n)\napp.addHorizontalSeparator()\napp.addLabel(\ndropLab\n, \nDrop Here\n)\n\napp.setLabelDragFunction(\ndragLab\n, [drag, drop])\n\napp.go()\n\n\n\n\n\n\n\n\nAdvertisement\nwhy?\n\n\n\n\n\n\n(adsbygoogle = window.adsbygoogle || []).push({});\n\n\n\n\n\n\nDrag'n Drop Between Applications\n\n\n\n\nThere is also a beta version of drag and drop between applications - at the moment, this has been seen to work on Mac OSX 10.11, Raspberry Pi, and Windows 7 \n 10 - let us know of success on other distributions!  \n\n\nfrom appJar import gui\n\ndef externalDrop(data):\n    print(\nData dropped:\n, data)\n\napp = gui(\nExternal dnd Demo\n)\n\napp.setFont(20)\napp.setBg(\nSlateGrey\n)\napp.setFg(\nyellow\n)\n\napp.addLabel(\ndropLab\n, \nDrop Here\n)\napp.setLabelDropTarget(\ndropLab\n, externalDrop)\n\napp.go()\n\n\n\n\nOnly certain widgets can be registered to receive \nDrop\n events:  \n\n\n\n\n.setEntryDropTarget(title, function=None, replace=True)\n  \n\n\n.setTextAreaDropTarget(title, function=None, replace=True)\n  \n\n\n.setImageDropTarget(title, function=None, replace=True)\n  \n\n\n.setLabelDropTarget(title, function=None, replace=True)\n  \n\n\n.setMessageDropTarget(title, function=None)\n  \n\n\n.setListBoxDropTarget(title, function=None, replace=True)\n  \n\n\n\n\nThen, if you drag a file or a URI onto one of these widgets, the filename/URI will be copied.\n\nOr, if it's an image, the image will be replaced.  \n\n\nIf no function has been set, the contents of the widget will be replaced with the filename/URI.\n\nIf you'd rather append the URI/filename - set \nreplace\n to be False.\n\nIf a function has been set, it will be called, passing in the filename/URI as the only parameter.  \n\n\nThere is currently no support for registering \nDrag\n events.  \n\n\n\n\n.set XXX DragSource(title, function=None)\n  \n\n\n\n\nBeta\n\n\n\n\nNB.\n This is all in beta - long term, the plan is to combine all of this into one set of functions, and provide a unified drag and drop model, that will work across all widgets both within the application and between applications.", 
            "title": "Drag'n Drop"
        }, 
        {
            "location": "/pythonDnD/#dragn-drop", 
            "text": "Drag and Drop functionality is something we're accustomed to in most software. \nBy default, python and tkinter don't provide it.  We've incorporated a couple of ways to include drag and drop functionality in  appJar .", 
            "title": "Drag'n Drop"
        }, 
        {
            "location": "/pythonDnD/#dragn-drop-between-widgets", 
            "text": "There is a beta version of drag and drop  between labels .     .set XXX DragFunction(name, [startDragFunction, stopDragFunction] ) \n    Set functions to call when the mouse button is dragged from the named widget, or released over any widget. \n    The first function will be called when the mouse is initially dragged. \n    The second function will be called when the mouse is released.     from appJar import gui\n\ndef drag(widget):\n    print( Dragged from: , widget)\n\ndef drop(widget):\n    print( Dropped on: , widget)\n\napp = gui( dnd Demo )\n\napp.setFont(20)\napp.setBg( SlateGrey )\napp.setFg( yellow )\n\napp.addLabel( dragLab ,  Drag Me )\napp.addHorizontalSeparator()\napp.addLabel( dropLab ,  Drop Here )\n\napp.setLabelDragFunction( dragLab , [drag, drop])\n\napp.go()    Advertisement why?    (adsbygoogle = window.adsbygoogle || []).push({});", 
            "title": "Drag'n Drop Between Widgets"
        }, 
        {
            "location": "/pythonDnD/#dragn-drop-between-applications", 
            "text": "There is also a beta version of drag and drop between applications - at the moment, this has been seen to work on Mac OSX 10.11, Raspberry Pi, and Windows 7   10 - let us know of success on other distributions!    from appJar import gui\n\ndef externalDrop(data):\n    print( Data dropped: , data)\n\napp = gui( External dnd Demo )\n\napp.setFont(20)\napp.setBg( SlateGrey )\napp.setFg( yellow )\n\napp.addLabel( dropLab ,  Drop Here )\napp.setLabelDropTarget( dropLab , externalDrop)\n\napp.go()  Only certain widgets can be registered to receive  Drop  events:     .setEntryDropTarget(title, function=None, replace=True)     .setTextAreaDropTarget(title, function=None, replace=True)     .setImageDropTarget(title, function=None, replace=True)     .setLabelDropTarget(title, function=None, replace=True)     .setMessageDropTarget(title, function=None)     .setListBoxDropTarget(title, function=None, replace=True)      Then, if you drag a file or a URI onto one of these widgets, the filename/URI will be copied. \nOr, if it's an image, the image will be replaced.    If no function has been set, the contents of the widget will be replaced with the filename/URI. \nIf you'd rather append the URI/filename - set  replace  to be False. \nIf a function has been set, it will be called, passing in the filename/URI as the only parameter.    There is currently no support for registering  Drag  events.     .set XXX DragSource(title, function=None)", 
            "title": "Drag'n Drop Between Applications"
        }, 
        {
            "location": "/pythonDnD/#beta", 
            "text": "NB.  This is all in beta - long term, the plan is to combine all of this into one set of functions, and provide a unified drag and drop model, that will work across all widgets both within the application and between applications.", 
            "title": "Beta"
        }, 
        {
            "location": "/pythonInternationalisation/", 
            "text": "Internationalisation\n\n\n\n\nappJar offers a simple method for supporting multiple languages.\n\nA config file is created, for each supported language, containing a translation for each widget.  \n\n\nFile Format\n\n\nThe config file's name should be the language it represents, with an extension of \n.ini\n.\n\nWithin that file will be a \n[SECTION]\n for each widget type, followed by a list of widget IDs and their translation, separated by colons.  \n\n\nFor example, a file called \nENGLISH.ini\n might contain:  \n\n\n[LABEL]\nl1: some text\nl2: some more text\n\n[BUTTON]\nb1: button a\nb2: button b\n\n[ENTRY]\ne1: --default text--\n\n[LINK]\nl1: New link title\n\n\n\n\nIf no translation is found, the widget's initial value will be used as a default.  \n\n\nNB.\n The filename should be in all uppercase, of type \n.ini\n  \n\n\nCoding It\n\n\nfrom appJar import gui\napp=gui(\nLanguage Demo\n)\n\napp.addLabel(\nl1\n, \ndefault text\n)\napp.addLabel(\nl2\n, \ndefault text\n)\napp.addLabel(\nl3\n, \ndefault text\n)\n\n# as long as the language file has the same name as the button\n# the button can call .changeLanguage directly\napp.addButtons([\nEnglish\n, \nFrancais\n, \n\ud55c\uae00\n], app.changeLanguage)\n\napp.go(\nenglish\n)\n\n\n\n\nThe starting language can be set in the call to \n.go()\n or provided as a \ncommand line argument\n.  \n\n\nTo change the language, call \n.changeLanguage(language)\n  \n\n\nCommand Line Arguments\n\n\nIt is possible to set the starting language as a command line argument:  \n\n\n    python3 languages.py -l ENGLISH\n\n\n\n\nThis will override any language set in the call to \n.go()\n, and removes the need to set one at all.  \n\n\n\n\n\n\nAdvertisement\nwhy?\n\n\n\n\n\n\n(adsbygoogle = window.adsbygoogle || []).push({});\n\n\n\n\n\n\nWidget Support\n\n\n\n\nNB.\n changing the text of a widget through \nsetXXX()\n method's will work, but will not be remembered if the language is changed.  \n\n\n\n\n\n\n[LABEL]\n, \n[BUTTON]\n, \n[ENTRY]\n, \n[CHECKBOX]\n, \n[MESSAGE]\n, \n[LINK]\n, \n[LABELFRAME]\n, \n[TOGGLEFRAME]\n\n    As demonstrated above, use the widget ID, followed by the text to update it with.\n\n    Any labels created by \nauto-label\n widgets are also set here.\n\n\nNB.\n Only the \ndefault value\n of entries will be translated.  \n\n\n\n\n\n\n[IMAGE]\n \n \n[SOUND]\n\n    For \nimages\n, you should provide a valid filename.\n\n    For \nsounds\n, the filename will be translated when the sound function is called - it will be modified with the sound folder \nafter\n translation.  \n\n\n\n\n\n\n[IMAGE]\ndefault-flag.jpg: mexican-flag.jpg\n\n[SOUND]\ndefault-anthem.wav: mexican-anthem.wav\ndefault-speech.wav: mexaican-speech.wav\ndefault-welcome.wav: mexican-welcome.wav\n\n\n\n\n\n\n[TITLE]\n\n    This allows you to change the \nGUI's title\n, the \nsplashscreen's\n text, the \nstatusbar\n's header or the title of any \nSubWindows\n.\n\n\n\n\n[TITLE]\nappJar: Main GUI Title\nsplash: New Splash Text\nstatusbar: DATA\nsub1: SubWindow 1 Title\nsub2: SubWindow 2 Title\n\n\n\n\n\n\n[RADIOBUTTON]\n, \n[PROPERTIES]\n, \n[TABBEDFRAME]\n\n    For these, the ID must be in two parts: the name of the button group/properties/frame followed by the name of the button/property/tab.\n\n    The two should be joined together with a dash:  \n\n\n\n\n[RADIOBUTTON]\nFood-rb1: baguettes\nFood-rb2: fromage\nFood-rb3: vin\n\n[PROPERTIES]\nprops-prop1: Extra Cheese\nprops-prop2: Sweetcorn\nprops-prop3: Pineapple\n\n[TABBEDFRAME]\nmainFrame-Tab1: Information\nmainFrame-Tab2: Extras\nmainFrame-Tab3: Details\n\n\n\n\n\n\n[GRID]\n \n \n[PAGEDWINDOW]\n\n    As above, the key is made of two parts.\n\n    There are three configurable items in a \nGrid\n; the buttons \n label in the right-hand column.\n\n    There are three configurable items in a \nPagedWindow\n; the title, previous \n next buttons.\n\n    These should each be preceeded by the name of the widget:  \n\n\n\n\n[GRID]\nfinancesGrid-actionHeading: Update Row\nfinancesGrid-actionButton: Update\nfinancesGrid-addButton: Add\n\n[PAGEDWINDOW]\nAddress Book-title: AddressBuch\nAddress Book-prevButton: Vorhergehend\nAddress Book-nextButton: Danach\n\n\n\n\n\n\n[LISTBOX]\n, \n[SPINBOX]\n, \n[OPTIONBOX]\n\n    These have multiple values for a single widget, so each value should be on a new line, after the ID.\n\n\nNB.\n You can't translate a SpinBox that was generated from a range.  \n\n\n\n\n[LISTBOX]\nfruits:\n    apples\n    pears\n    grapes\n    bananas\n\n[SPINBOX]\nweekdays:\n    Monday\n    Tuesday\n    Wednesday\n    Thursday\n    Friday\n\n\n\n\n\n\n[POPUP]\n\n    Popups have two pieces of translatable text - the title \n message, it's not possible to translate the buttons.\n\n    As with SpinBoxes \n ListBoxes, the title \n messages should be put on separate lines:  \n\n\n\n\n[POPUP]\nEXIT-POPUP:\n    Confirm Exit\n    Press OK to confirm exit.\nSAVE-POPUP:\n    Confirm Save\n    Press OK to confirm you want to save the file.\n\n\n\n\ndef saveFile(btn):\n    # SAVE-POPUP is a translation key, so the two parameters should be replaced\n    if app.okBox(\nSAVE-POPUP\n, \nConfirm you want to save.\n):\n        saveFile()\n\ndef quit(btn):\n    # SAVE-POPUP is a translation key, so the two parameters should be replaced\n    if app.okBox(\nEXIT-POPUP\n, \nConfirm you want to exit.\n):\n        app.stop()\n\n\n\n\n\n\n[TOOLBAR]\n\n    Each button should be on a new line, if the button has an image the line will be ignored.    \n\n\n\n\n[TOOLBAR]\nbutton1: New Button Name\nbutton2: Another New Button Name\nbutton3: One More New Button Name\nOPEN: This will be ignored because it has an image...\n\n\n\n\n\n\n[TOOLTIP-XXX]\n\n    To translate \ntooltips\n you will need a new section for each widget type, of the format: \n[TOOLTIP-XXX]\n:  \n\n\n\n\n[TOOLTIP-LABEL]\nl1: New tooltip text.\nl2: Another new tooltip text\n\n[TOOLTIP-ENTRY]\ne1: Some more tooltip text\n\n\n\n\nExternal Translations\n\n\n\n\nIt's also possible to store additional translations to use on the fly. These are extra pieces of text you might want to translate during the running of the application, which aren't linked directly to a widget.  \n\n\n[EXTERNAL]\nVALUE-1: This is some translated text.\nVALUE-2: This is some more translated text.\nVALUE-3: This is the last piece of translated text.\n\n\n\n\nThese can then be accessed by using appJar's \n.translate(key, default=None)\n function.  \n\n\n# this function will print out some translated text\ndef showMessage():\n    print(app.translate(\nVALUE-1\n))\n    print(app.translate(\nVALUE-2\n))\n    print(app.translate(\nVALUE-3\n))\n\n\n\n\nThe \ndefault\n value will be returned if no translation is found.  \n\n\nWidgets Not Supported\n\n\n\n\n\n\n[SCALE]\n, \n[TEXTAREA]\n, \n[METER]\n, \n[PIECHART]\n, \n[TREE]\n\n\n[GOOGLEMAPS]\n, \n[MICROBIT]\n, \n[PLOT]\n, \n[SEPARATOR]\n, \n[GRIP]\n\n\n[FRAME]\n, \n[SCROLLPANE]\n, \n[PANEDFRAME]\n\n    These widgets are not included in translation, as they have no static text to change.  \n\n\n\n\n\n\n[DATEPICKER]\n, \n[MENUBAR]\n\n    These widgets have not yet been implemented.  \n\n\n\n\n\n\nPlatform Support\n\n\nNB.\n your platform might not support the characters you want to display.\n\nIn which case, you'll need to install the relevant font.  \n\n\nFor example, to get Korean characters to show on a Raspberry Pi, try:  \n\n\n    sudo apt-get install fonts-nanum\n\n\n\n\nIf you're after other languages, you can try:  \n\n\n    apt-cache search chinese\n\n\n\n\nAnd then install a likely looking font...", 
            "title": "Internationalisation"
        }, 
        {
            "location": "/pythonInternationalisation/#internationalisation", 
            "text": "appJar offers a simple method for supporting multiple languages. \nA config file is created, for each supported language, containing a translation for each widget.", 
            "title": "Internationalisation"
        }, 
        {
            "location": "/pythonInternationalisation/#file-format", 
            "text": "The config file's name should be the language it represents, with an extension of  .ini . \nWithin that file will be a  [SECTION]  for each widget type, followed by a list of widget IDs and their translation, separated by colons.    For example, a file called  ENGLISH.ini  might contain:    [LABEL]\nl1: some text\nl2: some more text\n\n[BUTTON]\nb1: button a\nb2: button b\n\n[ENTRY]\ne1: --default text--\n\n[LINK]\nl1: New link title  If no translation is found, the widget's initial value will be used as a default.    NB.  The filename should be in all uppercase, of type  .ini", 
            "title": "File Format"
        }, 
        {
            "location": "/pythonInternationalisation/#coding-it", 
            "text": "from appJar import gui\napp=gui( Language Demo )\n\napp.addLabel( l1 ,  default text )\napp.addLabel( l2 ,  default text )\napp.addLabel( l3 ,  default text )\n\n# as long as the language file has the same name as the button\n# the button can call .changeLanguage directly\napp.addButtons([ English ,  Francais ,  \ud55c\uae00 ], app.changeLanguage)\n\napp.go( english )  The starting language can be set in the call to  .go()  or provided as a  command line argument .    To change the language, call  .changeLanguage(language)", 
            "title": "Coding It"
        }, 
        {
            "location": "/pythonInternationalisation/#command-line-arguments", 
            "text": "It is possible to set the starting language as a command line argument:        python3 languages.py -l ENGLISH  This will override any language set in the call to  .go() , and removes the need to set one at all.      Advertisement why?    (adsbygoogle = window.adsbygoogle || []).push({});", 
            "title": "Command Line Arguments"
        }, 
        {
            "location": "/pythonInternationalisation/#widget-support", 
            "text": "NB.  changing the text of a widget through  setXXX()  method's will work, but will not be remembered if the language is changed.      [LABEL] ,  [BUTTON] ,  [ENTRY] ,  [CHECKBOX] ,  [MESSAGE] ,  [LINK] ,  [LABELFRAME] ,  [TOGGLEFRAME] \n    As demonstrated above, use the widget ID, followed by the text to update it with. \n    Any labels created by  auto-label  widgets are also set here.  NB.  Only the  default value  of entries will be translated.      [IMAGE]     [SOUND] \n    For  images , you should provide a valid filename. \n    For  sounds , the filename will be translated when the sound function is called - it will be modified with the sound folder  after  translation.      [IMAGE]\ndefault-flag.jpg: mexican-flag.jpg\n\n[SOUND]\ndefault-anthem.wav: mexican-anthem.wav\ndefault-speech.wav: mexaican-speech.wav\ndefault-welcome.wav: mexican-welcome.wav   [TITLE] \n    This allows you to change the  GUI's title , the  splashscreen's  text, the  statusbar 's header or the title of any  SubWindows .   [TITLE]\nappJar: Main GUI Title\nsplash: New Splash Text\nstatusbar: DATA\nsub1: SubWindow 1 Title\nsub2: SubWindow 2 Title   [RADIOBUTTON] ,  [PROPERTIES] ,  [TABBEDFRAME] \n    For these, the ID must be in two parts: the name of the button group/properties/frame followed by the name of the button/property/tab. \n    The two should be joined together with a dash:     [RADIOBUTTON]\nFood-rb1: baguettes\nFood-rb2: fromage\nFood-rb3: vin\n\n[PROPERTIES]\nprops-prop1: Extra Cheese\nprops-prop2: Sweetcorn\nprops-prop3: Pineapple\n\n[TABBEDFRAME]\nmainFrame-Tab1: Information\nmainFrame-Tab2: Extras\nmainFrame-Tab3: Details   [GRID]     [PAGEDWINDOW] \n    As above, the key is made of two parts. \n    There are three configurable items in a  Grid ; the buttons   label in the right-hand column. \n    There are three configurable items in a  PagedWindow ; the title, previous   next buttons. \n    These should each be preceeded by the name of the widget:     [GRID]\nfinancesGrid-actionHeading: Update Row\nfinancesGrid-actionButton: Update\nfinancesGrid-addButton: Add\n\n[PAGEDWINDOW]\nAddress Book-title: AddressBuch\nAddress Book-prevButton: Vorhergehend\nAddress Book-nextButton: Danach   [LISTBOX] ,  [SPINBOX] ,  [OPTIONBOX] \n    These have multiple values for a single widget, so each value should be on a new line, after the ID.  NB.  You can't translate a SpinBox that was generated from a range.     [LISTBOX]\nfruits:\n    apples\n    pears\n    grapes\n    bananas\n\n[SPINBOX]\nweekdays:\n    Monday\n    Tuesday\n    Wednesday\n    Thursday\n    Friday   [POPUP] \n    Popups have two pieces of translatable text - the title   message, it's not possible to translate the buttons. \n    As with SpinBoxes   ListBoxes, the title   messages should be put on separate lines:     [POPUP]\nEXIT-POPUP:\n    Confirm Exit\n    Press OK to confirm exit.\nSAVE-POPUP:\n    Confirm Save\n    Press OK to confirm you want to save the file.  def saveFile(btn):\n    # SAVE-POPUP is a translation key, so the two parameters should be replaced\n    if app.okBox( SAVE-POPUP ,  Confirm you want to save. ):\n        saveFile()\n\ndef quit(btn):\n    # SAVE-POPUP is a translation key, so the two parameters should be replaced\n    if app.okBox( EXIT-POPUP ,  Confirm you want to exit. ):\n        app.stop()   [TOOLBAR] \n    Each button should be on a new line, if the button has an image the line will be ignored.       [TOOLBAR]\nbutton1: New Button Name\nbutton2: Another New Button Name\nbutton3: One More New Button Name\nOPEN: This will be ignored because it has an image...   [TOOLTIP-XXX] \n    To translate  tooltips  you will need a new section for each widget type, of the format:  [TOOLTIP-XXX] :     [TOOLTIP-LABEL]\nl1: New tooltip text.\nl2: Another new tooltip text\n\n[TOOLTIP-ENTRY]\ne1: Some more tooltip text", 
            "title": "Widget Support"
        }, 
        {
            "location": "/pythonInternationalisation/#external-translations", 
            "text": "It's also possible to store additional translations to use on the fly. These are extra pieces of text you might want to translate during the running of the application, which aren't linked directly to a widget.    [EXTERNAL]\nVALUE-1: This is some translated text.\nVALUE-2: This is some more translated text.\nVALUE-3: This is the last piece of translated text.  These can then be accessed by using appJar's  .translate(key, default=None)  function.    # this function will print out some translated text\ndef showMessage():\n    print(app.translate( VALUE-1 ))\n    print(app.translate( VALUE-2 ))\n    print(app.translate( VALUE-3 ))  The  default  value will be returned if no translation is found.", 
            "title": "External Translations"
        }, 
        {
            "location": "/pythonInternationalisation/#widgets-not-supported", 
            "text": "[SCALE] ,  [TEXTAREA] ,  [METER] ,  [PIECHART] ,  [TREE]  [GOOGLEMAPS] ,  [MICROBIT] ,  [PLOT] ,  [SEPARATOR] ,  [GRIP]  [FRAME] ,  [SCROLLPANE] ,  [PANEDFRAME] \n    These widgets are not included in translation, as they have no static text to change.      [DATEPICKER] ,  [MENUBAR] \n    These widgets have not yet been implemented.", 
            "title": "Widgets Not Supported"
        }, 
        {
            "location": "/pythonInternationalisation/#platform-support", 
            "text": "NB.  your platform might not support the characters you want to display. \nIn which case, you'll need to install the relevant font.    For example, to get Korean characters to show on a Raspberry Pi, try:        sudo apt-get install fonts-nanum  If you're after other languages, you can try:        apt-cache search chinese  And then install a likely looking font...", 
            "title": "Platform Support"
        }, 
        {
            "location": "/pythonSettings/", 
            "text": "appJar Settings\n\n\nappJar can remember various GUI settings, and restore them on launch.  \n\n\nSettings\n\n\nappJar will store the following settings:\n\n\n[GEOM]\n    # geometry = string - size, location\n    # fullscreen = True/False\n    # minsize = string - x,y\n    # state = string - withdrawn/zoomed\n[TOOLBAR]\n    # pinned = True/False\n\n[TOGGLES]\n    # name = True/False\n[TABS]\n    # name = selected tab\n[PAGES]\n    # name = selected page\n\n[SUBWINDOWS]\n    # name = True/False\n[SUBWINDOW_NAME]\n    # geometry = string - size, location\n    # fullscreen = True/False\n    # minsize = string - x,y\n    # state = string - withdrawn/zoomed\n\n[EXTERNAL]\n    # name = value\n\n\n\n\nUsage\n\n\n\n\n\n\n\n\ngui(useSettings=False)\n\n    Set this flag to \nTrue\n in the constructor to enable settings.\n\n    This will cause them to be loaded \n saved automatically.  \n\n\n\n\n\n\n.loadSettings(fileName=\"appJar.ini\", useSettings=True)\n\n    This function can be called manually if you want to load settings at a later time.\n\n    An alternative file can be specified.\n\n    If \nuseSettings\n is set to False, appjar won't save the settings back at the end.  \n\n\n\n\n\n\n.saveSettings(fileName=\"appJar.ini\")\n\n    This will save the current settings, with an optional file name.  \n\n\n\n\n\n\n.getSetting(name, default=None)\n\n    This allows you to request a user setting of the specified name.\n\n    If no setting is found, the \ndefault\n value will be returned.  \n\n\n\n\n\n\n.setSetting(name, value)\n\n    This will store the named setting, with the specified value.\n\n    You must make sure settings are being saved, for this to take effect.  \n\n\n\n\n\n\nCommand Line Arguments\n\n\n\n\nIt's possible to switch on settings from the command line.\n\nSimply use the \n-s\n flag, with an optional  file name:  \n\n\npython3 themes.py -s  # turn on settings\n\n\n\n\nTurn on settings, with a specified filename:  \n\n\npython3 themes.py -s myFile.txt  # turn on settings with a specified filename", 
            "title": "Saving Settings"
        }, 
        {
            "location": "/pythonSettings/#appjar-settings", 
            "text": "appJar can remember various GUI settings, and restore them on launch.", 
            "title": "appJar Settings"
        }, 
        {
            "location": "/pythonSettings/#settings", 
            "text": "appJar will store the following settings:  [GEOM]\n    # geometry = string - size, location\n    # fullscreen = True/False\n    # minsize = string - x,y\n    # state = string - withdrawn/zoomed\n[TOOLBAR]\n    # pinned = True/False\n\n[TOGGLES]\n    # name = True/False\n[TABS]\n    # name = selected tab\n[PAGES]\n    # name = selected page\n\n[SUBWINDOWS]\n    # name = True/False\n[SUBWINDOW_NAME]\n    # geometry = string - size, location\n    # fullscreen = True/False\n    # minsize = string - x,y\n    # state = string - withdrawn/zoomed\n\n[EXTERNAL]\n    # name = value", 
            "title": "Settings"
        }, 
        {
            "location": "/pythonSettings/#usage", 
            "text": "gui(useSettings=False) \n    Set this flag to  True  in the constructor to enable settings. \n    This will cause them to be loaded   saved automatically.      .loadSettings(fileName=\"appJar.ini\", useSettings=True) \n    This function can be called manually if you want to load settings at a later time. \n    An alternative file can be specified. \n    If  useSettings  is set to False, appjar won't save the settings back at the end.      .saveSettings(fileName=\"appJar.ini\") \n    This will save the current settings, with an optional file name.      .getSetting(name, default=None) \n    This allows you to request a user setting of the specified name. \n    If no setting is found, the  default  value will be returned.      .setSetting(name, value) \n    This will store the named setting, with the specified value. \n    You must make sure settings are being saved, for this to take effect.", 
            "title": "Usage"
        }, 
        {
            "location": "/pythonSettings/#command-line-arguments", 
            "text": "It's possible to switch on settings from the command line. \nSimply use the  -s  flag, with an optional  file name:    python3 themes.py -s  # turn on settings  Turn on settings, with a specified filename:    python3 themes.py -s myFile.txt  # turn on settings with a specified filename", 
            "title": "Command Line Arguments"
        }, 
        {
            "location": "/pythonLogging/", 
            "text": "Logging in appJar\n\n\n\n\nappJar\n makes use of Python's built in \nlogging capabilities\n.  \n\n\nLogging works in a similar way to the \nprint()\n function, except you also provide a parameter indicating the importance of the message - the logger will then only display messages of the right importance.\n\n\nThere are five levels of importance:  \n\n\n\n\nCRITICAL\n - a very serious problem, the GUI may well stop\n\n\nERROR\n - a more serious problem, preventing something from happening\n\n\nWARNING\n - something unexpected happened\n\n\nINFO\n - confirmation that things are working as expected\n\n\nDEBUG\n - detailed diagnostic information\n\n\nTRACE\n - used by appJar to log DEBUG information\n\n\n\n\nBy default, \nappJar\n will only log messages of importance \nWARNING\n or above. And, by default, appJar will simply print them to the console (screen).  \n\n\nappJar\n provides some useful functions for logging:\n\n\n\n\n.logMessage(msg, level, *args)\n - log a message, of the specified importance, with any specified arguments (see below)  \n\n\n.setLogLevel(level)\n - set the logging level, all messages of less importance than this will be ignored  \n\n\n.setLogFile(fileName)\n - write all log messages to the named file, instead of the console  \n\n\n\n\nYou can also use the following convenience functions for logging messages:\n\n\n\n\n.critical(msg, *args)\n\n\n.error(msg, *args)\n\n\n.warn(msg, *args)\n\n\n.info(msg, *args)\n\n\n.debug(msg, *args)\n\n\n.trace(msg, *args)\n\n\n\n\nOptional Arguments:\n\n\n\n\n*args\n allows you to use a \nstring formatter\n with your message.\n\nThis can speed things up slightly, as it avoids unnecessary string concatenations, as well as automatically casting all variables to Strings:  \n\n\n\n\nname = app.getEntry(\nname\n)\nlocation = app.getEntry(\nlocation\n)\napp.debug(\nUser %s, has accessed the app from %s\n, name, location)\n\n\n\n\n\n\n\n\nAdvertisement\nwhy?\n\n\n\n\n\n\n(adsbygoogle = window.adsbygoogle || []).push({});\n\n\n\n\n\n\nLogging to file\n\n\n\n\nOne of the benefits of using Python's logging capabilities, is the ability to have them logged to a file.\n\nBy setting a \nfileName\n, messages will no longer appear on the screen. Instead, they will be written to the named file.\n\nThe \nlogLevel\n is also increased to \nDEBUG\n  \n\n\nCommand Line Arguments\n\n\n\n\nIt's possible to set the starting log level using a \ncommand line argument\n.\n\nSimply use the first letter of the desired log level as an argument when you start your app:  \n\n\npython3 logging.py -d  # log DEBUG messages and above\n\n\n\n\nIt's also possible to set the file name to log to:  \n\n\npython3 logging.py -f debug.log  # log messages to a file called debug.log\n\n\n\n\nExternal Logging\n\n\n\n\nIf you want to bypass the \nappJar\n functions, and use the logger directly in your code, simply request your own copy of the logger: \nlogger = logging.getLogger(\"appJar\")\n.  \n\n\nYou can then talk directly to the same logging mechanism that \nappJar\n uses.  \n\n\nHow to use\n\n\n\n\nThe idea behind having different levels of logging, is that you don't have to remove all of your debug \n testing messages. It is common to include lots of testing messages during development, and then remove them once we're satisfied the code is working. However, these might sometimes prove useful in the future, when trying to diagnose something that has gone wrong.  \n\n\nWith logging, you can register those messages as \nDEBUG\n or \nINFO\n. Then set the \nlogLevel\n to be \nINFO\n during development, and \nWARNING\n once development is complete. Then, if you ever need them, you can simply change the \nlogLevel\n.", 
            "title": "Logging"
        }, 
        {
            "location": "/pythonLogging/#logging-in-appjar", 
            "text": "appJar  makes use of Python's built in  logging capabilities .    Logging works in a similar way to the  print()  function, except you also provide a parameter indicating the importance of the message - the logger will then only display messages of the right importance.  There are five levels of importance:     CRITICAL  - a very serious problem, the GUI may well stop  ERROR  - a more serious problem, preventing something from happening  WARNING  - something unexpected happened  INFO  - confirmation that things are working as expected  DEBUG  - detailed diagnostic information  TRACE  - used by appJar to log DEBUG information   By default,  appJar  will only log messages of importance  WARNING  or above. And, by default, appJar will simply print them to the console (screen).    appJar  provides some useful functions for logging:   .logMessage(msg, level, *args)  - log a message, of the specified importance, with any specified arguments (see below)    .setLogLevel(level)  - set the logging level, all messages of less importance than this will be ignored    .setLogFile(fileName)  - write all log messages to the named file, instead of the console     You can also use the following convenience functions for logging messages:   .critical(msg, *args)  .error(msg, *args)  .warn(msg, *args)  .info(msg, *args)  .debug(msg, *args)  .trace(msg, *args)", 
            "title": "Logging in appJar"
        }, 
        {
            "location": "/pythonLogging/#optional-arguments", 
            "text": "*args  allows you to use a  string formatter  with your message. \nThis can speed things up slightly, as it avoids unnecessary string concatenations, as well as automatically casting all variables to Strings:     name = app.getEntry( name )\nlocation = app.getEntry( location )\napp.debug( User %s, has accessed the app from %s , name, location)    Advertisement why?    (adsbygoogle = window.adsbygoogle || []).push({});", 
            "title": "Optional Arguments:"
        }, 
        {
            "location": "/pythonLogging/#logging-to-file", 
            "text": "One of the benefits of using Python's logging capabilities, is the ability to have them logged to a file. \nBy setting a  fileName , messages will no longer appear on the screen. Instead, they will be written to the named file. \nThe  logLevel  is also increased to  DEBUG", 
            "title": "Logging to file"
        }, 
        {
            "location": "/pythonLogging/#command-line-arguments", 
            "text": "It's possible to set the starting log level using a  command line argument . \nSimply use the first letter of the desired log level as an argument when you start your app:    python3 logging.py -d  # log DEBUG messages and above  It's also possible to set the file name to log to:    python3 logging.py -f debug.log  # log messages to a file called debug.log", 
            "title": "Command Line Arguments"
        }, 
        {
            "location": "/pythonLogging/#external-logging", 
            "text": "If you want to bypass the  appJar  functions, and use the logger directly in your code, simply request your own copy of the logger:  logger = logging.getLogger(\"appJar\") .    You can then talk directly to the same logging mechanism that  appJar  uses.", 
            "title": "External Logging"
        }, 
        {
            "location": "/pythonLogging/#how-to-use", 
            "text": "The idea behind having different levels of logging, is that you don't have to remove all of your debug   testing messages. It is common to include lots of testing messages during development, and then remove them once we're satisfied the code is working. However, these might sometimes prove useful in the future, when trying to diagnose something that has gone wrong.    With logging, you can register those messages as  DEBUG  or  INFO . Then set the  logLevel  to be  INFO  during development, and  WARNING  once development is complete. Then, if you ever need them, you can simply change the  logLevel .", 
            "title": "How to use"
        }, 
        {
            "location": "/pythonCommandLine/", 
            "text": "Command Line Arguments\n\n\nappJar supports a number of \ncommand line arguments\n.\n\nThese are values that can be set when appJar is initially run.  \n\n\nOptions\n\n\n\n\n\n\n--help\n \n-h\n\n    This will display a help message, then exit.  \n\n\n\n\n\n\n--version\n \n-v\n\n    This will display the version of appJar, then exit.  \n\n\n\n\n\n\n-l [filename.ini]\n\n    This allows you to set the starting language, only useful if using \ninternationalisation\n.\n\n    It will override any language configured in the \n.go()\n function call.  \n\n\n\n\n\n\n-c\n, \n-e\n, \n-w\n, \n-i\n, \n-d\n, \nt\n\n    This sets the \nlogging level\n:  \n\n\n\n\n-c\n   only log CRITICAL messages  \n\n\n-e\n   log ERROR messages and above  \n\n\n-w\n   log WARNING messages and above\n\n\n-i\n   log INFO messages and above  \n\n\n-d\n   log DEBUG messages and above  \n\n\n-t\n   log TRACE messages and above  \n\n\n\n\n\n\n\n\n-f [filename.log]\n\n    This allows you to specify a \nfile\n to log messages to.  \n\n\n\n\n\n\n-s [appJar.ini]\n\n    This allows you to specify a \nsettings file\n to load/save settings to.  \n\n\n\n\n\n\n--ttk [theme name]\n\n    This allows you to request appJar uses \nttk widgets\n where possible.\n\n    It can followed by an optional theme name, to declare which style to use for ttk widgets.  \n\n\n\n\n\n\n\n\n\n\nAdvertisement\nwhy?\n\n\n\n\n\n\n(adsbygoogle = window.adsbygoogle || []).push({});\n\n\n\n\n\n\nExample\n\n\n\n\nThe following example will start the app logging DEBUG messages, and using an ENGLISH language file:  \n\n\n    python3 demoApp.py -d -l ENGLISH\n\n\n\n\nDisabling\n\n\nIf you want to provide your own command line argument handling, then you will need to disable it in appJar, as appJar will show an error message if invalid arguments are found.  \n\n\nTo do this, you can set the \nhandleArgs\n flag to False in the appJar constructor:  \n\n\nfrom appJar import gui\napp = gui(handleArgs=False) # disable argument handling\napp.addLabel(\nl1\n, \nNo argument handling\n)\napp.go()", 
            "title": "Command Line Arguments"
        }, 
        {
            "location": "/pythonCommandLine/#command-line-arguments", 
            "text": "appJar supports a number of  command line arguments . \nThese are values that can be set when appJar is initially run.", 
            "title": "Command Line Arguments"
        }, 
        {
            "location": "/pythonCommandLine/#options", 
            "text": "--help   -h \n    This will display a help message, then exit.      --version   -v \n    This will display the version of appJar, then exit.      -l [filename.ini] \n    This allows you to set the starting language, only useful if using  internationalisation . \n    It will override any language configured in the  .go()  function call.      -c ,  -e ,  -w ,  -i ,  -d ,  t \n    This sets the  logging level :     -c    only log CRITICAL messages    -e    log ERROR messages and above    -w    log WARNING messages and above  -i    log INFO messages and above    -d    log DEBUG messages and above    -t    log TRACE messages and above       -f [filename.log] \n    This allows you to specify a  file  to log messages to.      -s [appJar.ini] \n    This allows you to specify a  settings file  to load/save settings to.      --ttk [theme name] \n    This allows you to request appJar uses  ttk widgets  where possible. \n    It can followed by an optional theme name, to declare which style to use for ttk widgets.        Advertisement why?    (adsbygoogle = window.adsbygoogle || []).push({});", 
            "title": "Options"
        }, 
        {
            "location": "/pythonCommandLine/#example", 
            "text": "The following example will start the app logging DEBUG messages, and using an ENGLISH language file:        python3 demoApp.py -d -l ENGLISH", 
            "title": "Example"
        }, 
        {
            "location": "/pythonCommandLine/#disabling", 
            "text": "If you want to provide your own command line argument handling, then you will need to disable it in appJar, as appJar will show an error message if invalid arguments are found.    To do this, you can set the  handleArgs  flag to False in the appJar constructor:    from appJar import gui\napp = gui(handleArgs=False) # disable argument handling\napp.addLabel( l1 ,  No argument handling )\napp.go()", 
            "title": "Disabling"
        }, 
        {
            "location": "/pythonTtk/", 
            "text": "ttk (very BETA)\n\n\nappJar includes experimental support for \nttk\n,  a \ntk themed widget set\n.  \n\n\nIf you run appJar in ttk mode, some of the widgets will be replaced with more native looking widgets.  \n\n\nNB.\n appJar has a lot of built in styling for standard widgets, supporting ttk has required changing how all this is done. When you come across issues, please log them in GitHub.  \n\n\nEnabling ttk\n\n\n\n\n\n\n\n\n.gui(useTtk=True)\n\n    To enable ttk, set the \nuseTtk\n flag in the appJar constructor to \nTrue\n.\n\n    If you want to specify a particular theme, set it to the name of the theme.  \n\n\n\n\n\n\n.setTtkTheme(theme)\n\n    This allows you to choose a different theme to use.  \n\n\n\n\n\n\n.getTtkTheme()\n\n    Returns the currently selected ttk theme as a string. \n\n\n\n\n\n\nThemes\n\n\n\n\nttk will default to a theme similar to the operating system.\n\nA list of additional themes can be displayed by calling:\n\n\n\n\n.getTtkThemes()\n\n    Returns a list of theme names.  \n\n\n\n\nAdditional themes can be installed using \nttk extensions\n.  \n\n\nThese can be installed via pip: \npip install ttkthemes\n\nAnd then used the same as any other theme: \napp.setTtkTheme(\"black\")\n.  \n\n\nStyling ttk Widgets\n\n\n\n\nappJar stores the ttk style as \napp.ttkStyle\n this can be modified or changed directly as required.  \n\n\nDefault Widget Style\n\n\nEach widget type has its own style, such as \nTLabel\n or \nTButton\n.\n\nTo change the style for all widgets of a certain type, reconfigure these styles:\n\n\napp.ttkStyle.configure(\nTLabel\n, foreground=\ngreen\n, background=\nblue\n)\n\n\n\n\nRoot Style\n\n\nAll widgets inherit their style from the root style, known simply as \n.\n\nIf you want to change the style of all widgets, you can modify the root style.\n\n\nNB.\n if particular widget types have set their own styles, modifying the root style won't change them.  \n\n\napp.ttkStyle.configure(\n.\n, background=\nblack\n, foreground=\nwhite\n)\n\n\n\n\nCreate Your Own Styles\n\n\nFinally, it's possible to create your own styles, and use them for particular widgets.\n\nYour new style should inherit from the widget's style: \nMyButton.TButton\n  \n\n\napp.ttkStyle.configure(\nMyButton.TButton\n, foreground=\nred\n)\n\n\n\n\nYou then need to apply this style to the relevant widgets:\n\n\n\n\n.set XXX Style(style)\n\n    This lets you specify the name of a style for a particular widget.  \n\n\n\n\napp.setEntryStyle(\nName\n, \nBW.TEntry\n)\n\n\n\n\nBuilt in Setters\n\n\n\n\nYou can still use the existing setters for background \n.setBg()\n and foreground \n.setFg()\n:  \n\n\napp.setBg(\nblue\n)\napp.setFg(\nyellow\n)\n\n\n\n\nCommand Line Arguments\n\n\n\n\nIt's possible to switch on ttk theming from the \ncommand line\n.\n\nSimply use the \n--ttk\n flag, with an optional theme name:  \n\n\npython3 themes.py --ttk  # turn on ttk widgets\n\n\n\n\nTurn on ttk widgets and set a theme:  \n\n\npython3 themes.py --ttk aqua # turn on ttk with the aqua theme", 
            "title": "ttk (BETA)"
        }, 
        {
            "location": "/pythonTtk/#ttk-very-beta", 
            "text": "appJar includes experimental support for  ttk ,  a  tk themed widget set .    If you run appJar in ttk mode, some of the widgets will be replaced with more native looking widgets.    NB.  appJar has a lot of built in styling for standard widgets, supporting ttk has required changing how all this is done. When you come across issues, please log them in GitHub.", 
            "title": "ttk (very BETA)"
        }, 
        {
            "location": "/pythonTtk/#enabling-ttk", 
            "text": ".gui(useTtk=True) \n    To enable ttk, set the  useTtk  flag in the appJar constructor to  True . \n    If you want to specify a particular theme, set it to the name of the theme.      .setTtkTheme(theme) \n    This allows you to choose a different theme to use.      .getTtkTheme() \n    Returns the currently selected ttk theme as a string.", 
            "title": "Enabling ttk"
        }, 
        {
            "location": "/pythonTtk/#themes", 
            "text": "ttk will default to a theme similar to the operating system. \nA list of additional themes can be displayed by calling:   .getTtkThemes() \n    Returns a list of theme names.     Additional themes can be installed using  ttk extensions .    These can be installed via pip:  pip install ttkthemes \nAnd then used the same as any other theme:  app.setTtkTheme(\"black\") .", 
            "title": "Themes"
        }, 
        {
            "location": "/pythonTtk/#styling-ttk-widgets", 
            "text": "appJar stores the ttk style as  app.ttkStyle  this can be modified or changed directly as required.", 
            "title": "Styling ttk Widgets"
        }, 
        {
            "location": "/pythonTtk/#default-widget-style", 
            "text": "Each widget type has its own style, such as  TLabel  or  TButton . \nTo change the style for all widgets of a certain type, reconfigure these styles:  app.ttkStyle.configure( TLabel , foreground= green , background= blue )", 
            "title": "Default Widget Style"
        }, 
        {
            "location": "/pythonTtk/#root-style", 
            "text": "All widgets inherit their style from the root style, known simply as  . \nIf you want to change the style of all widgets, you can modify the root style.  NB.  if particular widget types have set their own styles, modifying the root style won't change them.    app.ttkStyle.configure( . , background= black , foreground= white )", 
            "title": "Root Style"
        }, 
        {
            "location": "/pythonTtk/#create-your-own-styles", 
            "text": "Finally, it's possible to create your own styles, and use them for particular widgets. \nYour new style should inherit from the widget's style:  MyButton.TButton     app.ttkStyle.configure( MyButton.TButton , foreground= red )  You then need to apply this style to the relevant widgets:   .set XXX Style(style) \n    This lets you specify the name of a style for a particular widget.     app.setEntryStyle( Name ,  BW.TEntry )", 
            "title": "Create Your Own Styles"
        }, 
        {
            "location": "/pythonTtk/#built-in-setters", 
            "text": "You can still use the existing setters for background  .setBg()  and foreground  .setFg() :    app.setBg( blue )\napp.setFg( yellow )", 
            "title": "Built in Setters"
        }, 
        {
            "location": "/pythonTtk/#command-line-arguments", 
            "text": "It's possible to switch on ttk theming from the  command line . \nSimply use the  --ttk  flag, with an optional theme name:    python3 themes.py --ttk  # turn on ttk widgets  Turn on ttk widgets and set a theme:    python3 themes.py --ttk aqua # turn on ttk with the aqua theme", 
            "title": "Command Line Arguments"
        }, 
        {
            "location": "/clipboard/", 
            "text": "Clipboard\n\n\nIf you need to access the system clipboard, the following commands are available:\n\n\n\n\n\n\n.topLevel.clipboard_get()\n\n    This will return the contents of the clipboard as a string.  \n\n\n\n\n\n\n.topLevel.clipboard_append(\"hello world\")\n\n    This will append the specified text to the clipboard.  \n\n\n\n\n\n\n.topLevel.clipboard_clear()\n\n    This will clear all text form the clipboard.", 
            "title": "Clipboard"
        }, 
        {
            "location": "/clipboard/#clipboard", 
            "text": "If you need to access the system clipboard, the following commands are available:    .topLevel.clipboard_get() \n    This will return the contents of the clipboard as a string.      .topLevel.clipboard_append(\"hello world\") \n    This will append the specified text to the clipboard.      .topLevel.clipboard_clear() \n    This will clear all text form the clipboard.", 
            "title": "Clipboard"
        }, 
        {
            "location": "/simpleProperties/", 
            "text": "v1.0 Properties\n\n\n\n\nappJar includes a number of properties that can be configured to change how the GUI looks/acts.\n\nThese are exposed as \nproperties\n, so can be set uing the assignment operator, \n=\n.  \n\n\napp.title = \nProperty Demo\n\napp.bg = \nred\n\napp.fg = \nyellow\n\n\n\n\n\nIf you want to set multiple properties at once, there is a \nconfigure()\n function to support this:\n\n\n\n\n.configure(**kwargs)\n  \n\n\n\n\napp.configure(bg='red', fg='yellow', font={'size':20, 'family':'Helvetica'})\n\n\n\n\nNearly all properties can be got in the same way:  \n\n\napp.label('sizeLab', app.size)\napp.label('locLab', app.location)\napp.label('transLab', app.transparency)\n\n\n\n\nGUI Settings\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nData type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\nPass a string to display in the title bar of the GUI\n\n\n\n\n\n\nicon\n\n\nstring\n\n\nPass the path to an icon file, to display in the title bar - only works on Windows.\n\n\n\n\n\n\ntransparency\n\n\ninteger\n\n\nPass a percentage (between 0 \n 100) to set the transparency, of the GUI (not on Linux).\n\n\n\n\n\n\nvisible\n\n\nboolean\n\n\nPass either a boolean to hide or show the GUI.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPadding\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nData type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npadding\n\n\ninteger (list)\n\n\nPass a tuple containing the x \n y padding or a single integer for both x \n y\n\n\n\n\n\n\ninPadding\n\n\ninteger (list)\n\n\nPass a tuple containing the x \n y padding or a single integer for both x \n y\n\n\n\n\n\n\nguiPadding\n\n\ninteger (list)\n\n\nPass a tuple containing the x \n y padding or a single integer for both x \n y\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSize \n Location\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nData type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsize\n\n\ninteger (list)\n\n\nPass a tuple containing the width \n height (or the string \nfullscreen\n)\n\n\n\n\n\n\nlocation\n\n\ninteger (list)\n\n\nPass a tuple containing the x \n y coordinates (or the string \nCENTER\n)\n\n\n\n\n\n\nfullscreen\n\n\nboolean\n\n\nPass either \nTrue\n or \nFalse\n, to enter/exit fullscreen.\n\n\n\n\n\n\nresizable\n\n\nboolean\n\n\nPass either \nTrue\n or \nFalse\n, to set the GUI resizable or not.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGrid Properties\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nData type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsticky\n\n\nstring\n\n\nPass a string describing which sides widegts should stick to (news).\n\n\n\n\n\n\nstretch\n\n\nstring\n\n\nPass a string describing if rows/columns should stretch, to fill the entire GUI.\n\n\n\n\n\n\nrow\n\n\ninteger\n\n\nGets or sets the next row number to be used.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLooks\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nData type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfg\n\n\nstring\n\n\nPass a colour to use for the text colour of all label style widgets.\n\n\n\n\n\n\nbg\n\n\nstring\n\n\nPass a colour to use for the background of all label style widgets.\n\n\n\n\n\n\nfont\n\n\ninteger/dict\n\n\nPass either a font size, or a dictionary of font properties to use for all widgets.\n\n\n\n\n\n\nbuttonFont\n\n\ninteger/dict\n\n\nPass either a font size, or dicitonary of font properties to use for all button style widgets.\n\n\n\n\n\n\nlabelFont\n\n\ninteger/dict\n\n\nPass either a font size, or a dictionary of font properties to use for all label style widgets.\n\n\n\n\n\n\nttkTheme\n\n\nstring\n\n\nOnly available in ttk mode - pass the name of the ttk theme you want to use.\n\n\n\n\n\n\nfonts\n\n\nstring (list)\n\n\n(no SETTER) Returns a list of all available fonts.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOther\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nData type\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neditMenu\n\n\nBoolean\n\n\nEnables and disables the right-click edit menu for text based widgets.\n\n\n\n\n\n\nstopFunction\n\n\nfunction\n\n\n(no GETTER) Sets a function to call when the GUI is closed.\n\n\n\n\n\n\nfastStop\n\n\nBoolean\n\n\nSet this to True if you have a \nLOT\n of widgets, and stopping appJar has gotten slow (doesn't work from IDLE).\n\n\n\n\n\n\nenterKey\n\n\nfunction\n\n\n(no GETTER) Sets or disables (pass None) a function bound to the enter key.\n\n\n\n\n\n\nlogLevel\n\n\nstring\n\n\nSets the logging level.\n\n\n\n\n\n\nlogFile\n\n\nstring\n\n\nSets a file to log messages to.\n\n\n\n\n\n\nlanguage\n\n\nstring\n\n\nSets the current language.", 
            "title": "(v1.0 Properties)"
        }, 
        {
            "location": "/simpleProperties/#v10-properties", 
            "text": "appJar includes a number of properties that can be configured to change how the GUI looks/acts. \nThese are exposed as  properties , so can be set uing the assignment operator,  = .    app.title =  Property Demo \napp.bg =  red \napp.fg =  yellow   If you want to set multiple properties at once, there is a  configure()  function to support this:   .configure(**kwargs)      app.configure(bg='red', fg='yellow', font={'size':20, 'family':'Helvetica'})  Nearly all properties can be got in the same way:    app.label('sizeLab', app.size)\napp.label('locLab', app.location)\napp.label('transLab', app.transparency)", 
            "title": "v1.0 Properties"
        }, 
        {
            "location": "/simpleProperties/#gui-settings", 
            "text": "Property  Data type  Description      title  string  Pass a string to display in the title bar of the GUI    icon  string  Pass the path to an icon file, to display in the title bar - only works on Windows.    transparency  integer  Pass a percentage (between 0   100) to set the transparency, of the GUI (not on Linux).    visible  boolean  Pass either a boolean to hide or show the GUI.", 
            "title": "GUI Settings"
        }, 
        {
            "location": "/simpleProperties/#padding", 
            "text": "Property  Data type  Description      padding  integer (list)  Pass a tuple containing the x   y padding or a single integer for both x   y    inPadding  integer (list)  Pass a tuple containing the x   y padding or a single integer for both x   y    guiPadding  integer (list)  Pass a tuple containing the x   y padding or a single integer for both x   y", 
            "title": "Padding"
        }, 
        {
            "location": "/simpleProperties/#size-location", 
            "text": "Property  Data type  Description      size  integer (list)  Pass a tuple containing the width   height (or the string  fullscreen )    location  integer (list)  Pass a tuple containing the x   y coordinates (or the string  CENTER )    fullscreen  boolean  Pass either  True  or  False , to enter/exit fullscreen.    resizable  boolean  Pass either  True  or  False , to set the GUI resizable or not.", 
            "title": "Size &amp; Location"
        }, 
        {
            "location": "/simpleProperties/#grid-properties", 
            "text": "Property  Data type  Description      sticky  string  Pass a string describing which sides widegts should stick to (news).    stretch  string  Pass a string describing if rows/columns should stretch, to fill the entire GUI.    row  integer  Gets or sets the next row number to be used.", 
            "title": "Grid Properties"
        }, 
        {
            "location": "/simpleProperties/#looks", 
            "text": "Property  Data type  Description      fg  string  Pass a colour to use for the text colour of all label style widgets.    bg  string  Pass a colour to use for the background of all label style widgets.    font  integer/dict  Pass either a font size, or a dictionary of font properties to use for all widgets.    buttonFont  integer/dict  Pass either a font size, or dicitonary of font properties to use for all button style widgets.    labelFont  integer/dict  Pass either a font size, or a dictionary of font properties to use for all label style widgets.    ttkTheme  string  Only available in ttk mode - pass the name of the ttk theme you want to use.    fonts  string (list)  (no SETTER) Returns a list of all available fonts.", 
            "title": "Looks"
        }, 
        {
            "location": "/simpleProperties/#other", 
            "text": "Property  Data type  Description      editMenu  Boolean  Enables and disables the right-click edit menu for text based widgets.    stopFunction  function  (no GETTER) Sets a function to call when the GUI is closed.    fastStop  Boolean  Set this to True if you have a  LOT  of widgets, and stopping appJar has gotten slow (doesn't work from IDLE).    enterKey  function  (no GETTER) Sets or disables (pass None) a function bound to the enter key.    logLevel  string  Sets the logging level.    logFile  string  Sets a file to log messages to.    language  string  Sets the current language.", 
            "title": "Other"
        }, 
        {
            "location": "/guidance/", 
            "text": "General Guidance\n\n\n\n\nNavigating the Docs\n\n\nThe online documentation aims to be as consistant as possible.  \n\n\nThere are two main sections:  \n\n\n\n\nFillings\n - these are things you can add to the GUI  \n\n\nConfiguration\n - these are ways of changing how the GUI looks or operates  \n\n\n\n\nFillings\n\n\nThese are things you can add to the GUI:  \n\n\n\n\nWidgets\n - the various interface elements that can be included in a GUI  \n\n\nImages\n - a specific section on how to manage images in a GUI  \n\n\nSounds\n - a section on how to get your GUI to make some noise  \n\n\nBars\n - menubars, statusbars \n toolbars that can be added to your GUI  \n\n\nPop-ups\n - the different pop-ups that can be shown  \n\n\nMultiple Windows\n - information on creating separate windows  \n\n\nSplashscreen\n - a splashscreen to show at loadtime  \n\n\nSpecial Characters\n - guidance on how to include special characters  \n\n\nBeta widgets\n - some other available widgets, just not quite finished  \n\n\n\n\n\n\n\n\nAdvertisement\nwhy?\n\n\n\n\n\n\n(adsbygoogle = window.adsbygoogle || []).push({});\n\n\n\n\n\n\nConfiguration\n\n\nThese are ways of changing how the GUI looks or operates:  \n\n\n\n\nGUI Options\n - options for configuring general GUI settings  \n\n\nWidgets\n - options for configuring the layout and look \n feel of widgets  \n\n\nEvents\n - options for delaying actions, making them repeat or run in the background  \n\n\nInternationalisation\n - how to support multiple languages in your GUI  \n\n\nLogging\n - how to turn on/off appJar's logging capabilities  \n\n\nCommand Line Arguments\n - hw t use various command line arguments  \n\n\nttk\n - how to enable ttk support  \n\n\n\n\nUnderstanding the Docs\n\n\nWhen I first started appJar, I didn't really know any Python. I grew up on Pascal \n Java, followed by JavaScript \n PHP - appjar is therefore all in \nCamelCase\n.\n\n\nAlso, because of this, the concept of \nnamed parameters\n is also not really used (except in the more recent parts). Again, I learnt programming without this concept, and generally teach programming without this concept. You'll therefore find that sometimes you have to make two-or-three function calls, to achieve something that could be done with one - if I had more named parameters.\n\n\nI've tried to keep function names standardised:\n\n\n\n\n.add XXX()\n - to add something to the GUI   \n\n\n.set XXX()\n - to change something in the GUI  \n\n\n.set XXX YYY()\n - to change some property of something in the GUI  \n\n\n.get XXX()\n - to get something from the GUI\n\n\n\n\nWhen the docs list the parameters available on a function, any with an \n=\n means they are optional, with the default being shown.  \n\n\nFor example:  \n\n\n\n\n\n\nsetProperty(title, prop, value=False, callFunction=True)\n\n    This has two required parameters \ntitle\n \n \nprop\n - must be set (the title of the \nProperties\n group and a specific \nproperty\n)\n\n    And two optional parameters \nvalue\n \n \ncallFunction\n - if you don't pass \nvalue\n it will be set to False  \n\n\nSo, you could simply call: \n.setProperty(\"Toppings\", \"cheese\")\n to get rid of cheese.\n\nOr, if you want cheese: \n.setProperty(\"Toppings\", \"cheese\", True)\n.  \n\n\nYou don't need to name the parameters, as they are always listed in the required order.  \n\n\nHowever, if you do want to name your parameters, feel free: \n.setProperty(\"Toppings\", \"cheese\", callFunction=False)\n  \n\n\nIn fact, it can make your life much easier: \n.addLabel(\"l1\", \"Main Title\", colspan=5)\n - saves you having to type in the row or column values.  \n\n\n\n\n\n\nDeprecation\n\n\nappjar has been going so long, that some of the early decisions have turned out to be bad ones...\n\nSome functions have now been \ndeprecated\n - you can still use them, but appJar will warn you that you should be using something else.  \n\n\nBeta Code\n\n\nSome elements of appjar are in \nbeta\n. This means you can use them, and they \ngenerally\n work - but you may come across issues or they may change in the future. Generally, the beta code works pretty well - it wouldn't be included if it didn't. But, equally, we know its not perfect - \ndrag'n drop\n will keep growing \n improving, and the \ntable\n needs some work.  \n\n\nSo, please use them, and let us know any issues or improvements you'd like...", 
            "title": "Guidance"
        }, 
        {
            "location": "/guidance/#general-guidance", 
            "text": "", 
            "title": "General Guidance"
        }, 
        {
            "location": "/guidance/#navigating-the-docs", 
            "text": "The online documentation aims to be as consistant as possible.    There are two main sections:     Fillings  - these are things you can add to the GUI    Configuration  - these are ways of changing how the GUI looks or operates", 
            "title": "Navigating the Docs"
        }, 
        {
            "location": "/guidance/#fillings", 
            "text": "These are things you can add to the GUI:     Widgets  - the various interface elements that can be included in a GUI    Images  - a specific section on how to manage images in a GUI    Sounds  - a section on how to get your GUI to make some noise    Bars  - menubars, statusbars   toolbars that can be added to your GUI    Pop-ups  - the different pop-ups that can be shown    Multiple Windows  - information on creating separate windows    Splashscreen  - a splashscreen to show at loadtime    Special Characters  - guidance on how to include special characters    Beta widgets  - some other available widgets, just not quite finished       Advertisement why?    (adsbygoogle = window.adsbygoogle || []).push({});", 
            "title": "Fillings"
        }, 
        {
            "location": "/guidance/#configuration", 
            "text": "These are ways of changing how the GUI looks or operates:     GUI Options  - options for configuring general GUI settings    Widgets  - options for configuring the layout and look   feel of widgets    Events  - options for delaying actions, making them repeat or run in the background    Internationalisation  - how to support multiple languages in your GUI    Logging  - how to turn on/off appJar's logging capabilities    Command Line Arguments  - hw t use various command line arguments    ttk  - how to enable ttk support", 
            "title": "Configuration"
        }, 
        {
            "location": "/guidance/#understanding-the-docs", 
            "text": "When I first started appJar, I didn't really know any Python. I grew up on Pascal   Java, followed by JavaScript   PHP - appjar is therefore all in  CamelCase .  Also, because of this, the concept of  named parameters  is also not really used (except in the more recent parts). Again, I learnt programming without this concept, and generally teach programming without this concept. You'll therefore find that sometimes you have to make two-or-three function calls, to achieve something that could be done with one - if I had more named parameters.  I've tried to keep function names standardised:   .add XXX()  - to add something to the GUI     .set XXX()  - to change something in the GUI    .set XXX YYY()  - to change some property of something in the GUI    .get XXX()  - to get something from the GUI   When the docs list the parameters available on a function, any with an  =  means they are optional, with the default being shown.    For example:      setProperty(title, prop, value=False, callFunction=True) \n    This has two required parameters  title     prop  - must be set (the title of the  Properties  group and a specific  property ) \n    And two optional parameters  value     callFunction  - if you don't pass  value  it will be set to False    So, you could simply call:  .setProperty(\"Toppings\", \"cheese\")  to get rid of cheese. \nOr, if you want cheese:  .setProperty(\"Toppings\", \"cheese\", True) .    You don't need to name the parameters, as they are always listed in the required order.    However, if you do want to name your parameters, feel free:  .setProperty(\"Toppings\", \"cheese\", callFunction=False)     In fact, it can make your life much easier:  .addLabel(\"l1\", \"Main Title\", colspan=5)  - saves you having to type in the row or column values.", 
            "title": "Understanding the Docs"
        }, 
        {
            "location": "/guidance/#deprecation", 
            "text": "appjar has been going so long, that some of the early decisions have turned out to be bad ones... \nSome functions have now been  deprecated  - you can still use them, but appJar will warn you that you should be using something else.", 
            "title": "Deprecation"
        }, 
        {
            "location": "/guidance/#beta-code", 
            "text": "Some elements of appjar are in  beta . This means you can use them, and they  generally  work - but you may come across issues or they may change in the future. Generally, the beta code works pretty well - it wouldn't be included if it didn't. But, equally, we know its not perfect -  drag'n drop  will keep growing   improving, and the  table  needs some work.    So, please use them, and let us know any issues or improvements you'd like...", 
            "title": "Beta Code"
        }, 
        {
            "location": "/examples/minecraft/", 
            "text": "Minecraft\n\n\n\n\nYou can now see a version of this article in print!  Check out the \nMagPi, issue 58\n.\n\n\nLinking appJar with Minecraft on the Raspberry Pi is super easy!\n\nSimply import the Minecraft library and appJar library and have appJar call Minecraft functions...  \n\n\nChat\n\n\nFirst, let's set up a simple chat entry box.\n\n\n\n\nfrom appJar import gui\nfrom mcpi.minecraft import Minecraft\n\n# function to send messages to minecraft server\ndef sendMsg(btn):\n    msg = app.getEntry(\nChat\n)\n    mc.postToChat(msg)\n\nmc = Minecraft.create() # minecraft connection\n\n# main GUI block\napp = gui(\nMinecraft\n) # GUI\n\napp.addLabelEntry(\nChat\n, 0, )\napp.addButton(\nSend\n, sendMsg, 0, 1)\n\napp.go()\n\n\n\n\nYou can jazz this up a bit, by setting the focus and linking the \n key to submit chat messages, oh and set the location so it doesn't appear under the Minecraft window..\n\n\n# put this in the main GUI block\napp.setEntryFocus(\nChat\n)\napp.setEntryFunction(\nChat\n, sendMsg)\napp.setLocation(100,100)\n\n\n\n\nMovement\n\n\nNext, let's add some movement controls... \n\n\n\n#function to move the minecraft character\ndef move(btn):\n    x,y,z = mc.player.getPos()\n\n    if btn == \nLEFT\n:\n        x -= 1\n    elif btn == \nRIGHT\n:\n        x += 1\n    elif btn == \nFORWARD\n:\n        z -= 1\n    elif btn == \nBACKWARD\n:\n        z += 1\n    elif btn == \nJUMP\n:\n        y += 1\n        z -= 1 \n\n    mc.player.setPos(x, y, z)\n\n# put this in the main GUI block\napp.startLabelFrame(\nMove Me\n, colspan=2)\napp.setSticky(\nEW\n)\napp.addButton(\nFORWARD\n, move)\napp.addButtons([\nLEFT\n, \nJUMP\n, \nRIGHT\n], move)\napp.addButton(\nBACKWARD\n, move)\napp.stopLabelFrame()\n\n\n\n\nYou can jazz this up to, by linking keys up to the functions...  \n\n\n# add this to the main GUI block\napp.bindKey(\nLeft\n, move)\napp.bindKey(\nRight\n, move)\napp.bindKey(\nUp\n, move)\napp.bindKey(\nDown\n, move)\napp.bindKey(\nSpace\n, move)\n\n# then change the move function to register both events\n# if btn == \nLEFT\n or btn == \nLeft\n ... and so on\n\n\n\n\nStatus\n\n\nAnother cool feature, is a status bar that tells us where we're at...\n\n\n\n\n#function to set the status bar\ndef getLocation():\n    x,y,z = mc.player.getPos()\n    app.setStatusbar(\nX: \n+ str(round(x,3)), 0)\n    app.setStatusbar(\nY: \n+ str(round(y,3)), 1)\n    app.setStatusbar(\nZ: \n+ str(round(z,3)), 2)\n\n# put this in the main GUI block\napp.addStatusbar(fields=3)\n# call the update function every second\napp.registerEvent(getLocation)\n\n\n\n\nDropping blocks\n\n\nNext, let's add the ability to drop blocks.  \n\n\n\n\n# function to drop a block just in front\ndef drop(btn):\n    playerBlock = app.getOptionBox(\nBlock\n)\n    blockId = BLOCKS[playerBlock]\n    x,y,z = mc.player.getPos()\n    mc.setBlock(x, y+1, z-1, blockId)\n\n# put this in the main GUI block\napp.addLabelOptionBox(\nBlock\n, blockNames, colspan=2)\napp.addButton(\nDrop\n, drop, colspan=2)\n\n\n\n\nThe issue we have is building a dictionary of block names linked to block IDs. You can try this one out, or make your own...  \n\n\n# put this near the top of your code\nBLOCKS={ \nAIR\n:0, \nSTONE\n:1, \nGRASS\n:2, \nDIRT\n:3, \nCOBBLESTONE\n:4,\n    \nWOOD_PLANKS\n:5, \nSAPLING\n:6, \nBEDROCK\n:7, \nWATER_FLOWING\n:8, \nWATER\n:8,\n    \nWATER_STATIONARY\n:9, \nLAVA_FLOWING\n:10, \nLAVA\n:10, \nLAVA_STATIONARY\n:11,\n    \nSAND\n:12, \nGRAVEL\n:13, \nGOLD_ORE\n:14, \nIRON_ORE\n:15, \nCOAL_ORE\n:16,\n    \nWOOD\n:17, \nLEAVES\n:18, \nGLASS\n:20, \nLAPIS_LAZULI_ORE\n:21,\n    \nLAPIS_LAZULI_BLOCK\n:22, \nSANDSTONE\n:24, \nBED\n:26, \nCOBWEB\n:30,\n    \nGRASS_TALL\n:31, \nWOOL\n:35, \nFLOWER_YELLOW\n:37, \nFLOWER_CYAN\n:38,\n    \nMUSHROOM_BROWN\n:39, \nMUSHROOM_RED\n:40, \nGOLD_BLOCK\n:41, \nIRON_BLOCK\n:42,\n    \nSTONE_SLAB_DOUBLE\n:43, \nSTONE_SLAB\n:44, \nBRICK_BLOCK\n:45, \nTNT\n:46,\n    \nBOOKSHELF\n:47, \nMOSS_STONE\n:48, \nOBSIDIAN\n:49, \nTORCH\n:50, \nFIRE\n:51,\n    \nSTAIRS_WOOD\n:53, \nCHEST\n:54, \nDIAMOND_ORE\n:56, \nDIAMOND_BLOCK\n:57,\n    \nCRAFTING_TABLE\n:58, \nFARMLAND\n:60, \nFURNACE_INACTIVE\n:61,\n    \nFURNACE_ACTIVE\n:62, \nDOOR_WOOD\n:64, \nLADDER\n:65, \nSTAIRS_COBBLESTONE\n:67,\n    \nDOOR_IRON\n:71, \nREDSTONE_ORE\n:73, \nSNOW\n:78, \nICE\n:79, \nSNOW_BLOCK\n:80,\n    \nCACTUS\n:81, \nCLAY\n:82, \nSUGAR_CANE\n:83, \nFENCE\n:85, \nGLOWSTONE_BLOCK\n:89,\n    \nBEDROCK_INVISIBLE\n:95, \nSTONE_BRICK\n:98, \nGLASS_PANE\n:102, \nMELON\n:103,\n    \nFENCE_GATE\n:107, \nGLOWING_OBSIDIAN\n:246, \nNETHER_REACTOR_CORE\n:247 \n}\nblockNames=list(BLOCKS.keys())\nblockNames.sort()\n\n\n\n\nAnything from the menu?\n\n\nFinally, let's add a menu.\n\nMenus work just like buttons - when you click them, they simply call a function.\n\nSo, we're going to create a function for the menus, and have it operate the camera and create/restore checkpoints:\n\n\n# put this near the top of your code\ndef clickMenu(choice):\n    if choice == \nCreate\n:\n        mc.saveCheckpoint()\n        app.infoBox(\nSave\n, \nCheckpoint saved.\n)\n    elif choice == \nRestore\n:\n        if app.yesNoBox(\nRestore\n, \nAre you sure?\n):\n            mc.restoreCheckpoint()\n    elif choice == \nNormal\n:\n        mc.camera.setNormal()\n    elif choice == \nFixed\n:\n        mc.camera.setFixed()\n    elif choice == \nFollow\n:\n        mc.camera.setFollow()\n\n\n\n\nThen we add the code to our main GUI block, to show the menus:  \n\n\n# put this in the main GUI block\napp.addMenuList(\nCheckpoint\n, [\nCreate\n, \nRestore\n], clickMenu)\napp.addMenuList(\nCamera\n, [\nNormal\n, \nFixed\n, \nFollow\n], clickMenu)", 
            "title": "Raspberry Pi Minecraft"
        }, 
        {
            "location": "/examples/minecraft/#minecraft", 
            "text": "You can now see a version of this article in print!  Check out the  MagPi, issue 58 .  Linking appJar with Minecraft on the Raspberry Pi is super easy! \nSimply import the Minecraft library and appJar library and have appJar call Minecraft functions...", 
            "title": "Minecraft"
        }, 
        {
            "location": "/examples/minecraft/#chat", 
            "text": "First, let's set up a simple chat entry box.   from appJar import gui\nfrom mcpi.minecraft import Minecraft\n\n# function to send messages to minecraft server\ndef sendMsg(btn):\n    msg = app.getEntry( Chat )\n    mc.postToChat(msg)\n\nmc = Minecraft.create() # minecraft connection\n\n# main GUI block\napp = gui( Minecraft ) # GUI\n\napp.addLabelEntry( Chat , 0, )\napp.addButton( Send , sendMsg, 0, 1)\n\napp.go()  You can jazz this up a bit, by setting the focus and linking the   key to submit chat messages, oh and set the location so it doesn't appear under the Minecraft window..  # put this in the main GUI block\napp.setEntryFocus( Chat )\napp.setEntryFunction( Chat , sendMsg)\napp.setLocation(100,100)", 
            "title": "Chat"
        }, 
        {
            "location": "/examples/minecraft/#movement", 
            "text": "Next, let's add some movement controls...   #function to move the minecraft character\ndef move(btn):\n    x,y,z = mc.player.getPos()\n\n    if btn ==  LEFT :\n        x -= 1\n    elif btn ==  RIGHT :\n        x += 1\n    elif btn ==  FORWARD :\n        z -= 1\n    elif btn ==  BACKWARD :\n        z += 1\n    elif btn ==  JUMP :\n        y += 1\n        z -= 1 \n\n    mc.player.setPos(x, y, z)\n\n# put this in the main GUI block\napp.startLabelFrame( Move Me , colspan=2)\napp.setSticky( EW )\napp.addButton( FORWARD , move)\napp.addButtons([ LEFT ,  JUMP ,  RIGHT ], move)\napp.addButton( BACKWARD , move)\napp.stopLabelFrame()  You can jazz this up to, by linking keys up to the functions...    # add this to the main GUI block\napp.bindKey( Left , move)\napp.bindKey( Right , move)\napp.bindKey( Up , move)\napp.bindKey( Down , move)\napp.bindKey( Space , move)\n\n# then change the move function to register both events\n# if btn ==  LEFT  or btn ==  Left  ... and so on", 
            "title": "Movement"
        }, 
        {
            "location": "/examples/minecraft/#status", 
            "text": "Another cool feature, is a status bar that tells us where we're at...  \n#function to set the status bar\ndef getLocation():\n    x,y,z = mc.player.getPos()\n    app.setStatusbar( X:  + str(round(x,3)), 0)\n    app.setStatusbar( Y:  + str(round(y,3)), 1)\n    app.setStatusbar( Z:  + str(round(z,3)), 2)\n\n# put this in the main GUI block\napp.addStatusbar(fields=3)\n# call the update function every second\napp.registerEvent(getLocation)", 
            "title": "Status"
        }, 
        {
            "location": "/examples/minecraft/#dropping-blocks", 
            "text": "Next, let's add the ability to drop blocks.     # function to drop a block just in front\ndef drop(btn):\n    playerBlock = app.getOptionBox( Block )\n    blockId = BLOCKS[playerBlock]\n    x,y,z = mc.player.getPos()\n    mc.setBlock(x, y+1, z-1, blockId)\n\n# put this in the main GUI block\napp.addLabelOptionBox( Block , blockNames, colspan=2)\napp.addButton( Drop , drop, colspan=2)  The issue we have is building a dictionary of block names linked to block IDs. You can try this one out, or make your own...    # put this near the top of your code\nBLOCKS={  AIR :0,  STONE :1,  GRASS :2,  DIRT :3,  COBBLESTONE :4,\n     WOOD_PLANKS :5,  SAPLING :6,  BEDROCK :7,  WATER_FLOWING :8,  WATER :8,\n     WATER_STATIONARY :9,  LAVA_FLOWING :10,  LAVA :10,  LAVA_STATIONARY :11,\n     SAND :12,  GRAVEL :13,  GOLD_ORE :14,  IRON_ORE :15,  COAL_ORE :16,\n     WOOD :17,  LEAVES :18,  GLASS :20,  LAPIS_LAZULI_ORE :21,\n     LAPIS_LAZULI_BLOCK :22,  SANDSTONE :24,  BED :26,  COBWEB :30,\n     GRASS_TALL :31,  WOOL :35,  FLOWER_YELLOW :37,  FLOWER_CYAN :38,\n     MUSHROOM_BROWN :39,  MUSHROOM_RED :40,  GOLD_BLOCK :41,  IRON_BLOCK :42,\n     STONE_SLAB_DOUBLE :43,  STONE_SLAB :44,  BRICK_BLOCK :45,  TNT :46,\n     BOOKSHELF :47,  MOSS_STONE :48,  OBSIDIAN :49,  TORCH :50,  FIRE :51,\n     STAIRS_WOOD :53,  CHEST :54,  DIAMOND_ORE :56,  DIAMOND_BLOCK :57,\n     CRAFTING_TABLE :58,  FARMLAND :60,  FURNACE_INACTIVE :61,\n     FURNACE_ACTIVE :62,  DOOR_WOOD :64,  LADDER :65,  STAIRS_COBBLESTONE :67,\n     DOOR_IRON :71,  REDSTONE_ORE :73,  SNOW :78,  ICE :79,  SNOW_BLOCK :80,\n     CACTUS :81,  CLAY :82,  SUGAR_CANE :83,  FENCE :85,  GLOWSTONE_BLOCK :89,\n     BEDROCK_INVISIBLE :95,  STONE_BRICK :98,  GLASS_PANE :102,  MELON :103,\n     FENCE_GATE :107,  GLOWING_OBSIDIAN :246,  NETHER_REACTOR_CORE :247 \n}\nblockNames=list(BLOCKS.keys())\nblockNames.sort()", 
            "title": "Dropping blocks"
        }, 
        {
            "location": "/examples/minecraft/#anything-from-the-menu", 
            "text": "Finally, let's add a menu. \nMenus work just like buttons - when you click them, they simply call a function. \nSo, we're going to create a function for the menus, and have it operate the camera and create/restore checkpoints:  # put this near the top of your code\ndef clickMenu(choice):\n    if choice ==  Create :\n        mc.saveCheckpoint()\n        app.infoBox( Save ,  Checkpoint saved. )\n    elif choice ==  Restore :\n        if app.yesNoBox( Restore ,  Are you sure? ):\n            mc.restoreCheckpoint()\n    elif choice ==  Normal :\n        mc.camera.setNormal()\n    elif choice ==  Fixed :\n        mc.camera.setFixed()\n    elif choice ==  Follow :\n        mc.camera.setFollow()  Then we add the code to our main GUI block, to show the menus:    # put this in the main GUI block\napp.addMenuList( Checkpoint , [ Create ,  Restore ], clickMenu)\napp.addMenuList( Camera , [ Normal ,  Fixed ,  Follow ], clickMenu)", 
            "title": "Anything from the menu?"
        }, 
        {
            "location": "/examples/simple/", 
            "text": "Simple Examples\n\n\n\n\nLogin Form\n\n\nStart off by importing the library and creating the gui\n\n\n\n\n    from appJar import gui\n\n    # create the GUI \n set a title\n    app = gui(\nLogin Form\n)\n\n    # add labels \n entries\n    # in the correct row \n column\n    app.addLabel(\nuserLab\n, \nUsername:\n, 0, 0)\n    app.addEntry(\nuserEnt\n, 0, 1)\n    app.addLabel(\npassLab\n, \nPassword:\n, 1, 0)\n    app.addEntry(\npassEnt\n, 1, 1)\n\n    # start the GUI\n    app.go()\n\n\n\n\nNext, add some buttons\n\n\n\n\n    # these buttons call a *None* function - they don't do anything\n    app.addButtons( [\nSubmit\n, \nCancel\n], None, colspan=2)\n\n\n\n\nThen give the buttons a function to call\n\n\n    # function to print out the name of the button pressed\n    # followed by the contents of the two entry boxes\n    def press(btnName):\n        print(btnName)\n        print app.getEntry(\nuserEnt\n)\n        print app.getEntry(\npassEnt\n)\n\n    # changed this line to call a function\n    app.addButtons( [\nSubmit\n, \nCancel\n], press, colspan=2)\n\n\n\n\nFinally, program some logic into the function\n\n\ndef press(btnName):\n    if btnName == \nCancel\n:\n        app.stop()\n\n    if app.getEntry(\nuserEnt\n) == \nrjarvis\n:\n        if app.getEntry(\npassEnt\n) == \nabc\n:\n            app.infoBox(\nSuccess\n, \nCongratulations, you are logged in!\n)\n        else:\n            app.errorBox(\nFailed login\n, \nInvalid password\n)\n    else:\n        app.errorBox(\nFailed login\n, \nInvalid username\n)\n\n\n\n\nExtension - add some enhancements\n\n\n    app.addSecretEntry(\npassEnt\n, 1, 1)\n    app.setFocus(\nuserEnt\n)\n    app.enableEnter(press)\n\n\n\n\n\n\n\n\nFull source code", 
            "title": "Simple Layout"
        }, 
        {
            "location": "/examples/simple/#simple-examples", 
            "text": "", 
            "title": "Simple Examples"
        }, 
        {
            "location": "/examples/simple/#login-form", 
            "text": "", 
            "title": "Login Form"
        }, 
        {
            "location": "/examples/simple/#start-off-by-importing-the-library-and-creating-the-gui", 
            "text": "from appJar import gui\n\n    # create the GUI   set a title\n    app = gui( Login Form )\n\n    # add labels   entries\n    # in the correct row   column\n    app.addLabel( userLab ,  Username: , 0, 0)\n    app.addEntry( userEnt , 0, 1)\n    app.addLabel( passLab ,  Password: , 1, 0)\n    app.addEntry( passEnt , 1, 1)\n\n    # start the GUI\n    app.go()", 
            "title": "Start off by importing the library and creating the gui"
        }, 
        {
            "location": "/examples/simple/#next-add-some-buttons", 
            "text": "# these buttons call a *None* function - they don't do anything\n    app.addButtons( [ Submit ,  Cancel ], None, colspan=2)", 
            "title": "Next, add some buttons"
        }, 
        {
            "location": "/examples/simple/#then-give-the-buttons-a-function-to-call", 
            "text": "# function to print out the name of the button pressed\n    # followed by the contents of the two entry boxes\n    def press(btnName):\n        print(btnName)\n        print app.getEntry( userEnt )\n        print app.getEntry( passEnt )\n\n    # changed this line to call a function\n    app.addButtons( [ Submit ,  Cancel ], press, colspan=2)", 
            "title": "Then give the buttons a function to call"
        }, 
        {
            "location": "/examples/simple/#finally-program-some-logic-into-the-function", 
            "text": "def press(btnName):\n    if btnName ==  Cancel :\n        app.stop()\n\n    if app.getEntry( userEnt ) ==  rjarvis :\n        if app.getEntry( passEnt ) ==  abc :\n            app.infoBox( Success ,  Congratulations, you are logged in! )\n        else:\n            app.errorBox( Failed login ,  Invalid password )\n    else:\n        app.errorBox( Failed login ,  Invalid username )", 
            "title": "Finally, program some logic into the function"
        }, 
        {
            "location": "/examples/simple/#extension-add-some-enhancements", 
            "text": "app.addSecretEntry( passEnt , 1, 1)\n    app.setFocus( userEnt )\n    app.enableEnter(press)    Full source code", 
            "title": "Extension - add some enhancements"
        }, 
        {
            "location": "/Install/", 
            "text": "Set-up Instructions\n\n\n\n\nappJar was designed for use in schools - it therefore doesn't require any kind of special  \ninstallation\n.\n\nInstead, just \nDOWNLOAD\n the ZIP file, unzip, and go - just put the folder in the \nright place\n.  \n\n\nPip Installation\n\n\nHowever, if you can install python packages - we support that too!  \n\n\nsudo pip3 install appjar\n - this will download \n install \nappJar\n ready for python 3.\n\n\nsudo pip3 install appjar --upgrade\n - this will upgrade \nappJar\n to the latest version.  \n\n\n# import the appJar library\nfrom appJar import gui\n\n\n\n\nSingle-user Set-up\n\n\nIf you can't/don't want to install using pip, simply:  \n\n\n\n\nDOWNLOAD\n \nappjar\n and unzip it.  \n\n\nPut the \nappJar folder\n in your \ncode folder\n, and you're done!  \n\n\n\n\n# import the appJar library\nfrom appJar import gui\n\n\n\n\n(As long as it's in the same folder as your code, it'll work...)  \n\n\nLinux\n\n\nIf you're on Linux you might be able to make this even simpler.\n\nYou might have a \nsite-packages\n folder, that is already in your path.\n\nIn this case, put the \nappJar\n folder in \n~/.local/lib/python3.x/site-packages/\n where 3.x is the version of python that you use.  \n\n\nMulti-user Set-up\n\n\n\n\nIf you're trying to install appJar in a school, everyone can download their own copy (\nsee above\n), or:  \n\n\n\n\nPut the \nappJar folder\n in a \nshared location\n (eg. a folder on a network drive): \nE:\\PYLIB\n  \n\n\nThen have pupils include the following 2-lines at the start of their code:\n\n\n\n\n# add the appJar folder to your PATH\nimport sys\nsys.path.append(\nE:\\PYLIB\n)\n# import the appJar library\nfrom appJar import gui\n\n\n\n\nAdvanced Set-up\n\n\nIf you've got friendly technicians, you can even avoid having to always add \nappJar\n to your path...  \n\n\nWindows\n\n\n\n\nCreate an environment variable, which will mean \nE:\\PYLIB\n is always in your \npath\n.  \n\n\n\n\nOpen \nControl Panel\n  \n\n\nNavigate to \nSystem -\n Advanced System Settings\n\n\n\n\nClick the \nAdvanced\n tab\n\n\n\n\nUnder \nSystem variables\n, click the \nNew..\n button\n\n\n\n\nSet the \nVariable name:\n to be \nPYTHONPATH\n  \n\n\nSet the \nVariable value:\n as the folder you put \nappJar\n in (eg. \"E:\\PYLIB\")\n\n\n\n\nPress \nOK\n, and you're done!    \n\n\n\n\n\n\n\n\nAdvertisement\nwhy?\n\n\n\n\n\n\n(adsbygoogle = window.adsbygoogle || []).push({});\n\n\n\n\n\n\nLinux (Raspberry Pi) /MacOS\n\n\n\n\nIf you're running python from a terminal:  \n\n\n\n\nType the following:  \n\n\n\n\n    echo 'export PYTHONPATH=\n${PYTHONPATH}:~/Documents/PYLIB\n' \n ~/.bashrc\n\n\n\n\n\n\nReopen the terminal (or type \nsource ~/.bashrc\n), and you're done!  \n\n\nNB.\n Change \n~/Documents/PYLIB\n to the folder where the \nappJar folder\n is located.  \n\n\n\n\nIDLE on Linux (raspberry Pi)/MacOS\n\n\n\n\nIf you're running python in  IDLE, you'll need to add appJar to your \nsite-packages\n  \n\n\n\n\nLaunch a \nTerminal\n  \n\n\nType the following:  \n\n\n\n\n    mkdir -p ~/Library/Python/3.4/lib/python/site-packages\n    cd ~/Library/Python/3.4/lib/python/site-packages\n    echo '~/Documents/PYLIB' \n appJar.pth\n\n\n\n\n\n\nClose the terminal, and you're done!  \n\n\nNB.\n you'll need to make sure the version number (3.4) is correct.  \n\n\nTo check your version, run this in Python:  \n\n\n\n\n\n\n\n\n    import sys\n    print(sys.version) \n\n\n\n\nPyScripter\n\n\nIf you're using \nPyScripter\n then follow the installation instructions above.  \n\n\nIf you're having problems appending to the path, you can try escaping the path:  \n\n\n\n\nsys.path.append(\"E:\\\\PYLIB\")\n - putting double slashes might fix the issue.  \n\n\n\n\nAlternatively, you can use the PyScripter menus:  \n\n\n\n\n\n\nPut appJar in a folder - in this case it's on the Desktop  \n\n\n\n\n\n\nClick \nTools\n -\n \nPython Path...\n\n\n\n\n\n\n\n\nEither type or navigate to the folder containing appJar\n\n\n\n\n\n\n\n\nPress \nAdd\n, followed by \nOK\n\n\n\n\n\n\n\n\nNB.\n You will have to do this every time you run PyScripter, so it's better to get appJar installed properly if you can.  \n\n\nPortablePython\n\n\nIf you are using \nPortablePython\n then you simply need to drop the appJar folder into the \nLib\n folder of the PortablePython installation.", 
            "title": "Installation"
        }, 
        {
            "location": "/Install/#set-up-instructions", 
            "text": "appJar was designed for use in schools - it therefore doesn't require any kind of special   installation . \nInstead, just  DOWNLOAD  the ZIP file, unzip, and go - just put the folder in the  right place .", 
            "title": "Set-up Instructions"
        }, 
        {
            "location": "/Install/#pip-installation", 
            "text": "However, if you can install python packages - we support that too!    sudo pip3 install appjar  - this will download   install  appJar  ready for python 3.  sudo pip3 install appjar --upgrade  - this will upgrade  appJar  to the latest version.    # import the appJar library\nfrom appJar import gui", 
            "title": "Pip Installation"
        }, 
        {
            "location": "/Install/#single-user-set-up", 
            "text": "If you can't/don't want to install using pip, simply:     DOWNLOAD   appjar  and unzip it.    Put the  appJar folder  in your  code folder , and you're done!     # import the appJar library\nfrom appJar import gui  (As long as it's in the same folder as your code, it'll work...)", 
            "title": "Single-user Set-up"
        }, 
        {
            "location": "/Install/#linux", 
            "text": "If you're on Linux you might be able to make this even simpler. \nYou might have a  site-packages  folder, that is already in your path. \nIn this case, put the  appJar  folder in  ~/.local/lib/python3.x/site-packages/  where 3.x is the version of python that you use.", 
            "title": "Linux"
        }, 
        {
            "location": "/Install/#multi-user-set-up", 
            "text": "If you're trying to install appJar in a school, everyone can download their own copy ( see above ), or:     Put the  appJar folder  in a  shared location  (eg. a folder on a network drive):  E:\\PYLIB     Then have pupils include the following 2-lines at the start of their code:   # add the appJar folder to your PATH\nimport sys\nsys.path.append( E:\\PYLIB )\n# import the appJar library\nfrom appJar import gui", 
            "title": "Multi-user Set-up"
        }, 
        {
            "location": "/Install/#advanced-set-up", 
            "text": "If you've got friendly technicians, you can even avoid having to always add  appJar  to your path...", 
            "title": "Advanced Set-up"
        }, 
        {
            "location": "/Install/#windows", 
            "text": "Create an environment variable, which will mean  E:\\PYLIB  is always in your  path .     Open  Control Panel     Navigate to  System -  Advanced System Settings   Click the  Advanced  tab   Under  System variables , click the  New..  button   Set the  Variable name:  to be  PYTHONPATH     Set the  Variable value:  as the folder you put  appJar  in (eg. \"E:\\PYLIB\")   Press  OK , and you're done!         Advertisement why?    (adsbygoogle = window.adsbygoogle || []).push({});", 
            "title": "Windows"
        }, 
        {
            "location": "/Install/#linux-raspberry-pi-macos", 
            "text": "If you're running python from a terminal:     Type the following:         echo 'export PYTHONPATH= ${PYTHONPATH}:~/Documents/PYLIB '   ~/.bashrc   Reopen the terminal (or type  source ~/.bashrc ), and you're done!    NB.  Change  ~/Documents/PYLIB  to the folder where the  appJar folder  is located.", 
            "title": "Linux (Raspberry Pi) /MacOS"
        }, 
        {
            "location": "/Install/#idle-on-linux-raspberry-pimacos", 
            "text": "If you're running python in  IDLE, you'll need to add appJar to your  site-packages      Launch a  Terminal     Type the following:         mkdir -p ~/Library/Python/3.4/lib/python/site-packages\n    cd ~/Library/Python/3.4/lib/python/site-packages\n    echo '~/Documents/PYLIB'   appJar.pth   Close the terminal, and you're done!    NB.  you'll need to make sure the version number (3.4) is correct.    To check your version, run this in Python:           import sys\n    print(sys.version)", 
            "title": "IDLE on Linux (raspberry Pi)/MacOS"
        }, 
        {
            "location": "/Install/#pyscripter", 
            "text": "If you're using  PyScripter  then follow the installation instructions above.    If you're having problems appending to the path, you can try escaping the path:     sys.path.append(\"E:\\\\PYLIB\")  - putting double slashes might fix the issue.     Alternatively, you can use the PyScripter menus:      Put appJar in a folder - in this case it's on the Desktop      Click  Tools  -   Python Path...     Either type or navigate to the folder containing appJar     Press  Add , followed by  OK     NB.  You will have to do this every time you run PyScripter, so it's better to get appJar installed properly if you can.", 
            "title": "PyScripter"
        }, 
        {
            "location": "/Install/#portablepython", 
            "text": "If you are using  PortablePython  then you simply need to drop the appJar folder into the  Lib  folder of the PortablePython installation.", 
            "title": "PortablePython"
        }, 
        {
            "location": "/packaging/", 
            "text": "Packaging appJar Apps \n\n\n\n\n.pyw files on Windows\n\n\n\n\nIf you're on Windows, there is a clever way to make your python files act like executables.  \n\n\nIf you change the file extension to be \n.pyw\n instead of \n.py\n then you will be able to double click the file, and launch it as a GUI application, with no terminal showing up.  \n\n\nPackaging with PyInstaller\n\n\n\n\nThe recommended way to package appJar is to use \nPyInstaller\n  \n\n\nFirst, \ndownload\n and \ninstall\n PyInstaller.  \n\n\nIf everything has been installed via pip, then you should be able to package your application with the following command:\n\n\npyinstaller -F -w demo.py\n\n\nIf not, then you may need to specify the path of certain libraries:  \n\n\npyinstaller -F -w -p \npath_to_appJar\n demo.py\n\n\nSetting an app Icon\n\n\n\n\nTo set an icon for the app, include the following option:\n\n\npyinstaller -i \npath_to_icon\n -F -w demo.py\n\n\nIncluding Images\n\n\n\n\nTo include images, include the following option:\n\n\nappinstaller --add-data image.png:. -F -w demo.py\n\n\nPlatform Support\n\n\n\n\nThis has been tested \n works under both Windows \n Linux, although no success (yet) on OSX.  \n\n\nA lot more detail will be provided here, in a future release, on the exact process to follow to get everything built into  your package.", 
            "title": "Packaging"
        }, 
        {
            "location": "/packaging/#packaging-appjar-apps", 
            "text": "", 
            "title": "Packaging appJar Apps"
        }, 
        {
            "location": "/packaging/#pyw-files-on-windows", 
            "text": "If you're on Windows, there is a clever way to make your python files act like executables.    If you change the file extension to be  .pyw  instead of  .py  then you will be able to double click the file, and launch it as a GUI application, with no terminal showing up.", 
            "title": ".pyw files on Windows"
        }, 
        {
            "location": "/packaging/#packaging-with-pyinstaller", 
            "text": "The recommended way to package appJar is to use  PyInstaller     First,  download  and  install  PyInstaller.    If everything has been installed via pip, then you should be able to package your application with the following command:  pyinstaller -F -w demo.py  If not, then you may need to specify the path of certain libraries:    pyinstaller -F -w -p  path_to_appJar  demo.py", 
            "title": "Packaging with PyInstaller"
        }, 
        {
            "location": "/packaging/#setting-an-app-icon", 
            "text": "To set an icon for the app, include the following option:  pyinstaller -i  path_to_icon  -F -w demo.py", 
            "title": "Setting an app Icon"
        }, 
        {
            "location": "/packaging/#including-images", 
            "text": "To include images, include the following option:  appinstaller --add-data image.png:. -F -w demo.py", 
            "title": "Including Images"
        }, 
        {
            "location": "/packaging/#platform-support", 
            "text": "This has been tested   works under both Windows   Linux, although no success (yet) on OSX.    A lot more detail will be provided here, in a future release, on the exact process to follow to get everything built into  your package.", 
            "title": "Platform Support"
        }, 
        {
            "location": "/License/", 
            "text": "License\n\n\n\n\nThis project has been a labour of love over the last couple of years.  \n\n\nWhen confronted with the difficulty both pupils and teachers were having creating simple GUIs with Python, I started out trying to put together a few helper functions to make life simpler.  \n\n\nIt's obviously grown a bit since then, and has become fairly functional!  \n\n\nappJar is released under the \nApache License 2.0\n\n\nSo, you're free to use it, modify it \n redistribute it, as long as you acknowledge my copyright, and aren't trying to make money out of it...  \n\n\n\n\nCopyright 2015-2017 Richard Jarvis\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.", 
            "title": "License"
        }, 
        {
            "location": "/License/#license", 
            "text": "This project has been a labour of love over the last couple of years.    When confronted with the difficulty both pupils and teachers were having creating simple GUIs with Python, I started out trying to put together a few helper functions to make life simpler.    It's obviously grown a bit since then, and has become fairly functional!    appJar is released under the  Apache License 2.0  So, you're free to use it, modify it   redistribute it, as long as you acknowledge my copyright, and aren't trying to make money out of it...     Copyright 2015-2017 Richard Jarvis  Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.", 
            "title": "License"
        }, 
        {
            "location": "/Support/", 
            "text": "Support\n\n\n\n\nThis is an open source project, freely available on \nGitHub\n.\n\nClick: \n\nIssue\n to raise an issue.  \n\n\nThe code on GitHub will always be the most up-to-date.\n\nIf you want the latest fixes \n enhancements - try out the \ndevelopment branch\n.  \n\n\nIf you want to update your existing code, just replace the \nappjar.py file\n \n\nZip files are available to download from the \nreleases folder", 
            "title": "Support"
        }, 
        {
            "location": "/Support/#support", 
            "text": "This is an open source project, freely available on  GitHub . \nClick:  Issue  to raise an issue.    The code on GitHub will always be the most up-to-date. \nIf you want the latest fixes   enhancements - try out the  development branch .    If you want to update your existing code, just replace the  appjar.py file   \nZip files are available to download from the  releases folder", 
            "title": "Support"
        }, 
        {
            "location": "/Thanks/", 
            "text": "Thanks to:\n\n\n\n\nHelpful Resources\n\n\n\n\nhttp://effbot.org/tkinterbook/\n - The GURU of all things tkinter \n Python\n\n\nhttp://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html\n - another great resource\n\n\nhttp://tkinter.unpythonic.net/wiki/FrontPage\n - another good resource\n\n\n\n\nIncorporated Libraries\n\n\n\n\nhttps://github.com/drj11/pypng\n - supplies basic PNG support\n\n\nhttps://bitbucket.org/hokaze/tkinter-png\n - allows PNGs to be treated as PhotoImages\n\n\nhttps://github.com/sullerandras/nanojpeg-python\n - provides BASIC jpeg support\n\n\nhttp://tkinter.unpythonic.net/wiki/ToolTip\n - provides ToolTips\n\n\nhttps://github.com/petasis/tkdnd\n - provides Drag'n Drop support  \n\n\nMicroBit Emulator Widget - Ben Goodwin  \n\n\n\n\nIcons\n\n\n\n\nCredit to www.interactivemania.com for the icons - warning malware...  \n\n\n\n\nDocumentation\n\n\n\n\nhttp://www.mkdocs.org\n - used to generate this documentation\n\n\nhttp://lab.hakim.se/reveal-js/\n - used to generate the slides\n\n\n\n\nDevelopment\n\n\n\n\nhttps://travis-ci.org\n - used to perform i\n monitor unit testing  \n\n\nhttps://coveralls.io\n - used to monitor how good the testing is  \n\n\nhttps://codeclimate.com\n - used to check quality of code", 
            "title": "Acknowledgements"
        }, 
        {
            "location": "/Thanks/#thanks-to", 
            "text": "", 
            "title": "Thanks to:"
        }, 
        {
            "location": "/Thanks/#helpful-resources", 
            "text": "http://effbot.org/tkinterbook/  - The GURU of all things tkinter   Python  http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html  - another great resource  http://tkinter.unpythonic.net/wiki/FrontPage  - another good resource", 
            "title": "Helpful Resources"
        }, 
        {
            "location": "/Thanks/#incorporated-libraries", 
            "text": "https://github.com/drj11/pypng  - supplies basic PNG support  https://bitbucket.org/hokaze/tkinter-png  - allows PNGs to be treated as PhotoImages  https://github.com/sullerandras/nanojpeg-python  - provides BASIC jpeg support  http://tkinter.unpythonic.net/wiki/ToolTip  - provides ToolTips  https://github.com/petasis/tkdnd  - provides Drag'n Drop support    MicroBit Emulator Widget - Ben Goodwin", 
            "title": "Incorporated Libraries"
        }, 
        {
            "location": "/Thanks/#icons", 
            "text": "Credit to www.interactivemania.com for the icons - warning malware...", 
            "title": "Icons"
        }, 
        {
            "location": "/Thanks/#documentation", 
            "text": "http://www.mkdocs.org  - used to generate this documentation  http://lab.hakim.se/reveal-js/  - used to generate the slides", 
            "title": "Documentation"
        }, 
        {
            "location": "/Thanks/#development", 
            "text": "https://travis-ci.org  - used to perform i  monitor unit testing    https://coveralls.io  - used to monitor how good the testing is    https://codeclimate.com  - used to check quality of code", 
            "title": "Development"
        }, 
        {
            "location": "/advertising/", 
            "text": "Advertising\n\n\n\n\nThe only direct cost incurred through creating/maintaining appJar is the domain name registration.  \n\n\nHowever, hundreds of hours have been invested into coding and documenting the project.  \n\n\nSo, as of version 0.90, some advertising has been introduced to the documentation site, to help keep the project running.  \n\n\nI've worked hard to make this as unobtrusive as possible - an ad in the footer, and one or two inline ads in the longer pages.  \n\n\nIf you have some kind of ad blocker running, you won't see the ads, although an empty ad block might appear.  \n\n\nSupporting appJar\n\n\n\n\nIf you'd like to help support appJar, please consider adding us to your ad blocker's whitelist.  \n\n\nHere's how to do it in the ad blockers I use:\n\n\n\n\n\n\nAdBlock\n (Mac/Safari)\n\n    Click the \nAdBlock icon\n -\n Options -\n Customize.\n\n    Click \nShow ads on a webpage or domain\n, type \nhttp://appjar.info\n, and press \nOK\n  \n\n\n\n\n\n\nuBlock\n (Raspberry Pi/Chromium)\n\n    Right-click the \nuBlock icon\n (top right) -\n Options -\n Whitelist\n\n    Type \nappjar.info\n, and press \nApply changes", 
            "title": "Advertising"
        }, 
        {
            "location": "/advertising/#advertising", 
            "text": "The only direct cost incurred through creating/maintaining appJar is the domain name registration.    However, hundreds of hours have been invested into coding and documenting the project.    So, as of version 0.90, some advertising has been introduced to the documentation site, to help keep the project running.    I've worked hard to make this as unobtrusive as possible - an ad in the footer, and one or two inline ads in the longer pages.    If you have some kind of ad blocker running, you won't see the ads, although an empty ad block might appear.", 
            "title": "Advertising"
        }, 
        {
            "location": "/advertising/#supporting-appjar", 
            "text": "If you'd like to help support appJar, please consider adding us to your ad blocker's whitelist.    Here's how to do it in the ad blockers I use:    AdBlock  (Mac/Safari) \n    Click the  AdBlock icon  -  Options -  Customize. \n    Click  Show ads on a webpage or domain , type  http://appjar.info , and press  OK       uBlock  (Raspberry Pi/Chromium) \n    Right-click the  uBlock icon  (top right) -  Options -  Whitelist \n    Type  appjar.info , and press  Apply changes", 
            "title": "Supporting appJar"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing\n\n\n\n\nWe are always happy to receive additions/updates/fixes to the library - simply submit a Pull Request.  \n\n\nThe key focusses of the project are that we have good, up-to-date documentation and reliable code.  \n\n\nTherefore, in order to add new features, you should be looking to include them in both the documentation and the test suite.  \n\n\nTesting\n\n\n\n\nWe use \nTravis\n and \nCoveralls\n to ensure the code works.\n\nIn order to ensure coverage, every new function that is added should be included in \n/tests/widget_test.py\n\nThere are lots of functions in there that simply add widgets to the test GUI, at a minimum this ensures they are free of basic syntax errors.\n\nIf the widget is interactive or has setters \n getters, then it's useful to include a set followed by a get with an assert:\n\n\napp.addLabel(\nl1\n, \nMessage\n)\nassert app.getLabel(\nl1\n) == \nMessage\n\napp.setLabel(\nl1\n, \nNew Message\n)\nassert app.getLabel(\nl1\n) == \nNew Message\n\napp.clearLabel(\nl1\n)\nassert app.getLabel(\nl1\n) == \n\n\n\n\n\nIf a function call (add/set/clear) were to fail, the test would fail. And if the \nassert\n doesn't match, the test will fail.\n\n\nDocumentation\n\n\n\n\nWe've used \nMkDocs\n hosted on \nGitHub Pages\n to build this site.\n\nThe pages are written in Markdown - there are lots of sites out there giving advice...  \n\n\nThe process is fairly straightforward:  \n\n\n\n\nIdentify the page you need to modify - look at the URL, the folder will be the file name  \n\n\nFind the \n.md\n file in \n/docs/mkdocs/docs\n  \n\n\nAdd the relevant information", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#contributing", 
            "text": "We are always happy to receive additions/updates/fixes to the library - simply submit a Pull Request.    The key focusses of the project are that we have good, up-to-date documentation and reliable code.    Therefore, in order to add new features, you should be looking to include them in both the documentation and the test suite.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#testing", 
            "text": "We use  Travis  and  Coveralls  to ensure the code works. \nIn order to ensure coverage, every new function that is added should be included in  /tests/widget_test.py \nThere are lots of functions in there that simply add widgets to the test GUI, at a minimum this ensures they are free of basic syntax errors. \nIf the widget is interactive or has setters   getters, then it's useful to include a set followed by a get with an assert:  app.addLabel( l1 ,  Message )\nassert app.getLabel( l1 ) ==  Message \napp.setLabel( l1 ,  New Message )\nassert app.getLabel( l1 ) ==  New Message \napp.clearLabel( l1 )\nassert app.getLabel( l1 ) ==    If a function call (add/set/clear) were to fail, the test would fail. And if the  assert  doesn't match, the test will fail.", 
            "title": "Testing"
        }, 
        {
            "location": "/contributing/#documentation", 
            "text": "We've used  MkDocs  hosted on  GitHub Pages  to build this site. \nThe pages are written in Markdown - there are lots of sites out there giving advice...    The process is fairly straightforward:     Identify the page you need to modify - look at the URL, the folder will be the file name    Find the  .md  file in  /docs/mkdocs/docs     Add the relevant information", 
            "title": "Documentation"
        }, 
        {
            "location": "/whatsNew/", 
            "text": "Change-Log\n\n\n\n\nVersion 0.91\n\n\n\n\nGrids have been renamed to Tables!\n\n\n\n\nappJar logging now uses its own logLevel of TRACE\n\n\n\n\n\n\nIssues Resolved:\n\n\n\n\n#398\n - Documented \n.pyw files\n.  \n\n\n#395\n - Option to \nfast stop\n a GUI.  \n\n\n#391\n - Updated error messages on \n_configWidget\n  \n\n\n#390\n - New simpleAppJar funcitons for \nstatusbar\n.  \n\n\n#388\n - Can now specify the cell style of \ntables\n.\n\n\n#379\n - \nPieChart\n % fix in Python 2.7\n\n\n#373\n - Added function to get the BG colour of a widget.  \n\n\n#347\n, \n#360\n, \n374\n \n \n#375\n - Right Click Menu updates\n\n\n#369\n - Hide scrollbars in \nScollPane\n\n\n#367\n - Update to \nlogging\n - all appJar looging now done at a \nTRACE\n level, below \nDEBUG\n  \n\n\n#366\n - Better error reporting on AutoEntries\n\n\n#340\n - \nappJar properties\n now fully documented \n tested  \n\n\n#335\n - No longer necessary to receive a parameter in functions linked to appJar widgets.  \n\n\n#329\n - Starting separator removed from Windows \nRight-click Menus\n  \n\n\n#328\n - New \nAccessibility Widget\n introduced to configure colours \n fonts  \n\n\n#301\n - Updated \nlayout parameters\n, can now pass \nprevious\n \n \nnext\n for the row parameter, to make it easier to position widgets  \n\n\n#29\n - Updated \nsound\n documentation to discuss blocking sounds.  \n\n\n\n\n\n\n\n\nVersion 0.9\n\n\n\n\nIntroduction of alternative \nwidget access functions\n (\n#235\n)  - now possible to \nADD\n, \nSET\n \n \nGET\n widgets by just using their name.  \n\n\nIntroduction of alternative \nGUI properties\n (\n#340\n) - now possible to GET/SET properties with special property functions  \n\n\nIntroduction of appJar \nsettings\n - can now save/load GUI state to/from file.  \n\n\nBig improvements to \ngrids\n - can add/remove/replace rows/columns, can sort data, can access a right-click menu, can connect to an sqlite database.  \n\n\n\n\nMore \nttk\n improvements - grouped widgets now work, introduced external themes.  \n\n\n\n\n\n\nIssues Resolved:\n\n\n\n\n#344\n - \nlabels\n now display the title when no text is provided, instead of an empty label.  \n\n\n#343\n - new parameter for appJar constructor: \nshowIcon\n allows the icon to be ignored when running Windows\n\n\n#340\n - introduced \nGUI properties\n for most settings  \n\n\n#339\n - new functions to remove \ntoolbars\n and \nstatusbars\n    \n\n\n#335\n - when setting functions for events, if no parameter is present in the function, no parameter will be passed by the event  \n\n\n#333\n - started work on hide/show/delete \ntabs\n  \n\n\n#325\n - fixed issue with \nright-click menus\n\n\n#324\n - fixed issue with losing \nfile/directory Entry\n values  \n\n\n#317\n - implemented fonts on \ntabbed frames\n  \n\n\n#316\n - can now display compound images and text in \nbuttons\n  \n\n\n#309\n - cleaned up handling of \nfonts\n  \n\n\n#303\n - added functions to \nbind/unbind multiple keys\n to a function  \n\n\n#298\n - fixed issue in \nmenubar shortcuts\n where numeric shortcuts didn't work.  \n\n\n#296\n - two new widgets introduced \nturtle\n and \ncanvas\n  \n\n\n#294\n \n \n#292\n - fixes on \nentries\n: better handle arrow key presses on mac, defaults work better on secret entries \n file/directory entries  \n\n\n#290\n - fixed issue showing \nAutoEntries\n in \nsubWindows\n  \n\n\n#289\n - new functions to change list in \nAutoEntries\n \n\n\n#288\n - fixed issue showing \ndialogs\n in \nsubWindows\n  \n\n\n#286\n - added new \nthreaded callback\n, contributed by \n@mpmc\n\n\n#284\n - new \ndialogs\n for strings, integers \n floats  \n\n\n#283\n - \nquestionBox\n now returns Booleans instead of yes/no  \n\n\n#281\n - resolved issues with \nthreads\n  \n\n\n#279\n - tidied up \nremove all widgets\n - now leaves GUI looking better  \n\n\n#271\n, \n#266\n, \n#255\n \n \n#232\n - \nGrid\n improvements  \n\n\n#242\n, \n#259\n, \n#267\n - work on \nMatPLotLib\n now support multiple plot types, and retaining some settings  \n\n\n#250\n - Can now add \ncompound images\n - images with a built in label  \n\n\n#236\n - appJar can now save GUI \nsettings\n and load them again  \n\n\n#233\n - \nNumericEntries\n return \nNone\n when empty\n\n\n#218\n - Can no longer set \nNumericEntries\n to Strings  \n\n\n\n\n\n\n\n\nVersion 0.82.1\n\n\n\n\nIssues Resolved:\n\n\n#275\n - maps fix  \n\n\n\n\n\n\n\n\nVersion 0.82\n\n\n\n\nIssues Resolved:\n\n\n#189\n - some tweaks to \nttk support\n  \n\n\nFixes to documentation\n\n\n\n\n\n\n\n\nVersion 0.8\n\n\n\n\nChanged versioning - PyPi difficulties, combined with close to a 1.0 release...\n\n\nCreate a GUI in \nTWO\n lines using \ncontext managers\n - appJar now allows you to use \nwith\n to create a GUI and \ncontainers\n  \n\n\nEvents\n, \nThreads\n, \nLoops \n Sleeps\n have been improved. It's now possible to run background tasks (such as a download) and update the GUI safely.   \n\n\nCommand line arguments\n: appJar now supports command line arguments for \nlogging\n and \ninternationalisation\n as well as help \n version information.  \n\n\nInternationalisation\n is now greatly improved - nearly everything supports multiple languages.  \n\n\nScrollPanes\n \n \nGrids\n greatly improved  \n\n\n\n\nMuch more friendly \nlicense\n  \n\n\n\n\n\n\nIssues Resolved:\n\n\n\n\n#249\n - Can now set a parent for \ndialogs\n so that if they are launched from a \nSubWindow\n they behave properly.  \n\n\n#248\n - Can now \nadd icons\n and \niconButtons\n using inbuilt icon set.  \n\n\n#246\n - Can now hide titles on \nlabelFrames\n  \n\n\n#243\n - Fixed bug in \nToggleFrames\n  \n\n\n#241\n - Notes on installing on \nlinux\n  \n\n\n#234\n - Support for \nContextManagers\n throughout appJar  \n\n\n#228\n - appJar prevents you from creating more than one gui at a time  \n\n\n#226\n - fixed issues on \nfile/directory entries\n  \n\n\n#223\n - fixed issues with \nsound\n import  \n\n\n#217\n - Fixed issues with removing \nBG images\n  \n\n\n#216\n - Improvements to \nintegrated testing\n  \n\n\n#215\n - Changed \nlicensing\n  \n\n\n#213\n - Validation entries improved in \nInternationalisation\n  \n\n\n#212\n - Creating an empty \nTooltip\n now doesn't create anything  \n\n\n#211\n - \nLogging\n now logs line number \n function name  \n\n\n#209\n - Additional testing for \nScrollPanes\n \n \nGrids\n  \n\n\n#207\n - Now possible to change the title and anchor of a \nLabelFrame\n  \n\n\n#206\n - New method for \npausing functions\n when stopping infinite loops  \n\n\n#205\n - Now possible to \nselect\n a disabled item in an OptionBox.  \n\n\n#204\n - appJar now supports \nCommand line arguments\n  \n\n\n#203\n - updated docs on \nLabelFrames\n  \n\n\n#202\n - functions now provided to get or clear all values of a selected widget type  \n\n\n#200\n - Switched \nGrid\n to use a \nScrollPane\n \n changed ScrollPane to use AutoScrollbars.  \n\n\n#196\n - Resolved issue with configuring \nScrolledTextAreas\n  \n\n\n#189\n - More work on \nttk\n  \n\n\n#177\n - \nsetLocation\n can now position windows in the center of the screen\n\n\n#162\n - PhotoImage objects can now be passed directly when \nadding/setting ImageData\n  \n\n\n#132\n - Now possible to \nDelete and Rename\n OptionBox items.\n\n\n#120\n - Improvements to \nevents\n \n introduction of \nthreading\n  \n\n\n#71\n - More work on \nInternationalisation\n - now supports Images, LabelFrames, ToggleFrames, TabbedFrames, Properties, Grids, Toolbars, Tooltips, SubWindows, PagedWindows, SplashScreens \n Titles  \n\n\n#69\n - Changes to \nTextAreas\n - now, lines wrap on spaces \n \nsetTextArea()\n now appends to the text  \n\n\n\n\n\n\n\n\nVersion 0.07\n\n\n\n\nNew widgets: \nGoogleMaps\n - a widget to show a GoogleMap tile \n control widgets, \nImageMaps\n - clickable ImageMap with linked functions, \nFileEntries\n - Entries linked with File/Directory dialogs  \n\n\nWidget enhancements: \nPinnable Toolbars\n, \nSelectableLabels\n, better \nTooltips\n, \nNamedCheckBoxes\n \n settable \nListBoxes\n  \n\n\nUpdate to event model and \ndocumentation\n - now clearer how to perform different actions, and function names updated.  \n\n\n\n\nSwitched to Python's \nlogging\n feature\n\n\n\n\n\n\nIssues Resolved:\n\n\n\n\n#192\n - Fixed PNG image support in python 2.7 - specifically for toolbars  \n\n\n#189\n - \nVERY\n basic support for \nttk\n\n\n#186\n - Changes to \nUnicode\n support  \n\n\n#185\n - All add functions now return the widget  \n\n\n#184\n - \nGroupable List Boxes\n\n\n#182\n - Added a link to source for \nGoogleMaps\n\n\n#181\n - \nDisabling toolbars\n will also disable a pinned icon\n\n\n#180\n - \nSlowActions\n  \n\n\n#176\n - Fixed issue with placing container in \ncontainers\n  \n\n\n#173\n - New functions to \nSet ListBoxes\n  \n\n\n#161\n - \nNamedCheckBoxes\n  \n\n\n#148\n - Improved support for \nMouseOver Events\n  \n\n\n#151\n \n \n#158\n - Some fixes to \nGrid Widget\n  \n\n\n#138\n - Can now register a \nChange Event\n on DatePicker  \n\n\n#137\n - \nFile Entries\n  \n\n\n#136\n - Simple \nGoogleMaps\n widget   \n\n\n#135\n - A clickable \nImage Map\n  \n\n\n#133\n - Improvements to \nTooltips\n  \n\n\n#124\n - Switched to Python's \nlogging\n feature  \n\n\n#101\n - More work implementing \nDrag n'Drop\n  \n\n\n#73\n - Toolbars are now \npinnable\n  \n\n\n#59\n - \nSelectableLabels\n  \n\n\n#7\n -  Can now \nSet Foreground\n across the whole GUI  \n\n\n\n\n\n\n\n\nVersion 0.061\n\n\n\n\nIssues Resolved:  \n\n\n#154\n - Fixed bug with AutoEntry not showing drop-down in right position, when placed in a container  \n\n\n\n\n\n\n\n\nVersion 0.06\n\n\n\n\nNew widgets: \nMicroBit\n, \nValidation Entries\n  \n\n\nWidget enhancements: Can now set some rules for \nentries\n  \n\n\nNew documentation: \npackaging\n, \nspecial characters\n, \nevents\n, \ndrag'n drop\n  \n\n\nWork on events: \nstopping event propagation\n, \ndrag/over events\n, \ndrag'n drop\n  \n\n\nIssues Resolved:  \n\n\n#143\n - Fixed bug with setting defaults on AutoEntries  \n\n\n#142\n - Finished documentation for \npopups\n  \n\n\n#130\n - Documented how to use \nspecial characters\n  \n\n\n#123\n - New features for \nsetting entries\n - max length, auto uppercase/lowercase, validation  \n\n\n#119\n - \nMicroBit\n widget added  \n\n\n#118\n - dynamic library imports  \n\n\n#117\n - introduced documentation on \npackaging\n  \n\n\n#116\n - configurable trough \nincrements\n for a scale  \n\n\n#115\n - fixed transparency in python 2.7  \n\n\n#114\n - ability to stop events being propagated  \n\n\n#112\n - now possible to start with a subWindow (specified in go()) as well as hide() \n show() main window  \n\n\n#110\n - can now configure the number of rows to \nshow\n in an AutoEntry  \n\n\n#108\n - Fixed issue with modal \nSubWindows\n  \n\n\n#106\n - Function to add an \nimage button\n  \n\n\n#102\n - Updates to drag/over \nevents\n  \n\n\n#103\n - Can now manage event calling when \nwidgets change\n  \n\n\n#101\n - \nDrag n'Drop\n beta support for dnd between applications  \n\n\n#92\n - Function to \nget all entries\n  \n\n\n#75\n - Fix to \ndestroySubWindow\n  \n\n\n#46\n - Added version details to about box  \n\n\n#42\n - Added functionality to \nchange TickOptionBoxes\n  \n\n\n#33\n - Added convenience function to \nsetTreeColours\n  \n\n\n\n\n\n\n\n\nVersion 0.052\n\n\n\n\nIssues Resolved:  \n\n\n#114\n - ability to stop functions being called when a set method is activated\n\n\n\n\n\n\n\n\nVersion 0.051\n\n\n\n\nIssues Resolved:  \n\n\n#109\n - Labelled Auto Entry, contributed by \njacobthetechy\n\n\n\n\n\n\n\n\nVersion 0.05\n\n\n\n\nOpen Container\n - implemented issue \n#83\n, can now reopen a container, perform operations on it, and close it.  \n\n\nChanged disable entry to readonly, allows entries to be copied (\n#86\n)  \n\n\nImages now support \nraw image data\n.  \n\n\nSetters now call any registered functions  \n\n\nRewrite of \nMeters\n, proper inheritance, all use gradated fill, Dual/Split Meter swapped (\n#65\n).  \n\n\nRewrite of \nScrollPane\n, multi-platform scrolling...\n\n\nAdded functions to \nchange the bg/fg\n of ListBox items (\n#97\n).  \n\n\nIssues Resolved:  \n\n\n#101\n \n \n#103\n - updates to documentation\n\n\n#99\n - ability to create empty containers  \n\n\n#97\n - ability to set bg/fg colour of list items\n\n\n#94\n - basic support for \nMatPlotLib\n  \n\n\n#90\n - raw image data  \n\n\n#89\n - minimum speed for animated image  \n\n\n#88\n - preload mouse over images  \n\n\n#86\n - disabled entry now readonly  \n\n\n#85\n - setters now call function (if available)  \n\n\n#83\n - can now reopen container  \n\n\n#65\n - Meter rewrite  \n\n\n#34\n/\n#35\n - ScrollPane rewrite\n\n\n\n\n\n\n\n\nVersion 0.042\n\n\n\n\nIssues Resolved:  \n\n\n#95\n - fixed issue launching ShowCase under Python 2 (removed icons)  \n\n\n#93\n - fixed issue with numDialog/textDialog under python 2  \n\n\n\n\n\n\n\n\nVersion 0.041\n\n\n\n\nContinuous Integration - added \nlandscape.io\n to monitor code quality  \n\n\nReload Image\n - function to force a reload of an image, bypassing the cache (issue \n#87\n)  \n\n\nMinor fixes based off landscape report  \n\n\nIssues Resolved:  \n\n\n#87\n - reloadImage()  \n\n\n#84\n - Removed requirement for appJar icon in Windows  \n\n\n\n\n\n\n\n\nVersion 0.04\n\n\n\n\nInternationalisation\n - it's now possible to support multiple languages, by adding simple config files.  \n\n\nSplashscreen\n - a simple splashscreen is now available.  \n\n\nAutoCompletion EntryBox\n - added a new widget, giving autocompletion in EntryBoxes  \n\n\nFunction on change\n in ListBox - now possible to call a function each time a ListBox changes  \n\n\nPython 3.6 Support\n - now supports python3.6 - fixed issue with renamed idelib files  \n\n\nContinuous Integration - now uses \nTravis-CI\n and \nCoveralls\n to check for errors on each commit  \n\n\nUpdated documentation: Rearrangement of navigation bar, new pages for new features, minor modifications.  \n\n\nIssues Resolved:  \n\n\n#81\n - now allows negative numbers/decimals to be entered correctly in NumericEntries  \n\n\n#80\n - now support Python 3.6  \n\n\n#78\n - fixed typo in documentation  \n\n\n#74\n - SplashScreen  \n\n\n#72\n - Unit testing  \n\n\n#71\n - Internationalisation  \n\n\n#70\n - AutoComplete EntryBox", 
            "title": "Change-Log"
        }, 
        {
            "location": "/whatsNew/#change-log", 
            "text": "", 
            "title": "Change-Log"
        }, 
        {
            "location": "/whatsNew/#version-091", 
            "text": "Grids have been renamed to Tables!   appJar logging now uses its own logLevel of TRACE    Issues Resolved:   #398  - Documented  .pyw files .    #395  - Option to  fast stop  a GUI.    #391  - Updated error messages on  _configWidget     #390  - New simpleAppJar funcitons for  statusbar .    #388  - Can now specify the cell style of  tables .  #379  -  PieChart  % fix in Python 2.7  #373  - Added function to get the BG colour of a widget.    #347 ,  #360 ,  374     #375  - Right Click Menu updates  #369  - Hide scrollbars in  ScollPane  #367  - Update to  logging  - all appJar looging now done at a  TRACE  level, below  DEBUG     #366  - Better error reporting on AutoEntries  #340  -  appJar properties  now fully documented   tested    #335  - No longer necessary to receive a parameter in functions linked to appJar widgets.    #329  - Starting separator removed from Windows  Right-click Menus     #328  - New  Accessibility Widget  introduced to configure colours   fonts    #301  - Updated  layout parameters , can now pass  previous     next  for the row parameter, to make it easier to position widgets    #29  - Updated  sound  documentation to discuss blocking sounds.", 
            "title": "Version 0.91"
        }, 
        {
            "location": "/whatsNew/#version-09", 
            "text": "Introduction of alternative  widget access functions  ( #235 )  - now possible to  ADD ,  SET     GET  widgets by just using their name.    Introduction of alternative  GUI properties  ( #340 ) - now possible to GET/SET properties with special property functions    Introduction of appJar  settings  - can now save/load GUI state to/from file.    Big improvements to  grids  - can add/remove/replace rows/columns, can sort data, can access a right-click menu, can connect to an sqlite database.     More  ttk  improvements - grouped widgets now work, introduced external themes.      Issues Resolved:   #344  -  labels  now display the title when no text is provided, instead of an empty label.    #343  - new parameter for appJar constructor:  showIcon  allows the icon to be ignored when running Windows  #340  - introduced  GUI properties  for most settings    #339  - new functions to remove  toolbars  and  statusbars       #335  - when setting functions for events, if no parameter is present in the function, no parameter will be passed by the event    #333  - started work on hide/show/delete  tabs     #325  - fixed issue with  right-click menus  #324  - fixed issue with losing  file/directory Entry  values    #317  - implemented fonts on  tabbed frames     #316  - can now display compound images and text in  buttons     #309  - cleaned up handling of  fonts     #303  - added functions to  bind/unbind multiple keys  to a function    #298  - fixed issue in  menubar shortcuts  where numeric shortcuts didn't work.    #296  - two new widgets introduced  turtle  and  canvas     #294     #292  - fixes on  entries : better handle arrow key presses on mac, defaults work better on secret entries   file/directory entries    #290  - fixed issue showing  AutoEntries  in  subWindows     #289  - new functions to change list in  AutoEntries    #288  - fixed issue showing  dialogs  in  subWindows     #286  - added new  threaded callback , contributed by  @mpmc  #284  - new  dialogs  for strings, integers   floats    #283  -  questionBox  now returns Booleans instead of yes/no    #281  - resolved issues with  threads     #279  - tidied up  remove all widgets  - now leaves GUI looking better    #271 ,  #266 ,  #255     #232  -  Grid  improvements    #242 ,  #259 ,  #267  - work on  MatPLotLib  now support multiple plot types, and retaining some settings    #250  - Can now add  compound images  - images with a built in label    #236  - appJar can now save GUI  settings  and load them again    #233  -  NumericEntries  return  None  when empty  #218  - Can no longer set  NumericEntries  to Strings", 
            "title": "Version 0.9"
        }, 
        {
            "location": "/whatsNew/#version-0821", 
            "text": "Issues Resolved:  #275  - maps fix", 
            "title": "Version 0.82.1"
        }, 
        {
            "location": "/whatsNew/#version-082", 
            "text": "Issues Resolved:  #189  - some tweaks to  ttk support     Fixes to documentation", 
            "title": "Version 0.82"
        }, 
        {
            "location": "/whatsNew/#version-08", 
            "text": "Changed versioning - PyPi difficulties, combined with close to a 1.0 release...  Create a GUI in  TWO  lines using  context managers  - appJar now allows you to use  with  to create a GUI and  containers     Events ,  Threads ,  Loops   Sleeps  have been improved. It's now possible to run background tasks (such as a download) and update the GUI safely.     Command line arguments : appJar now supports command line arguments for  logging  and  internationalisation  as well as help   version information.    Internationalisation  is now greatly improved - nearly everything supports multiple languages.    ScrollPanes     Grids  greatly improved     Much more friendly  license       Issues Resolved:   #249  - Can now set a parent for  dialogs  so that if they are launched from a  SubWindow  they behave properly.    #248  - Can now  add icons  and  iconButtons  using inbuilt icon set.    #246  - Can now hide titles on  labelFrames     #243  - Fixed bug in  ToggleFrames     #241  - Notes on installing on  linux     #234  - Support for  ContextManagers  throughout appJar    #228  - appJar prevents you from creating more than one gui at a time    #226  - fixed issues on  file/directory entries     #223  - fixed issues with  sound  import    #217  - Fixed issues with removing  BG images     #216  - Improvements to  integrated testing     #215  - Changed  licensing     #213  - Validation entries improved in  Internationalisation     #212  - Creating an empty  Tooltip  now doesn't create anything    #211  -  Logging  now logs line number   function name    #209  - Additional testing for  ScrollPanes     Grids     #207  - Now possible to change the title and anchor of a  LabelFrame     #206  - New method for  pausing functions  when stopping infinite loops    #205  - Now possible to  select  a disabled item in an OptionBox.    #204  - appJar now supports  Command line arguments     #203  - updated docs on  LabelFrames     #202  - functions now provided to get or clear all values of a selected widget type    #200  - Switched  Grid  to use a  ScrollPane    changed ScrollPane to use AutoScrollbars.    #196  - Resolved issue with configuring  ScrolledTextAreas     #189  - More work on  ttk     #177  -  setLocation  can now position windows in the center of the screen  #162  - PhotoImage objects can now be passed directly when  adding/setting ImageData     #132  - Now possible to  Delete and Rename  OptionBox items.  #120  - Improvements to  events    introduction of  threading     #71  - More work on  Internationalisation  - now supports Images, LabelFrames, ToggleFrames, TabbedFrames, Properties, Grids, Toolbars, Tooltips, SubWindows, PagedWindows, SplashScreens   Titles    #69  - Changes to  TextAreas  - now, lines wrap on spaces    setTextArea()  now appends to the text", 
            "title": "Version 0.8"
        }, 
        {
            "location": "/whatsNew/#version-007", 
            "text": "New widgets:  GoogleMaps  - a widget to show a GoogleMap tile   control widgets,  ImageMaps  - clickable ImageMap with linked functions,  FileEntries  - Entries linked with File/Directory dialogs    Widget enhancements:  Pinnable Toolbars ,  SelectableLabels , better  Tooltips ,  NamedCheckBoxes    settable  ListBoxes     Update to event model and  documentation  - now clearer how to perform different actions, and function names updated.     Switched to Python's  logging  feature    Issues Resolved:   #192  - Fixed PNG image support in python 2.7 - specifically for toolbars    #189  -  VERY  basic support for  ttk  #186  - Changes to  Unicode  support    #185  - All add functions now return the widget    #184  -  Groupable List Boxes  #182  - Added a link to source for  GoogleMaps  #181  -  Disabling toolbars  will also disable a pinned icon  #180  -  SlowActions     #176  - Fixed issue with placing container in  containers     #173  - New functions to  Set ListBoxes     #161  -  NamedCheckBoxes     #148  - Improved support for  MouseOver Events     #151     #158  - Some fixes to  Grid Widget     #138  - Can now register a  Change Event  on DatePicker    #137  -  File Entries     #136  - Simple  GoogleMaps  widget     #135  - A clickable  Image Map     #133  - Improvements to  Tooltips     #124  - Switched to Python's  logging  feature    #101  - More work implementing  Drag n'Drop     #73  - Toolbars are now  pinnable     #59  -  SelectableLabels     #7  -  Can now  Set Foreground  across the whole GUI", 
            "title": "Version 0.07"
        }, 
        {
            "location": "/whatsNew/#version-0061", 
            "text": "Issues Resolved:    #154  - Fixed bug with AutoEntry not showing drop-down in right position, when placed in a container", 
            "title": "Version 0.061"
        }, 
        {
            "location": "/whatsNew/#version-006", 
            "text": "New widgets:  MicroBit ,  Validation Entries     Widget enhancements: Can now set some rules for  entries     New documentation:  packaging ,  special characters ,  events ,  drag'n drop     Work on events:  stopping event propagation ,  drag/over events ,  drag'n drop     Issues Resolved:    #143  - Fixed bug with setting defaults on AutoEntries    #142  - Finished documentation for  popups     #130  - Documented how to use  special characters     #123  - New features for  setting entries  - max length, auto uppercase/lowercase, validation    #119  -  MicroBit  widget added    #118  - dynamic library imports    #117  - introduced documentation on  packaging     #116  - configurable trough  increments  for a scale    #115  - fixed transparency in python 2.7    #114  - ability to stop events being propagated    #112  - now possible to start with a subWindow (specified in go()) as well as hide()   show() main window    #110  - can now configure the number of rows to  show  in an AutoEntry    #108  - Fixed issue with modal  SubWindows     #106  - Function to add an  image button     #102  - Updates to drag/over  events     #103  - Can now manage event calling when  widgets change     #101  -  Drag n'Drop  beta support for dnd between applications    #92  - Function to  get all entries     #75  - Fix to  destroySubWindow     #46  - Added version details to about box    #42  - Added functionality to  change TickOptionBoxes     #33  - Added convenience function to  setTreeColours", 
            "title": "Version 0.06"
        }, 
        {
            "location": "/whatsNew/#version-0052", 
            "text": "Issues Resolved:    #114  - ability to stop functions being called when a set method is activated", 
            "title": "Version 0.052"
        }, 
        {
            "location": "/whatsNew/#version-0051", 
            "text": "Issues Resolved:    #109  - Labelled Auto Entry, contributed by  jacobthetechy", 
            "title": "Version 0.051"
        }, 
        {
            "location": "/whatsNew/#version-005", 
            "text": "Open Container  - implemented issue  #83 , can now reopen a container, perform operations on it, and close it.    Changed disable entry to readonly, allows entries to be copied ( #86 )    Images now support  raw image data .    Setters now call any registered functions    Rewrite of  Meters , proper inheritance, all use gradated fill, Dual/Split Meter swapped ( #65 ).    Rewrite of  ScrollPane , multi-platform scrolling...  Added functions to  change the bg/fg  of ListBox items ( #97 ).    Issues Resolved:    #101     #103  - updates to documentation  #99  - ability to create empty containers    #97  - ability to set bg/fg colour of list items  #94  - basic support for  MatPlotLib     #90  - raw image data    #89  - minimum speed for animated image    #88  - preload mouse over images    #86  - disabled entry now readonly    #85  - setters now call function (if available)    #83  - can now reopen container    #65  - Meter rewrite    #34 / #35  - ScrollPane rewrite", 
            "title": "Version 0.05"
        }, 
        {
            "location": "/whatsNew/#version-0042", 
            "text": "Issues Resolved:    #95  - fixed issue launching ShowCase under Python 2 (removed icons)    #93  - fixed issue with numDialog/textDialog under python 2", 
            "title": "Version 0.042"
        }, 
        {
            "location": "/whatsNew/#version-0041", 
            "text": "Continuous Integration - added  landscape.io  to monitor code quality    Reload Image  - function to force a reload of an image, bypassing the cache (issue  #87 )    Minor fixes based off landscape report    Issues Resolved:    #87  - reloadImage()    #84  - Removed requirement for appJar icon in Windows", 
            "title": "Version 0.041"
        }, 
        {
            "location": "/whatsNew/#version-004", 
            "text": "Internationalisation  - it's now possible to support multiple languages, by adding simple config files.    Splashscreen  - a simple splashscreen is now available.    AutoCompletion EntryBox  - added a new widget, giving autocompletion in EntryBoxes    Function on change  in ListBox - now possible to call a function each time a ListBox changes    Python 3.6 Support  - now supports python3.6 - fixed issue with renamed idelib files    Continuous Integration - now uses  Travis-CI  and  Coveralls  to check for errors on each commit    Updated documentation: Rearrangement of navigation bar, new pages for new features, minor modifications.    Issues Resolved:    #81  - now allows negative numbers/decimals to be entered correctly in NumericEntries    #80  - now support Python 3.6    #78  - fixed typo in documentation    #74  - SplashScreen    #72  - Unit testing    #71  - Internationalisation    #70  - AutoComplete EntryBox", 
            "title": "Version 0.04"
        }, 
        {
            "location": "/oldDocs/", 
            "text": "Previous Documentation\n\n\n\n\nappJar 0.90\n  \n\n\nappJar 0.82.1\n  \n\n\nappJar 0.07", 
            "title": "Old Documentation"
        }, 
        {
            "location": "/oldDocs/#previous-documentation", 
            "text": "appJar 0.90     appJar 0.82.1     appJar 0.07", 
            "title": "Previous Documentation"
        }, 
        {
            "location": "/pythonBasics/", 
            "text": "Python Basics\n\n\n\n\nBelow is a bunch of stuff explaining the basics of Python...  \n\n\nCheat Sheets\n\n\nHelp can be found at:\n\n\n\n\nPython Cheat Sheet\n\n\nTurtle Cheat Sheet\n\n\nGUI Cheat Sheet\n\n\n\n\n\n\nData\n\n\nVariables\n\n\nVariables are the most important things in programming.\n\nThey let your program remember information.\n\nVariables can store someone's name, their age, or even their favourite food.\n\nVariables simply point to a space in memory, where the data is stored.  \n\n\nA variable always has three things:\n\n\n\n\nAn \nidentifier\n - a name to refer to the variable by  \n\n\nA \nvalue\n - the information the\u00a0variable is storing  \n\n\nA \ndata type\n - the type of information being stored (words, numbers, lists, etc.)  \n\n\n\n\n# this declares three variables: name, age, male\n# and initialises each one with a starting value\nname = \nAlan Shearer\n\nage = 45\nmale = True\n\n\n\n\nVariables generally go through a three stage process:\n\n\n\n\nCreate\n - The variable identifier is declared, and the variable is initialised with a starting value\n\n\nChange\n - The variable's value is modified\n\n\nCheck\n - The variable's value is checked, in decisions \n loops\n\n\n\n\nAt various points along this route, the variable will be \nused\n.\n\n\nConstants\n\n\nSometimes, you need to store data that doesn't change - these are known as \nconstants\n.\n\nThey are \ncreated\n in the same way, but can't be \nchanged\n.\n\nIn Python, it is common to write the name of constants in \nall uppercase\n.\n\n\n# declare a constant, that we don't want to change\nWINNING_SCORE = 100\n\n\n\n\nData Types\n\n\nData types are very important, as they allow the program to have rules: if you add two numbers together, the program should do some maths, but if you add two words together (\nconcatenation\n) the program will just make a new sentence.\n\n\nThere are five main data types:\n\n\n\n\nString\n - words, letter, sentences. Defined using speech marks.\n\n\nInt\n - whole numbers\n\n\nReal\n - (floats) numbers with fractions (decimal points)\n\n\nBoolean\n - True or False (On or Off)\n\n\nList\n - a collection of things (any of the above, or even a collection of lists)\n\n\n\n\nPython tries to work out the data type automatically, but it occasionally needs some help, if you want to tell Python what the data type is, try one of the following:\n\n\n# create 3 new variables by changing the type of var1/var2/var3\nname = str(var1)\nage = int(var2)\nprice = float(var3)\n\n\n\n\nArithmetic Operators\n\n\nPython allows you to easily perform maths on your data\n\n\n| | \n-|-|-\n+ | Addition | a = b + c\n- | Subtraction | a = b - c\n* | Multiplication | a = b * c\n/ | Division | a = b / c\n// | Modulus division | a = b // c\n% | Remainder division | a = b % c\n\n | Exponent | a\nb\nround() | Round | Rounds the number to the nearest place\nfloor() | Round-down | Rounds the number down\n\nceil() | Round-Up | Rounds the number up\n\nsum() | Sum | Adds together all the items in the list\n\n\nString Operations\n\n\nPython also lets us perform various actions on Strings.\n\n\n| | \n-|-|-\n\nvarName.upper()\n | Uppercase | Makes the entire string uppercase\n\nvarName.lower()\n | Lowercase | Makes the entire string lowercase\n\nvarName.split(\" \")\n | Split into a list | Converts the String into a list, using spaces\n\nvarName.split(\",\")\n | Split into a list | Converts the String into a list, using commas\n\nvarName.count(\"a\")\n | Counts occurrences of the text | Counts how many times \na\n appears in the String\n\nvarName.index(\"a\")\n | Finds the first position of the text | Finds the first position of \na\n\n\nvarName.startswith(\"Mr.\")\n | Checks what the String starts with | Returns True if the String starts with \nMr.\n\n\nvarName.endswith(\"Jarvis\")\n | Checks what the String ends with | Returns True if the String ends with\nJarvis\n\n\nString Splicing\n\n\nRemember, Strings are just lists of characters.\n\nIt's also possible to access parts of a String using array square brackets.  \n\n\n| | \n-|-|-\n\nvarName[2]\n | Gets a character | Returns the third character\n\nvarName[2:5]\n | Gets a substring | Returns characters from 2 to 4\n\nvarName[2:]\n | Gets a substring | Returns characters from 2 to the end\n\nvarName[:5]\n | Gets a substring | Returns characters from the beginning to 4\n\nvarName[2:10:2]\n | Gets a substring | Returns characters from 2 to 9, skipping every other character\n\nvarName[::-1]\n | Reverse a String | Returns the String in reverse order\n\n\n\n\nSelection \n Operators\n\n\nSelection is the ability to make a decision. It allows us to do different things, depending on what information is in a variable.\n\nThis is done using\u00a0\nIF\n statements:\n\n\n# if they are 18 or over, print \nYou can vote\n\nif age \n= 18:\n    print(\nYou can vote\n)\nelse:\n    print(\nYou can't vote\n)\n\n\n\n\nMaking decisions is all about comparing things; is one variable bigger than another, are two other variables the same...\n\n\n# if they are 18 or over, print \nYou can vote\n\nif favArtist == \nPicasso\n:\n    print(\nYou like cubist paintings.\n)\nelif favArtist == \nRembrandt\n:\n    print(\nYou like realistic paintings.\n)\nelif favArtist == \nMonet\n:\n    print(\nYou like impressionist paintings.\n)\nelif favArtist == \nRembrandt\n:\n    print(\nYou like realistic paintings.\n)\nelif favArtist == \nCezanne\n:\n    print(\nYou like post-impresionistic paintings.\n)\nelse:\n    print(\nUnrecognised artist\n)\n\n\n\n\nTo compare things we use standard operators, just like in maths.\n\n\nEquality Operators\n\n\nThese let us test if things are equal or not:\n\n\n| |                                   \n\n-|-|-\n== | Equal to     | Check if two items are the same\n!= | Not equal to | Check if two items are not the same\n\n\nComparison Operators\n\n\nThese let us compare things:\n\n\n| | \n-|-|-\n\n\n\n\n| Greater than             | Check if the first item is bigger than the second item\n\n  | Less than                | Check if the first item is smaller than the second item\n= | Greater than or equal to | Check if the first item is bigger than or the same as the second item\n\n= | Less than or equal to    | Check if the first item is smaller than or the same as the second item\n\n\n\n\nLogical Operators\n\n\nThese let us use logic to combine lots of operators:\n\n\n|\n-|-\nand | Both comparisons have to be True\nor  | Either or both comparisons have to be True\nnot | This will change the result from True to False, or vice-versa\n\n\n\n\nIteration\n\n\nBeing able to do selection (make decisions) on its own is nearly enough.\n\nHowever, if we want our programs to be really useful, we want them to be able to repeat stuff.\n\n\nWe call this \niteration\n.\n\n\nWhile Loops\n\n\nLet us repeat something until we can make a decision (this may never occur)\n\n\nInfinite While Loops\n\n\nwhile True:\n    print ( \nLooping!\n )\n\n\n\n\nConditional While Loops\n\n\nnum = -1 # keep looping WHILE they don't guess 21\nwhile num != 21:\n    num = int ( input ( \nGuess a number: \n ) )\n    print ( \nYou guessed:\n, num )\nprint ( \nYou finally got it!!!\n )\n\n\n\n\nFor Loops\n\n\nLet us repeat something a set number of times\u00a0\n\n\nFor Loop Through an Array\n\n\n# make a list of fruits\nfruits = ['banana', 'apple',  'mango']\nfor item in fruits:\n    print ( 'Current fruit :', item)\n\n\n\n\nFor Loop x Times\n\n\nfor index in range ( 10 ):\n    print ( \nPosition:\n, index )\n\n\n\n\nFor Loop from x to y\n\n\nfor index in range ( 0, 6 ):\n    print ( \nPosition:\n, index )\n\n\n\n\nFor Loop in Steps\n\n\nfor index in range ( 10, 21, 2 ):\n    print ( \nPosition:\n, index )\n\n\n\n\nLoop Control\n\n\nPyhton provides two really useful commands to help in loop control:\n\n\n\n\nbreak\n - Ends the loop immediately\n\n\ncontinue\n - Goes back to the start of the loop, skipping anything not yet done\n\n\n\n\nwhile True:\n    guess = int(input(\nGuess a number: \n))\n    if guess = answer:\n        print(\nYou got it!\n)\n        break\n    else:\n        print(\nWrong!\n)\n\n\n\n\n\n\nLists\n\n\nThis does exactly what it says on the tin - we can store lots of information all with the same name.\nIf you have 100 books, you don't want to make 100 variables to remember all the names.\n\nInstead, you make one variable called \nbooks\n and then give each book a number...\n\n\n# make a list\npupils = [\nEdd\n, \nClive\n, \nKim\n, \nKat\n, \nTim\n, \nTam\n]\n\n# print the first pupil in the list - item 0\nprint(pupils[0])\n\n# add a pupil to the list\npupils.append(\nJordan\n)\n\n# get the number of pupils in the list\nnum_of_pupils = len(pupils)\n\n# remove a pupil from the list\nlist.remove(\nEdd\n)\n\n\n\n\nWe can also iterate through a list, make decisions based on a list, and change items in a list:\n\n\n# make a list\npupils = [\nEdd\n, \nClive\n, \nKim\n, \nKat\n, \nTim\n, \nTam\n]\n\n# print each pupil in the list\nfor item in pupils:\n   print ( item )\n\n# change an item in the list\npupils [ 2 ] = \nKimberly\n\n\n# check if an item is in a list\nif \nKat\n in pupils:\n   print ( \nFound her\n )\n\n\n\n\nWe can also slice up or join lists:\n\n\n# make a list\npupils = [\nEdd\n, \nClive\n, \nKim\n, \nKat\n, \nTim\n, \nTam\n]\n\npupils[2:4]     # items from 2 until before 4 = Kim \n Kat\npupils[2:]      # items from 2 until the end = Kim, Kat, Tim \n Tam\npupils[:3]      # items from the beginning until before 3 = Edd, Clive \n Kim\npupils[:]       # everything\n\n# you can also count backwards\npupils[-1]      #last item in the array = Tam\npupils[-2:]     # last two items in the array = Tim \n Tam\npupils[:-2]     # items from the beginning until 2 before the end = Edd, CLive, Kim \n Kat\npupils[1:-1]    # remove first \n last = Clive, Kim, Kat \n Ti\n\n# join an array into a String of items\nsentence = \n, \n.join(pupils)    # makes the String \nEdd, Clive, Kim, Kat, Tim, Tam\n\n\n\n\n\n\n\nModular Development\n\n\nA modular program is made up of lots of separate parts (modules). Each of these should work independently of the others. In Python, we achieve this by writing \nfunctions\n.  \n\n\nPython has lots of \nbuilt-in functions\n that you might have met already: \nprint()\n, \ninput()\n, \nint()\n, \nstr()\n, \nlen()\n, \nround()\n, etc... These work by themselves, without needing to be changed. You simply give them some information to work with, and they (sometimes) give you some information back.  \n\n\nWriting a Function\n\n\nSo, how do we write a function? Well, it's pretty simple - you give it a name, and then everything that is indented after the name, is in that function:\n\n\ndef myFunction():\n    print(\nThis is in the function\n)\n    print(\nThis is also in the function\n)\n\nprint(\nThis is not in the function.\n)\n\n\n\n\n\nThis function is called \nmyFunction\n, but it could be called anything (except for the built-in function names or \nkeywords\n). Whenever you tell your program to do \nmyFunction\n it should print the two messages inside.\n\n\nA more detailed example might be for when you want to keep repeating the same things again and again. It is not a good idea (or any fun) to keep typing the same stuff again and again. Sometimes a loop can solve this, but other times it might not be enough.\n\n\n# define a function to draw a square\n# the size parameter sets the length of the sides\ndef square ( size ):\n   for loop in range ( 4 ) :\n        t.forward ( size )\n        t.right ( 90 )\n\n# call the function - very important\n# setting size to 77\nsquare ( 77 )\n\n\n\n\n\n\nLibraries\n\n\nLibraries are just other people's code that we want to use. To access them, we simply import them. We have learnt about three libraries so far:\n\n\n\n\nrandom\n - this lets us generate random numbers\n\n\nturtle\n - this lets us draw turtle shapes\n\n\nappJar\n - this lets us create simple GUIs\n\n\n\n\nHere is an example of importing and using a library:\n\n\nimport random\n\ncolours = [ \nred\n, \nyellow\n, \ngreen\n, \nblue\n ]\n\n# generate a random number between 1 \n 100\nnum = random.randint ( 1, 100 )\n\n# generate a random colour (using the list above)\ncolour = random.choice ( colours )\n\n\n\n\n\n\nFile Access\n\n\nAccessing files in Python is easy. You simply open the file, read from or write to it, then close it:\n\n\noutFile = open ( \nmyfile.txt\n, \na\n )\noutFile.write ( \nhi there\\n\n )\noutFile.close ( )\n\n\n\n\nThis can be simplified even further, using the \nwith\n command. The with command will ensure the file is closed once you've finished with it:\n\n\nwith open ( \nmyfile.txt\n, \na\n ) as outFile :\n    outFile.write ( \nhi there\\n\n )\n\n\n\n\nWhen you open a file, you pass the name of the file you want, and an access mode. The following access modes are most commonly used:\n\n\n\n\nr\n - opens a file for reading.\n\n\nw\n - creates a new file for writing (overwrites existing file).\n\n\na\n - opens a file to append to (will create a file if needed).\n\n\n\n\nWhen reading from a file, it is most common to read it line-by-line. Again, it is more convenient to use \nwith\n:\n\n\nwith open ( \nmyFile.txt\n, \nr\n) as inFile :\n    # read the file into data\n    data = inFile.read ( ) \n    # make a list of lines\n    myList = data.splitlines ( ) \n\n\n\n\nThis will create a list called \nmyList\n, with one entry for each line.\n\n\n\n\nDatabases in Python\n\n\nDatabase Recap\n\n\nIn order to be able to follow this guide, you will need to understand the basics of a database:\n\n\n\n\nEntity\n - an item in the real world, we want to model (pupils in a school)\n\n\nTable\n - a container to hold information about an entity, often named after the entity (pupils)\n\n\nRecord\n - a single item/row in the table (an actual pupil)\n\n\nField\n - the columns in the table, each storing an attribute about the entity (name, age, etc)\n\n\nPrimary Key\n - something unique to each record in a table (pupil ID)\n\n\nForeign Key\n - when another table links to records in a table, you use their primary key\n\n\nRelationships\n - how tables link to each other\n\n\n\n\nExample\n\n\nSo, to model pupils in the real world - we would create a table, let's call it \npupils\n\nEach \nfield\n in \npupils\n will store a piece of information about a pupil\n\nEach \nrecord\n in \npupils\n will hold all the information about a single pupil\n\nWe can summarise this in a data-dictionary:\n\n\n| | | \n-|-|-|-\nField Name | Data Type | Information | Rules\nPupilID | Integer | Primary Key\nFirst Name | String | | \nbetween\n 1 and 30 characters \nLast Name | String| | \nbetween\n 1 and 30 characters\nDOB | Date | | \nmatches format\n DD/MM/YYYY \nGender | String | | \none of\n Male/Female/Unspecified \n\n\nTo talk to a database you use \nSQL\n (\nStructured Query Language\n). There are two parts to SQL:\n\n\n\n\nDDL (Data Definition Language) - used to build and modify tables\n\n\nCREATE TABLE ...\n\n\nALTER TABLE ...\n\n\nDROP TABLE ...\n\n\nTRUNCATE TABLE ...\n\n\n\n\n\n\nDML (Data Manipulation Language) - used to get or modify data in tables\n\n\nSELECT ... FROM ... WHERE ...\n\n\nINSERT INTO ... VALUES ...\n\n\nUPDATE ... SET ... WHERE ...\n\n\nDELETE FROM ... WHERE ...\n\n\n\n\n\n\n\n\nPython comes with a built-in database: \nSQLite\n. To gain access to it, you simply import the library:\n\n\nimport sqlite3\n\n\n\n\nHaving done that, we simply connect to the database, perform some SQL, and disconnect:\n\n\ndb = sqlite3.connect('pupils.db')\n# perform SQL statements\ndb.close()\n\n\n\n\nAs with file access, this can be wrapped up using with, to ensure we always disconnect:\n\n\nwith sqlite3.connect(\npupils.db\n) as db:\n    # perform SQL statements\n\n\n\n\nBoth of these will either open an existing database called pupils.db or create a new one with that name. This means that the information will always be saved to a file, so every time you run your program, all the old data will still be there. If you don't want to create a file, and would instead like to temporarily create a database in RAM, replace the database name with the String \n:memory:\n\n\n\n\nDefensive Programming\n\n\nDefensive programming is a way of designing your program, so that it will continue to work, even when unexpected things happen.  \n\n\nDefensive programming should improve:  \n\n\n\n\nQuality\n by reducing the number of bugs\n\n\nReadability\n making your code more readable, and easier to understand\n\n\nReliability\n preventing the program from crashing when it receives unexpected inputs\n\n\n\n\nDefensive programming can sometimes go too far - you shouldn't try to prevent errors that can't happen, as this could slow your program down, and make it harder to maintain.  \n\n\nIt's also important not to be too vague, otherwise you might miss important errors, that need to be found.\n\n\nStyles of Defensive Programming\n\n\nThere are two primary styles of dealing with potential errors:  \n\n\n\n\nEAFP\n - \nE\nasier to \nA\nsk for \nF\norgiveness than \nP\nermission\n\n\nLBYL\n - \nL\nook \nB\nefore \nY\nou \nL\neap  \n\n\n\n\nGenerally, \nEAFP\n is preferred in Python.\n\n\nExamples of Defensive Programming\n\n\nA common place programs can crash is when you expect NUMERIC input, but the user types a STRING:\n\n\nchoice = int(input( \nEnter your choice: \n ))\n\n\n\n\nEAFP\n\n\nTry to do what you wanted to do, then if it breaks, deal with it:\n\n\ntry:\n    choice = int(input( \nEnter your choice: \n ))\nexcept ValueError:\n    print( \nInvalid number\n )\n\n\n\n\nIn this example we simply (try to) convert the input into a number - if it fails, we deal with it.\n\n\nWe can then wrap this in a \nloop\n, to make it keep repeating until the data is valid:\n\n\nwhile True:\n    try:\n        choice = int(input( \nEnter your choice: \n ))\n        break\n    except ValueError:\n        print( \nInvalid number\n )\n        continue\n\n\n\n\nLBYL\n\n\nCheck you can do something first, then only do it if it's OK.\n\n\nchoice = input( \nEnter your choice: \n )\nif choice.isdigit():\n    choice = int(choice)\nelse:\n    print( \nInvalid number\n )\n\n\n\n\nIn this example, we get the input, check it's a number, and then convert it.  \n\n\nWe can then wrap this in a \nloop\n, to make it keep repeating until the data is valid:\n\n\nwhile True:\n    choice = input( \nEnter your choice: \n )\n    if choice.isdigit():\n        choice = int(choice)\n        break\n    else:\n        print( \nInvalid number\n )\n        continue\n\n\n\n\nAs can be seen, \nEAFP\n only catches \nValueErrors\n, it will still crash if some other error occurs.\n\nBut that complies with what we said earlier, we don't want to miss strange/important errors.\n\nAnd, in \nLBYL\n, it doesn't actually deal with any errors, but simply tries to prevent them - less reliable?\n\n\n\n\nTurtle Basics\n\n\nTo create a turtle, and get it to move, try the following:\n\n\n# get the library\nimport turtle\nt = turtle.Pen()\n\n# draw a square\nfor loop in range(4):\n    t.forward(100)\n    t.right(90)\n\n\n\n\n\n\nGUI Basics\n\n\nTo create a GUI, and show a label, try the following:\n\n\n# import the library\nfrom appJar import gui\n\n# create the GUI\napp = gui(\nHello\n)\napp.addLabel(\nl1\n, \nHello World!\n)\napp.go()\n\n\n\n\n\n\nColour Map\n\n\nBelow is a useful colour map to use when doing Turtle or GUI programming.", 
            "title": "Python"
        }, 
        {
            "location": "/pythonBasics/#python-basics", 
            "text": "Below is a bunch of stuff explaining the basics of Python...", 
            "title": "Python Basics"
        }, 
        {
            "location": "/pythonBasics/#cheat-sheets", 
            "text": "Help can be found at:   Python Cheat Sheet  Turtle Cheat Sheet  GUI Cheat Sheet", 
            "title": "Cheat Sheets"
        }, 
        {
            "location": "/pythonBasics/#data", 
            "text": "", 
            "title": "Data"
        }, 
        {
            "location": "/pythonBasics/#variables", 
            "text": "Variables are the most important things in programming. \nThey let your program remember information. \nVariables can store someone's name, their age, or even their favourite food. \nVariables simply point to a space in memory, where the data is stored.    A variable always has three things:   An  identifier  - a name to refer to the variable by    A  value  - the information the\u00a0variable is storing    A  data type  - the type of information being stored (words, numbers, lists, etc.)     # this declares three variables: name, age, male\n# and initialises each one with a starting value\nname =  Alan Shearer \nage = 45\nmale = True  Variables generally go through a three stage process:   Create  - The variable identifier is declared, and the variable is initialised with a starting value  Change  - The variable's value is modified  Check  - The variable's value is checked, in decisions   loops   At various points along this route, the variable will be  used .", 
            "title": "Variables"
        }, 
        {
            "location": "/pythonBasics/#constants", 
            "text": "Sometimes, you need to store data that doesn't change - these are known as  constants . \nThey are  created  in the same way, but can't be  changed . \nIn Python, it is common to write the name of constants in  all uppercase .  # declare a constant, that we don't want to change\nWINNING_SCORE = 100", 
            "title": "Constants"
        }, 
        {
            "location": "/pythonBasics/#data-types", 
            "text": "Data types are very important, as they allow the program to have rules: if you add two numbers together, the program should do some maths, but if you add two words together ( concatenation ) the program will just make a new sentence.  There are five main data types:   String  - words, letter, sentences. Defined using speech marks.  Int  - whole numbers  Real  - (floats) numbers with fractions (decimal points)  Boolean  - True or False (On or Off)  List  - a collection of things (any of the above, or even a collection of lists)   Python tries to work out the data type automatically, but it occasionally needs some help, if you want to tell Python what the data type is, try one of the following:  # create 3 new variables by changing the type of var1/var2/var3\nname = str(var1)\nage = int(var2)\nprice = float(var3)", 
            "title": "Data Types"
        }, 
        {
            "location": "/pythonBasics/#arithmetic-operators", 
            "text": "Python allows you to easily perform maths on your data  | | \n-|-|-\n+ | Addition | a = b + c\n- | Subtraction | a = b - c\n* | Multiplication | a = b * c\n/ | Division | a = b / c\n// | Modulus division | a = b // c\n% | Remainder division | a = b % c  | Exponent | a b\nround() | Round | Rounds the number to the nearest place\nfloor() | Round-down | Rounds the number down \nceil() | Round-Up | Rounds the number up \nsum() | Sum | Adds together all the items in the list", 
            "title": "Arithmetic Operators"
        }, 
        {
            "location": "/pythonBasics/#string-operations", 
            "text": "Python also lets us perform various actions on Strings.  | | \n-|-|- varName.upper()  | Uppercase | Makes the entire string uppercase varName.lower()  | Lowercase | Makes the entire string lowercase varName.split(\" \")  | Split into a list | Converts the String into a list, using spaces varName.split(\",\")  | Split into a list | Converts the String into a list, using commas varName.count(\"a\")  | Counts occurrences of the text | Counts how many times  a  appears in the String varName.index(\"a\")  | Finds the first position of the text | Finds the first position of  a  varName.startswith(\"Mr.\")  | Checks what the String starts with | Returns True if the String starts with  Mr.  varName.endswith(\"Jarvis\")  | Checks what the String ends with | Returns True if the String ends with Jarvis", 
            "title": "String Operations"
        }, 
        {
            "location": "/pythonBasics/#string-splicing", 
            "text": "Remember, Strings are just lists of characters. \nIt's also possible to access parts of a String using array square brackets.    | | \n-|-|- varName[2]  | Gets a character | Returns the third character varName[2:5]  | Gets a substring | Returns characters from 2 to 4 varName[2:]  | Gets a substring | Returns characters from 2 to the end varName[:5]  | Gets a substring | Returns characters from the beginning to 4 varName[2:10:2]  | Gets a substring | Returns characters from 2 to 9, skipping every other character varName[::-1]  | Reverse a String | Returns the String in reverse order", 
            "title": "String Splicing"
        }, 
        {
            "location": "/pythonBasics/#selection-operators", 
            "text": "Selection is the ability to make a decision. It allows us to do different things, depending on what information is in a variable. \nThis is done using\u00a0 IF  statements:  # if they are 18 or over, print  You can vote \nif age  = 18:\n    print( You can vote )\nelse:\n    print( You can't vote )  Making decisions is all about comparing things; is one variable bigger than another, are two other variables the same...  # if they are 18 or over, print  You can vote \nif favArtist ==  Picasso :\n    print( You like cubist paintings. )\nelif favArtist ==  Rembrandt :\n    print( You like realistic paintings. )\nelif favArtist ==  Monet :\n    print( You like impressionist paintings. )\nelif favArtist ==  Rembrandt :\n    print( You like realistic paintings. )\nelif favArtist ==  Cezanne :\n    print( You like post-impresionistic paintings. )\nelse:\n    print( Unrecognised artist )  To compare things we use standard operators, just like in maths.", 
            "title": "Selection &amp; Operators"
        }, 
        {
            "location": "/pythonBasics/#equality-operators", 
            "text": "These let us test if things are equal or not:  | |                                    \n-|-|-\n== | Equal to     | Check if two items are the same\n!= | Not equal to | Check if two items are not the same", 
            "title": "Equality Operators"
        }, 
        {
            "location": "/pythonBasics/#comparison-operators", 
            "text": "These let us compare things:  | | \n-|-|-   | Greater than             | Check if the first item is bigger than the second item   | Less than                | Check if the first item is smaller than the second item\n= | Greater than or equal to | Check if the first item is bigger than or the same as the second item = | Less than or equal to    | Check if the first item is smaller than or the same as the second item", 
            "title": "Comparison Operators"
        }, 
        {
            "location": "/pythonBasics/#logical-operators", 
            "text": "These let us use logic to combine lots of operators:  |\n-|-\nand | Both comparisons have to be True\nor  | Either or both comparisons have to be True\nnot | This will change the result from True to False, or vice-versa", 
            "title": "Logical Operators"
        }, 
        {
            "location": "/pythonBasics/#iteration", 
            "text": "Being able to do selection (make decisions) on its own is nearly enough. \nHowever, if we want our programs to be really useful, we want them to be able to repeat stuff.  We call this  iteration .", 
            "title": "Iteration"
        }, 
        {
            "location": "/pythonBasics/#while-loops", 
            "text": "Let us repeat something until we can make a decision (this may never occur)", 
            "title": "While Loops"
        }, 
        {
            "location": "/pythonBasics/#infinite-while-loops", 
            "text": "while True:\n    print (  Looping!  )", 
            "title": "Infinite While Loops"
        }, 
        {
            "location": "/pythonBasics/#conditional-while-loops", 
            "text": "num = -1 # keep looping WHILE they don't guess 21\nwhile num != 21:\n    num = int ( input (  Guess a number:   ) )\n    print (  You guessed: , num )\nprint (  You finally got it!!!  )", 
            "title": "Conditional While Loops"
        }, 
        {
            "location": "/pythonBasics/#for-loops", 
            "text": "Let us repeat something a set number of times", 
            "title": "For Loops"
        }, 
        {
            "location": "/pythonBasics/#for-loop-through-an-array", 
            "text": "# make a list of fruits\nfruits = ['banana', 'apple',  'mango']\nfor item in fruits:\n    print ( 'Current fruit :', item)", 
            "title": "For Loop Through an Array"
        }, 
        {
            "location": "/pythonBasics/#for-loop-x-times", 
            "text": "for index in range ( 10 ):\n    print (  Position: , index )", 
            "title": "For Loop x Times"
        }, 
        {
            "location": "/pythonBasics/#for-loop-from-x-to-y", 
            "text": "for index in range ( 0, 6 ):\n    print (  Position: , index )", 
            "title": "For Loop from x to y"
        }, 
        {
            "location": "/pythonBasics/#for-loop-in-steps", 
            "text": "for index in range ( 10, 21, 2 ):\n    print (  Position: , index )", 
            "title": "For Loop in Steps"
        }, 
        {
            "location": "/pythonBasics/#loop-control", 
            "text": "Pyhton provides two really useful commands to help in loop control:   break  - Ends the loop immediately  continue  - Goes back to the start of the loop, skipping anything not yet done   while True:\n    guess = int(input( Guess a number:  ))\n    if guess = answer:\n        print( You got it! )\n        break\n    else:\n        print( Wrong! )", 
            "title": "Loop Control"
        }, 
        {
            "location": "/pythonBasics/#lists", 
            "text": "This does exactly what it says on the tin - we can store lots of information all with the same name.\nIf you have 100 books, you don't want to make 100 variables to remember all the names. \nInstead, you make one variable called  books  and then give each book a number...  # make a list\npupils = [ Edd ,  Clive ,  Kim ,  Kat ,  Tim ,  Tam ]\n\n# print the first pupil in the list - item 0\nprint(pupils[0])\n\n# add a pupil to the list\npupils.append( Jordan )\n\n# get the number of pupils in the list\nnum_of_pupils = len(pupils)\n\n# remove a pupil from the list\nlist.remove( Edd )  We can also iterate through a list, make decisions based on a list, and change items in a list:  # make a list\npupils = [ Edd ,  Clive ,  Kim ,  Kat ,  Tim ,  Tam ]\n\n# print each pupil in the list\nfor item in pupils:\n   print ( item )\n\n# change an item in the list\npupils [ 2 ] =  Kimberly \n\n# check if an item is in a list\nif  Kat  in pupils:\n   print (  Found her  )  We can also slice up or join lists:  # make a list\npupils = [ Edd ,  Clive ,  Kim ,  Kat ,  Tim ,  Tam ]\n\npupils[2:4]     # items from 2 until before 4 = Kim   Kat\npupils[2:]      # items from 2 until the end = Kim, Kat, Tim   Tam\npupils[:3]      # items from the beginning until before 3 = Edd, Clive   Kim\npupils[:]       # everything\n\n# you can also count backwards\npupils[-1]      #last item in the array = Tam\npupils[-2:]     # last two items in the array = Tim   Tam\npupils[:-2]     # items from the beginning until 2 before the end = Edd, CLive, Kim   Kat\npupils[1:-1]    # remove first   last = Clive, Kim, Kat   Ti\n\n# join an array into a String of items\nsentence =  ,  .join(pupils)    # makes the String  Edd, Clive, Kim, Kat, Tim, Tam", 
            "title": "Lists"
        }, 
        {
            "location": "/pythonBasics/#modular-development", 
            "text": "A modular program is made up of lots of separate parts (modules). Each of these should work independently of the others. In Python, we achieve this by writing  functions .    Python has lots of  built-in functions  that you might have met already:  print() ,  input() ,  int() ,  str() ,  len() ,  round() , etc... These work by themselves, without needing to be changed. You simply give them some information to work with, and they (sometimes) give you some information back.", 
            "title": "Modular Development"
        }, 
        {
            "location": "/pythonBasics/#writing-a-function", 
            "text": "So, how do we write a function? Well, it's pretty simple - you give it a name, and then everything that is indented after the name, is in that function:  def myFunction():\n    print( This is in the function )\n    print( This is also in the function )\n\nprint( This is not in the function. )  This function is called  myFunction , but it could be called anything (except for the built-in function names or  keywords ). Whenever you tell your program to do  myFunction  it should print the two messages inside.  A more detailed example might be for when you want to keep repeating the same things again and again. It is not a good idea (or any fun) to keep typing the same stuff again and again. Sometimes a loop can solve this, but other times it might not be enough.  # define a function to draw a square\n# the size parameter sets the length of the sides\ndef square ( size ):\n   for loop in range ( 4 ) :\n        t.forward ( size )\n        t.right ( 90 )\n\n# call the function - very important\n# setting size to 77\nsquare ( 77 )", 
            "title": "Writing a Function"
        }, 
        {
            "location": "/pythonBasics/#libraries", 
            "text": "Libraries are just other people's code that we want to use. To access them, we simply import them. We have learnt about three libraries so far:   random  - this lets us generate random numbers  turtle  - this lets us draw turtle shapes  appJar  - this lets us create simple GUIs   Here is an example of importing and using a library:  import random\n\ncolours = [  red ,  yellow ,  green ,  blue  ]\n\n# generate a random number between 1   100\nnum = random.randint ( 1, 100 )\n\n# generate a random colour (using the list above)\ncolour = random.choice ( colours )", 
            "title": "Libraries"
        }, 
        {
            "location": "/pythonBasics/#file-access", 
            "text": "Accessing files in Python is easy. You simply open the file, read from or write to it, then close it:  outFile = open (  myfile.txt ,  a  )\noutFile.write (  hi there\\n  )\noutFile.close ( )  This can be simplified even further, using the  with  command. The with command will ensure the file is closed once you've finished with it:  with open (  myfile.txt ,  a  ) as outFile :\n    outFile.write (  hi there\\n  )  When you open a file, you pass the name of the file you want, and an access mode. The following access modes are most commonly used:   r  - opens a file for reading.  w  - creates a new file for writing (overwrites existing file).  a  - opens a file to append to (will create a file if needed).   When reading from a file, it is most common to read it line-by-line. Again, it is more convenient to use  with :  with open (  myFile.txt ,  r ) as inFile :\n    # read the file into data\n    data = inFile.read ( ) \n    # make a list of lines\n    myList = data.splitlines ( )   This will create a list called  myList , with one entry for each line.", 
            "title": "File Access"
        }, 
        {
            "location": "/pythonBasics/#databases-in-python", 
            "text": "", 
            "title": "Databases in Python"
        }, 
        {
            "location": "/pythonBasics/#database-recap", 
            "text": "In order to be able to follow this guide, you will need to understand the basics of a database:   Entity  - an item in the real world, we want to model (pupils in a school)  Table  - a container to hold information about an entity, often named after the entity (pupils)  Record  - a single item/row in the table (an actual pupil)  Field  - the columns in the table, each storing an attribute about the entity (name, age, etc)  Primary Key  - something unique to each record in a table (pupil ID)  Foreign Key  - when another table links to records in a table, you use their primary key  Relationships  - how tables link to each other", 
            "title": "Database Recap"
        }, 
        {
            "location": "/pythonBasics/#example", 
            "text": "So, to model pupils in the real world - we would create a table, let's call it  pupils \nEach  field  in  pupils  will store a piece of information about a pupil \nEach  record  in  pupils  will hold all the information about a single pupil \nWe can summarise this in a data-dictionary:  | | | \n-|-|-|-\nField Name | Data Type | Information | Rules\nPupilID | Integer | Primary Key\nFirst Name | String | |  between  1 and 30 characters \nLast Name | String| |  between  1 and 30 characters\nDOB | Date | |  matches format  DD/MM/YYYY \nGender | String | |  one of  Male/Female/Unspecified   To talk to a database you use  SQL  ( Structured Query Language ). There are two parts to SQL:   DDL (Data Definition Language) - used to build and modify tables  CREATE TABLE ...  ALTER TABLE ...  DROP TABLE ...  TRUNCATE TABLE ...    DML (Data Manipulation Language) - used to get or modify data in tables  SELECT ... FROM ... WHERE ...  INSERT INTO ... VALUES ...  UPDATE ... SET ... WHERE ...  DELETE FROM ... WHERE ...     Python comes with a built-in database:  SQLite . To gain access to it, you simply import the library:  import sqlite3  Having done that, we simply connect to the database, perform some SQL, and disconnect:  db = sqlite3.connect('pupils.db')\n# perform SQL statements\ndb.close()  As with file access, this can be wrapped up using with, to ensure we always disconnect:  with sqlite3.connect( pupils.db ) as db:\n    # perform SQL statements  Both of these will either open an existing database called pupils.db or create a new one with that name. This means that the information will always be saved to a file, so every time you run your program, all the old data will still be there. If you don't want to create a file, and would instead like to temporarily create a database in RAM, replace the database name with the String  :memory:", 
            "title": "Example"
        }, 
        {
            "location": "/pythonBasics/#defensive-programming", 
            "text": "Defensive programming is a way of designing your program, so that it will continue to work, even when unexpected things happen.    Defensive programming should improve:     Quality  by reducing the number of bugs  Readability  making your code more readable, and easier to understand  Reliability  preventing the program from crashing when it receives unexpected inputs   Defensive programming can sometimes go too far - you shouldn't try to prevent errors that can't happen, as this could slow your program down, and make it harder to maintain.    It's also important not to be too vague, otherwise you might miss important errors, that need to be found.", 
            "title": "Defensive Programming"
        }, 
        {
            "location": "/pythonBasics/#styles-of-defensive-programming", 
            "text": "There are two primary styles of dealing with potential errors:     EAFP  -  E asier to  A sk for  F orgiveness than  P ermission  LBYL  -  L ook  B efore  Y ou  L eap     Generally,  EAFP  is preferred in Python.", 
            "title": "Styles of Defensive Programming"
        }, 
        {
            "location": "/pythonBasics/#examples-of-defensive-programming", 
            "text": "A common place programs can crash is when you expect NUMERIC input, but the user types a STRING:  choice = int(input(  Enter your choice:   ))", 
            "title": "Examples of Defensive Programming"
        }, 
        {
            "location": "/pythonBasics/#eafp", 
            "text": "Try to do what you wanted to do, then if it breaks, deal with it:  try:\n    choice = int(input(  Enter your choice:   ))\nexcept ValueError:\n    print(  Invalid number  )  In this example we simply (try to) convert the input into a number - if it fails, we deal with it.  We can then wrap this in a  loop , to make it keep repeating until the data is valid:  while True:\n    try:\n        choice = int(input(  Enter your choice:   ))\n        break\n    except ValueError:\n        print(  Invalid number  )\n        continue", 
            "title": "EAFP"
        }, 
        {
            "location": "/pythonBasics/#lbyl", 
            "text": "Check you can do something first, then only do it if it's OK.  choice = input(  Enter your choice:   )\nif choice.isdigit():\n    choice = int(choice)\nelse:\n    print(  Invalid number  )  In this example, we get the input, check it's a number, and then convert it.    We can then wrap this in a  loop , to make it keep repeating until the data is valid:  while True:\n    choice = input(  Enter your choice:   )\n    if choice.isdigit():\n        choice = int(choice)\n        break\n    else:\n        print(  Invalid number  )\n        continue  As can be seen,  EAFP  only catches  ValueErrors , it will still crash if some other error occurs. \nBut that complies with what we said earlier, we don't want to miss strange/important errors. \nAnd, in  LBYL , it doesn't actually deal with any errors, but simply tries to prevent them - less reliable?", 
            "title": "LBYL"
        }, 
        {
            "location": "/pythonBasics/#turtle-basics", 
            "text": "To create a turtle, and get it to move, try the following:  # get the library\nimport turtle\nt = turtle.Pen()\n\n# draw a square\nfor loop in range(4):\n    t.forward(100)\n    t.right(90)", 
            "title": "Turtle Basics"
        }, 
        {
            "location": "/pythonBasics/#gui-basics", 
            "text": "To create a GUI, and show a label, try the following:  # import the library\nfrom appJar import gui\n\n# create the GUI\napp = gui( Hello )\napp.addLabel( l1 ,  Hello World! )\napp.go()", 
            "title": "GUI Basics"
        }, 
        {
            "location": "/pythonBasics/#colour-map", 
            "text": "Below is a useful colour map to use when doing Turtle or GUI programming.", 
            "title": "Colour Map"
        }, 
        {
            "location": "/algorithms/", 
            "text": "Algorithms\n\n\n\n\nBelow are some comparisons of how to achieve the same thing in a flowchart, pseudocode \n Python.  \n\n\nThis site was originally written using AQA suggested pseudocode, but will be updated to include OCR recommendations.\n\nIt will aso be extended, to include a lot more examples.  \n\n\nComparison\n\n\n\n\n\n\n\n\nTopic\n\n\nFlowChart\n\n\nPseudoCode\n\n\nPython\n\n\n\n\n\n\n\n\n\n\nAssigning a variable\n\n\n\n\na \n 5\n\n\na = 5\n\n\n\n\n\n\nInput\n\n\n\n\na \n USERINPUT\n\n\na = input()\n\n\n\n\n\n\nOutput\n\n\n\n\nOUTPUT a\n\n\nprint(a)\n\n\n\n\n\n\nSubtraction\n\n\n\n\na \n b - c\n\n\na = b - c\n\n\n\n\n\n\nSelection:\nGreater than\n\n\n\n\nIF a \n b THEN\nfuncA()\nELSE\nfuncB()\nENDIF\n\n\nif a \n b:\nfuncA()\nelse:\nfuncB()\n\n\n\n\n\n\nSelection:\nLess than\n\n\n\n\nIF a \n b THEN\nfuncA()\nELSE\nfuncB()\nENDIF\n\n\nif a \n b:\nfuncA()\nelse:\nfuncB()\n\n\n\n\n\n\nSelection:\nEqual to\n\n\n\n\nIF a = b THEN\nfuncA()\nELSE\nfuncB()\nENDIF\n\n\nif a == b:\nfuncA()\nelse:\nfuncB()\n\n\n\n\n\n\nSelection:\nNot equal to\n\n\n\n\nIF a \n b THEN\nfuncA()\nELSE\nfuncB()\nENDIF\n\n\nif a != b:\nfuncA()\nelse:\nfuncB()\n\n\n\n\n\n\nIteration:\nWhile loop\n\n\n\n\nWHILE a \n b\nOUTPUT b\na \n USERINPUT\nENDWHILE\n\n\nwhile a != b:\nprint(b)\na = input()\n\n\n\n\n\n\nIteration:\nFor loop (count-up)\n\n\n\n\nFOR i \n 0 TO 9\nOUTPUT i\nENDFOR\n\n\nfor i in range(10):\nprint(i)\n\n\n\n\n\n\nIteration:\nFor loop (count-down)\n\n\n\n\nFOR i \n 10 TO 1\nOUTPUT i\nENDFOR\n\n\nfor i in range(10, 0, -1):\nprint(i)\n\n\n\n\n\n\n\n\nLinks\n\n\nSome useful Pseudocode links.  \n\n\n\n\nPseudoCode CheatSheet\n\n\nPseudoWars\n\n\nAQA PseudoCode Guidelines", 
            "title": "Algorithms"
        }, 
        {
            "location": "/algorithms/#algorithms", 
            "text": "Below are some comparisons of how to achieve the same thing in a flowchart, pseudocode   Python.    This site was originally written using AQA suggested pseudocode, but will be updated to include OCR recommendations. \nIt will aso be extended, to include a lot more examples.", 
            "title": "Algorithms"
        }, 
        {
            "location": "/algorithms/#comparison", 
            "text": "Topic  FlowChart  PseudoCode  Python      Assigning a variable   a   5  a = 5    Input   a   USERINPUT  a = input()    Output   OUTPUT a  print(a)    Subtraction   a   b - c  a = b - c    Selection: Greater than   IF a   b THEN funcA() ELSE funcB() ENDIF  if a   b: funcA() else: funcB()    Selection: Less than   IF a   b THEN funcA() ELSE funcB() ENDIF  if a   b: funcA() else: funcB()    Selection: Equal to   IF a = b THEN funcA() ELSE funcB() ENDIF  if a == b: funcA() else: funcB()    Selection: Not equal to   IF a   b THEN funcA() ELSE funcB() ENDIF  if a != b: funcA() else: funcB()    Iteration: While loop   WHILE a   b OUTPUT b a   USERINPUT ENDWHILE  while a != b: print(b) a = input()    Iteration: For loop (count-up)   FOR i   0 TO 9 OUTPUT i ENDFOR  for i in range(10): print(i)    Iteration: For loop (count-down)   FOR i   10 TO 1 OUTPUT i ENDFOR  for i in range(10, 0, -1): print(i)", 
            "title": "Comparison"
        }, 
        {
            "location": "/algorithms/#links", 
            "text": "Some useful Pseudocode links.     PseudoCode CheatSheet  PseudoWars  AQA PseudoCode Guidelines", 
            "title": "Links"
        }, 
        {
            "location": "/gitGuide/", 
            "text": "Git Guide\n\n\n\n\nBelow are some useful commands for using git, GitHub \n PyPI from the command line.  \n\n\nSimple Set-up\n\n\nGit\n provides local version control - allowing you to keep backups of previous versions of your code.  \n\n\nIt's really easy to get started:  \n\n\n\n\ngit init\n - will initialise Git for your current project,  \n\n\ngit add [filename]\n - will queue a new file or changes to an existing file to be saved  \n\n\ngit commit\n - will save the new versions of the files you've added - with a message describing the changes.  \n\n\n\n\nThat's it, you now have full \nversion control\n over your code.\n\nIt works in Windows, OSX or Linux and is supported by most popular IDEs (including Visual Studio).  \n\n\nYou can even take it a step further, by sharing your code on the Web.\n\n\nGitHub\n provides a free place to sink \n share your code.\n\nIt will also allow other people to view \n contribute to your code.  \n\n\nYou first need to \ncreate\n an account on GitHub, and then a new \nrepo\n:  \n\n\n  \n\n\nThen copy your repo's address, and \nadd\n it to your local git account:  \n\n\n\n\ngit remote add origin [web_address]\n - link your local Git repo to a GitHub repo.  \n\n\n\n\nThen, once you've \ncommitted\n local changes, you can \npush\n them to GitHub:  \n\n\n\n\ngit push\n - send your local changes to your online GitHub repository.  \n\n\n\n\nSetting Up\n\n\n\n\ngit init\n\nCreates a new local git repository, in the current directory  \n\n\ngit remote add origin [URI]\n\nThis will link your newly created, local repository, with the one specified on GitHub  \n\n\ngit clone [URI]\n\nThis will copy a git repository, from GitHub, to the current directory  \n\n\n\n\nUpdating\n\n\n\n\ngit remote update\n\nThis will update your log of remote changes  \n\n\ngit pull\n\nThis will get any changes from GitHub, and update your local copy  \n\n\n\n\nChecking\n\n\n\n\ngit status\n\nThis will compare your local copy, with the copy on GitHub, and tell you any differences.  \n\n\n\n\nAdding\n\n\n\n\ngit add [file]\n\nAdd a new file to your local repository  \n\n\ngit add .\n\nAdd any changes you've made to your local repository  \n\n\ngit commit -m \"message here\"\n\nCommit anything you've added to your local repository  \n\n\ngit commit -a -m \"message here\"\n\nCombines \nadd\n and \ncommit\n Syncing all changes to your local repository  \n\n\n\n\nUndoing\n\n\n\n\ngit checkout XXX\n\nThis will restore a file to the latest version in Git.  \n\n\n\n\nPushing\n\n\n\n\ngit push\n\nPushes all changes you've added \n committed locally, to GitHub  \n\n\n\n\nBranching \n Merging\n\n\nBranching is useful to allow you to develop a new feature, without affecting the main branch.\n\nThat way, your main branch remains untouched, until you are ready to add in your new feature.\n\nThis is useful, as it means the main branch always matches what is currently released, and it also lets you release emergency fixes on the main branch, without having to include whatever new feature is currently being worked on.  \n\n\n\n\n\n\ngit branch\n\nList all the branches in your repo  \n\n\n\n\n\n\ngit checkout \nbranch\n\nSwitch to the named \nbranch\n  \n\n\n\n\n\n\ngit branch \nbranch\n\nCreate a new branch called \nbranch\n  \n\n\n\n\n\n\ngit checkout -b \nnew-branch\n\nCreate and switch to a \nnew-branch\n  \n\n\n\n\n\n\ngit branch -d \nbranch\n\nDelete the branch called \nbranch\n  \n\n\n\n\n\n\nOnce your branch is complete, ie. you finished your new feature and are ready to add it to your main branch for a new release.\n\nYou simply merge your feature branch back into the main branch.  \n\n\n\n\nFirst you have to checkout the master branch: \ngit checkout master\n followed by a \ngit pull\n to get any missing fixes.  \n\n\nThen, there are two options:  \n\n\nMerge in your feature branch: \ngit merge \nbranch\n  \n\n\nOr pull down your feature branch: \ngit pull origin \nbranch\n  \n\n\n\n\n\n\nOnce you have added your feature branch into the main branch, you then push it all back again: \ngit push\n  \n\n\nYou now have a new version - so you should tag it with a version number  \n\n\n\n\nTagging\n\n\n\n\ngit tag -a vXXX -m \"Tag description\n\n\ngit push origin vXXX\n\nThis tags the current build in git\n\nThen pushes it to GitHub\n\n\n\n\nPyPI\n\n\n\n\npython setup.py register -r pypitest\n\nThis will register the package with PyPI Test  \n\n\npython setup.py sdist upload -r pypitest\n\nThis will upload the stuff to PyPI Test  \n\n\npip install --verbose --index-url https://testpypi.python.org/pypi appJar\n\nThis will attempt to install from the PyPI test server", 
            "title": "Git & PyPi"
        }, 
        {
            "location": "/gitGuide/#git-guide", 
            "text": "Below are some useful commands for using git, GitHub   PyPI from the command line.", 
            "title": "Git Guide"
        }, 
        {
            "location": "/gitGuide/#simple-set-up", 
            "text": "Git  provides local version control - allowing you to keep backups of previous versions of your code.    It's really easy to get started:     git init  - will initialise Git for your current project,    git add [filename]  - will queue a new file or changes to an existing file to be saved    git commit  - will save the new versions of the files you've added - with a message describing the changes.     That's it, you now have full  version control  over your code. \nIt works in Windows, OSX or Linux and is supported by most popular IDEs (including Visual Studio).    You can even take it a step further, by sharing your code on the Web.  GitHub  provides a free place to sink   share your code. \nIt will also allow other people to view   contribute to your code.    You first need to  create  an account on GitHub, and then a new  repo :        Then copy your repo's address, and  add  it to your local git account:     git remote add origin [web_address]  - link your local Git repo to a GitHub repo.     Then, once you've  committed  local changes, you can  push  them to GitHub:     git push  - send your local changes to your online GitHub repository.", 
            "title": "Simple Set-up"
        }, 
        {
            "location": "/gitGuide/#setting-up", 
            "text": "git init \nCreates a new local git repository, in the current directory    git remote add origin [URI] \nThis will link your newly created, local repository, with the one specified on GitHub    git clone [URI] \nThis will copy a git repository, from GitHub, to the current directory", 
            "title": "Setting Up"
        }, 
        {
            "location": "/gitGuide/#updating", 
            "text": "git remote update \nThis will update your log of remote changes    git pull \nThis will get any changes from GitHub, and update your local copy", 
            "title": "Updating"
        }, 
        {
            "location": "/gitGuide/#checking", 
            "text": "git status \nThis will compare your local copy, with the copy on GitHub, and tell you any differences.", 
            "title": "Checking"
        }, 
        {
            "location": "/gitGuide/#adding", 
            "text": "git add [file] \nAdd a new file to your local repository    git add . \nAdd any changes you've made to your local repository    git commit -m \"message here\" \nCommit anything you've added to your local repository    git commit -a -m \"message here\" \nCombines  add  and  commit  Syncing all changes to your local repository", 
            "title": "Adding"
        }, 
        {
            "location": "/gitGuide/#undoing", 
            "text": "git checkout XXX \nThis will restore a file to the latest version in Git.", 
            "title": "Undoing"
        }, 
        {
            "location": "/gitGuide/#pushing", 
            "text": "git push \nPushes all changes you've added   committed locally, to GitHub", 
            "title": "Pushing"
        }, 
        {
            "location": "/gitGuide/#branching-merging", 
            "text": "Branching is useful to allow you to develop a new feature, without affecting the main branch. \nThat way, your main branch remains untouched, until you are ready to add in your new feature. \nThis is useful, as it means the main branch always matches what is currently released, and it also lets you release emergency fixes on the main branch, without having to include whatever new feature is currently being worked on.      git branch \nList all the branches in your repo      git checkout  branch \nSwitch to the named  branch       git branch  branch \nCreate a new branch called  branch       git checkout -b  new-branch \nCreate and switch to a  new-branch       git branch -d  branch \nDelete the branch called  branch       Once your branch is complete, ie. you finished your new feature and are ready to add it to your main branch for a new release. \nYou simply merge your feature branch back into the main branch.     First you have to checkout the master branch:  git checkout master  followed by a  git pull  to get any missing fixes.    Then, there are two options:    Merge in your feature branch:  git merge  branch     Or pull down your feature branch:  git pull origin  branch       Once you have added your feature branch into the main branch, you then push it all back again:  git push     You now have a new version - so you should tag it with a version number", 
            "title": "Branching &amp; Merging"
        }, 
        {
            "location": "/gitGuide/#tagging", 
            "text": "git tag -a vXXX -m \"Tag description  git push origin vXXX \nThis tags the current build in git \nThen pushes it to GitHub", 
            "title": "Tagging"
        }, 
        {
            "location": "/gitGuide/#pypi", 
            "text": "python setup.py register -r pypitest \nThis will register the package with PyPI Test    python setup.py sdist upload -r pypitest \nThis will upload the stuff to PyPI Test    pip install --verbose --index-url https://testpypi.python.org/pypi appJar \nThis will attempt to install from the PyPI test server", 
            "title": "PyPI"
        }
    ]
}