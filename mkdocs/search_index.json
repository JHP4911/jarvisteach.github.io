{
    "docs": [
        {
            "location": "/",
            "text": "appJar\n\n\n\n\nThis is a Python library for creating \nquick\n and \neasy\n GUIs, designed primarily for use in the \nclassroom\n.  \n\n\nIt has no dependencies, other than \nPython 3.x\n (although it mostly works on 2.7) and relies on Python's built-in \ntkinter\n library.  \n\n\nIt's very easy to set-up, specifically with schools in mind. See the \ninstallation guidelines\n for more information.\n\n\nLet's make a sandwich\n\n\n\n\nMaking a \nGUI\n (using appJar) is just like making a \nsandwich\n!  \n\n\nYou need a slice of bread on the top and bottom, and then a bunch of fillings in the middle ...\n\n\n# import the library\nfrom appJar import gui\n\n# top slice - CREATE the GUI\napp = gui()\n\n### fillings go here ###\n\n# bottom slice - START the GUI\napp.go()\n\n\n\n\nIf you forget a slice of bread - you haven't got a sandwich!\n\nOh, and if you try to put fillings under the bottom-slice, then they won't be in the sandwich!\n\n\nAdd some fillings...\n\n\n\n\nWhen making a sandwich, you could just stuff it with fillings:  \n\n\n\n\naddFilling('cheese', 'cheddar')\n  \n\n\naddFilling('ham', 'smoked')\n  \n\n\n\n\nBut it's often nice to prepare the fillings too:  \n\n\n\n\nsetFilling('cheese', 'grated')\n \n\n\nsetFilling('ham', 'sliced')\n \n\n\n\n\n# import the library\nfrom appJar import gui\n\n# top slice - CREATE the GUI\napp = gui()\n\n### fillings go here ###\napp.addLabel(\ntitle\n, \nWelcome to appJar\n)\napp.setLabelBg(\ntitle\n, \nred\n)\n\n# bottom slice - START the GUI\napp.go()\n\n\n\n\n\n\nAnd, that's it...\n\nThe more \nfillings\n you put in your sandwich, and the more time you spend making them \nlook nice\n, the better it will taste!\n\n\nFoot-long sub?\n\n\n\n\nOf course, for most of us, a simple sandwich isn't enough...\n\nWe want to make a meal out of it!  \n\n\nIn which case, you're going to want to arrange your fillings a bit more cleverly!\n\n\n\n\n3 slices of cheese along the bottom  \n\n\nAlternating slices of tomato \n cucumber on top  \n\n\nThen a mixture of onions and peppers  \n\n\nFinally, the sauce!  \n\n\n\n\nBy default, in an appJar GUI, the fillings are simply stacked on top of each other.  \n\n\nHowever, filling a sub is very similar to filling a spreadsheet.\n\nSimply tell each filling what layer (row) it's on, and what column it's in.\n\nAnd, if you're not planning on chopping a filling, it might stretch (span) across more than one column.  \n\n\nSee here\n for more.  \n\n\nfrom appJar import gui\n\n# function called by pressing the buttons\ndef press(btn):\n    if btn==\nCancel\n:\n        app.stop()\n    else:\n        print(\nUser:\n, app.getEntry('user'), \nPass:\n, app.getEntry('pass'))\n\napp = gui()\n\napp.addLabel(\ntitle\n, \nWelcome to appJar\n, 0, 0, 2)  # Row 0,Column 0,Span 2\napp.addLabel(\nuser\n, \nUsername:\n, 1, 0)              # Row 1,Column 0\napp.addEntry(\nuser\n, 1, 1)                           # Row 1,Column 1\napp.addLabel(\npass\n, \nPassword:\n, 2, 0)              # Row 2,Column 0\napp.addSecretEntry(\npass\n, 2, 1)                     # Row 2,Column 1\napp.addButtons([\nSubmit\n, \nCancel\n], press, 3, 0, 2) # Row 3,Column 0,Span 2\n\napp.setEntryFocus(\nuser\n)\n\napp.go()\n\n\n\n\n\n\nAny extras?\n\n\n\n\nIt's possible to make changes to how the GUI looks\n\nFor starters, you can specify a name and size for your GUI when you make it:  \n\n\n\n\napp=gui(\"Login Window\", \"400x200\")\n  \n\n\n\n\nAnd, you can choose what kind of bread, and whether it's toasted:   \n\n\n\n\napp.setBg(\"Brown\")\n\n\napp.setFont(20)\n\n\n\n\nSee here\n for more.  \n\n\n\n\nMake your own!\n\n\n\n\nThat's about it for now.\n\nHave a look around, discover all of the different \nfillings\n available.\n\nAnd, investigate how best to \npresent \n your sandwich!",
            "title": "Welcome"
        },
        {
            "location": "/#appjar",
            "text": "This is a Python library for creating  quick  and  easy  GUIs, designed primarily for use in the  classroom .    It has no dependencies, other than  Python 3.x  (although it mostly works on 2.7) and relies on Python's built-in  tkinter  library.    It's very easy to set-up, specifically with schools in mind. See the  installation guidelines  for more information.",
            "title": "appJar"
        },
        {
            "location": "/#lets-make-a-sandwich",
            "text": "Making a  GUI  (using appJar) is just like making a  sandwich !    You need a slice of bread on the top and bottom, and then a bunch of fillings in the middle ...  # import the library\nfrom appJar import gui\n\n# top slice - CREATE the GUI\napp = gui()\n\n### fillings go here ###\n\n# bottom slice - START the GUI\napp.go()  If you forget a slice of bread - you haven't got a sandwich! \nOh, and if you try to put fillings under the bottom-slice, then they won't be in the sandwich!",
            "title": "Let's make a sandwich"
        },
        {
            "location": "/#add-some-fillings",
            "text": "When making a sandwich, you could just stuff it with fillings:     addFilling('cheese', 'cheddar')     addFilling('ham', 'smoked')      But it's often nice to prepare the fillings too:     setFilling('cheese', 'grated')    setFilling('ham', 'sliced')     # import the library\nfrom appJar import gui\n\n# top slice - CREATE the GUI\napp = gui()\n\n### fillings go here ###\napp.addLabel( title ,  Welcome to appJar )\napp.setLabelBg( title ,  red )\n\n# bottom slice - START the GUI\napp.go()   And, that's it... \nThe more  fillings  you put in your sandwich, and the more time you spend making them  look nice , the better it will taste!",
            "title": "Add some fillings..."
        },
        {
            "location": "/#foot-long-sub",
            "text": "Of course, for most of us, a simple sandwich isn't enough... \nWe want to make a meal out of it!    In which case, you're going to want to arrange your fillings a bit more cleverly!   3 slices of cheese along the bottom    Alternating slices of tomato   cucumber on top    Then a mixture of onions and peppers    Finally, the sauce!     By default, in an appJar GUI, the fillings are simply stacked on top of each other.    However, filling a sub is very similar to filling a spreadsheet. \nSimply tell each filling what layer (row) it's on, and what column it's in. \nAnd, if you're not planning on chopping a filling, it might stretch (span) across more than one column.    See here  for more.    from appJar import gui\n\n# function called by pressing the buttons\ndef press(btn):\n    if btn== Cancel :\n        app.stop()\n    else:\n        print( User: , app.getEntry('user'),  Pass: , app.getEntry('pass'))\n\napp = gui()\n\napp.addLabel( title ,  Welcome to appJar , 0, 0, 2)  # Row 0,Column 0,Span 2\napp.addLabel( user ,  Username: , 1, 0)              # Row 1,Column 0\napp.addEntry( user , 1, 1)                           # Row 1,Column 1\napp.addLabel( pass ,  Password: , 2, 0)              # Row 2,Column 0\napp.addSecretEntry( pass , 2, 1)                     # Row 2,Column 1\napp.addButtons([ Submit ,  Cancel ], press, 3, 0, 2) # Row 3,Column 0,Span 2\n\napp.setEntryFocus( user )\n\napp.go()",
            "title": "Foot-long sub?"
        },
        {
            "location": "/#any-extras",
            "text": "It's possible to make changes to how the GUI looks \nFor starters, you can specify a name and size for your GUI when you make it:     app=gui(\"Login Window\", \"400x200\")      And, you can choose what kind of bread, and whether it's toasted:      app.setBg(\"Brown\")  app.setFont(20)   See here  for more.",
            "title": "Any extras?"
        },
        {
            "location": "/#make-your-own",
            "text": "That's about it for now. \nHave a look around, discover all of the different  fillings  available. \nAnd, investigate how best to  present   your sandwich!",
            "title": "Make your own!"
        },
        {
            "location": "/pythonWidgets/",
            "text": "Widgets\n\n\n\n\nIn a GUI, the fillings are known as \nwidgets\n.\n\nThere are lots of different widgets to chose from, each suited to a specific task.  \n\n\nNearly every widget needs a \nTITLE\n.\n\nThis is a unique name for the widget, so that later you can get information from that widget, or change it.  \n\n\nNearly all widgets in appJar provide the same three functions:\n\n\n\n\n(Always) - \nADD\n a widget (with a unique title) - this creates the widget\n\n\n(Often) - \nGET\n the widget (using its unique title) - this gets the contents of the widget (usually done in a function)\n\n\n(Sometimes) - \nSET\n the widget (using its unique title) - this changes what's in the widget\n\n\n\n\nOn top of these, there is a common set of functions for \nchanging widgets\n.\n\nAs well as some specialist functions, unique to each widget (see below).  \n\n\nLabel\n\n\n\n\nLabels\n are used for displaying text in the GUI.  \n\n\n\n\nThey are great for titles, at the top of the GUI, usually spanning multiple columns.  \n\n\nThey are really useful before \nEntries\n and \nDrop-downs\n to explain their purpose.  \n\n\nAnd, they're very helpful at the bottom of the GUI, to show the results of an action.\n\n\n  \n\n\n\n\nfrom appJar import gui\n\napp = gui()\n\napp.addLabel(\nl1\n, \nLabel 1\n)\napp.addLabel(\nl2\n, \nLabel 2\n)\napp.addLabel(\nl3\n, \nLabel 3\n)\napp.addLabel(\nl4\n, \nLabel 4\n)\n# common set functions\napp.setLabelBg(\nl1\n, \nred\n)\napp.setLabelBg(\nl2\n, \nyellow\n)\napp.setLabelBg(\nl3\n, \npurple\n)\napp.setLabelBg(\nl4\n, \norange\n)\n\napp.go()\n\n\n\n\nAdd Labels\n\n\n\n\n\n\n.addLabel(title, text=None)\n\n    As with all widgets, when you add a \nlabel\n, a title must be provided - to identify the \nlabel\n. This is then followed by an optional piece of text to display.\n\n\n\n\n\n\n.addEmptyLabel(title)\n\n    Does the same as add a \nlabel\n, except there''s no parameter to set any text.\n\n\n\n\n\n\n.addFlashLabel(title, text=None)\n\n    This adds a flashing \nlabel\n, that will alternate between the foreground and background colours.\n\n\n\n\n\n\n  \n\n\nfrom appJar import gui\n\napp = gui()\n\napp.addFlashLabel(\nf1\n, \nThis is flashing\n)\napp.addLabel(\nf2\n, \nThis is not flashing\n)\napp.addFlashLabel(\nf3\n, \nThis is also flashing\n)\n\napp.go()\n\n\n\n\nSet Labels\n\n\n\n\n\n\n.setLabel(title, text)\n\n    Change the contents of the \nlabel\n.\n\n\n\n\n\n\n.clearLabel(title)\n\n    Clear the contents of the \nlabel\n.\n\n\n\n\n\n\nGet Labels\n\n\n\n\n.getLabel(title)\n\n    Get the contents of the \nlabel\n.\n\n\n\n\nAuto-Labelled Widgets\n\n\n\n\nIt's possible to automatically include a \nlabel\n alongside some widgets.\n\nBoth the label and widget will be placed in the same grid space.\n\nSimply add the word \nLabel\n to the command when adding the widget:  \n\n\n\n\n.addLabelEntry(title)\n\n\n.addLabelNumericEntry(title)\n\n\n.addLabelSecretEntry(title)\n\n\n.addLabelAutoEntry(title, words)\n\n\n.addLabelScale(title)\n\n\n.addLabelOptionBox(title, values)\n\n\n.addLabelTickOptionBox(title, values)\n\n\n.addLabelSpinBox(title, values)\n\n\n.addLabelSpinBoxRange(title, from, to)\n  \n\n\n\n\nSee the relevant section for a description of what the widget does.\n\n\nEntry\n\n\n\n\nEntries are used to capture input from the user. They take a single parameter - a title.\n\n\nThere are three special-case entries:\n\n\n\n\nNumericEntry - this only allows numbers to be typed in - always returns a float.\n\n\nSecretEntry - this will show stars, instead of the letters typed - useful for capturing passwords.\n\n\nAutoEntry - this takes a list of words to provide auto-completion.  \n\n\n\n\n\n\nfrom appJar import gui\n\napp=gui()\n\napp.addEntry(\ne1\n)\napp.addEntry(\ne2\n)\napp.addEntry(\ne3\n)\napp.addLabelEntry(\nName\n)\n\napp.setEntryDefault(\ne2\n, \nAge here\n)\n\napp.go()\n\n\n\n\nAdd Entries\n\n\n\n\n.addEntry(title)\n\n\n.addNumericEntry(title)\n\n\n.addSecretEntry(title)\n\n\n\n\n.addAutoEntry(title, words)\n  \n\n\nEach of these will add the specified type of Entry, using the title provided.\n\n\n\n\n\n\nSet Entries\n\n\n\n\n\n\n.setEntry(title, text)\n\n    This sets the contents of the specified entry box.\n\n\n\n\n\n\n.setEntryDefault(title, text)\n\n    This sets a default value to display in an entry box.\n\n    Once the user starts typing, it will disappear.\n\n    The text is centered, shown in a light gray font, and will not be returned by \n.getEntry(title)\n  \n\n\n\n\n\n\n.clearEntry(title)\n\n    This will clear the contents of the specified entry box.\n\n\n\n\n\n\n.clearAllEntries()\n\n    This will clear all the entry boxes in the GUI.\n\n\n\n\n\n\n.setFocus(title)\n\n    This will put the cursor in the specified entry box, so that the user can start typing without needing to click.\n\n\n\n\n\n\nGet Entries\n\n\n\n\n.getEntry(title)\n\n    This will return the contents of the specified entry box.\n\n    NB. \nnumericEntries\n always return a float.  \n\n\n\n\nButton\n\n\n\n\nA clickable button, that will call a function.\n\nThese are the key to starting an interactive application.\n\nThe GUI is looping, waiting for something to happen.\n\nA button click is the classic way to start interacting with a GUI.\n\n\nWhenever any function is called by the GUI, the title of the widget that called it is passed as a parameter.\n\nThat way, multiple widgets can use the same function, but different actions can be performed, depending on the name passed as a parameter.\n\n\n\n\n    from appJar import gui\n\n    # the title of the button will be received as a parameter\n    def press(btn):\n        print(btn)\n\n    app=gui()\n    # 3 buttons, each calling the same function\n    app.addButton(\nOne\n, press)\n    app.addButton(\nTwo\n, press)\n    app.addButton(\nThree\n, press)\n    app.go()\n\n\n\n\nAdd Buttons\n\n\n\n\n\n\n.addButton(title, function)\n\n    Add a single button to the GUI, the text on the button will be the same as the button's title.\n\n    A function should be specified, which will be called when the button is clicked.\n\n\n\n\n\n\n.addButtons(titles, functions)\n\n    It's possible to add a list of buttons to the GUI.\n\n    Pass a 1-dimensional or 2-dimensional list, and they will be rendered accordingly.\n\n    A single function can be passed, to use for all buttons.\n\n    Or a list of functions can be passed, which MUST correspond to the buttons.  \n\n\n\n\n\n\n.addNamedButton(name, title, function)\n\n    By default, it's not possible to have two buttons with the same text.\n\n    If that's required, a named button should be used.\n\n    This allows a name and title to be set for a button.\n\n    The name will be displayed on the button, and the title passed to the function.\n\n\n\n\n\n\nSet Buttons\n\n\n\n\n\n\n.setButton(name, text)\n\n    This will change the text displayed on a button, but \nNOT\n the value passed as a parameter to the function.  \n\n\n\n\n\n\n.setButtonImage(title, image)\n\n    This allows an image to be placed on a button, instead of the usual text.  \n\n\n\n\n\n\nRadioButton\n\n\n\n\nA group of round boxes, only one of which can be selected.\n\nThese are great for getting a single value, for a multiple choice question.  \n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.addRadioButton(\nsong\n, \nKiller Queen\n)\napp.addRadioButton(\nsong\n, \nParadise City\n)\napp.addRadioButton(\nsong\n, \nParklife\n)\napp.go()\n\n\n\n\nAdd RadioButtons\n\n\n\n\n.addRadioButton(title, name)\n\n    This will create a RadioButton grouped by the specified title.\n\n    This button will have the value of name.\n\n    Radio buttons are usually used in groups.  \n\n\n\n\nSet RadioButtons\n\n\n\n\n\n\n.setRadioButton(title, value)\n\n    This will tick the specified RadioButton.  \n\n\n\n\n\n\n.setRadioTick(title, tick=True)\n\n    It is possible to use tick-boxes instead of the classic circular radio-button.\n\n    Setting tick to True will convert all the radio-buttons for this title to tick boxes.  \n\n\n\n\n\n\nGet RadioButtons\n\n\n\n\n.getRadioButton(title)\n\n    Gets the value of the selected RadioButton, for the specified title.\n\n\n\n\n    from appJar import gui\n\n    def press(rb):\n        print(app.getRadioButton(\nsong\n))\n\n    app=gui()\n    app.addRadioButton(\nsong\n, \nKiller Queen\n)\n    app.addRadioButton(\nsong\n, \nParadise City\n)\n\n    # call this function, when the RadioButton changes\n    app.setRadioButtonFunction(\nsong\n, press)\n\n    app.addButton(\nPLAY\n, press)\n    app.go()\n\n\n\n\nCheckBox\n\n\n\n\nA simple tick-box, with a label, that can be either ON or OFF.  \n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(20)\n\napp.addCheckBox(\nApples\n)\napp.addCheckBox(\nPears\n)\napp.addCheckBox(\nOranges\n)\napp.addCheckBox(\nKiwis\n)\n\napp.setCheckBox(\nOranges\n)\n\napp.go()\n\n\n\n\nAdd CheckBoxes\n\n\n\n\n.addCheckBox(title)\n\n    This creates a CheckBox, with the specified title.  \n\n\n\n\nSet CheckBoxes\n\n\n\n\n.setCheckBox(title, ticked=True)\n\n    This will tick the CheckBox, or untick it if ticked is set to False.  \n\n\n\n\nGet CheckBoxes\n\n\n\n\n.getCheckBox(title)\n\n    This will return True or False, depending on the state of the CheckBox.  \n\n\n\n\nOptionBox\n\n\n\n\nCreates a simple drop-down box.\n\nIt is only possible to select one option from this drop-down.\n\nPass in a list of values to show in the drop-down box.\n\nThey will be added in the same order, with the first item shown.\n\nIf the first item is empty, a simple title \n- options -\n will be created.\n\nAny other empty items will be removed.\n\nIf an item starts with a dash (-), it will be treated as a separator, and can't be selected.  \n\n\n \n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(20)\napp.addLabelOptionBox(\nOptions\n, [\n- Fruits -\n, \nApple\n, \nOrange\n,\n                        \nPear\n, \nkiwi\n, \n- Pets -\n, \nDogs\n, \nCats\n,\n                        \nFish\n, \nHamsters\n])\napp.go()\n\n\n\n\nAdd OptionBoxes\n\n\n\n\n\n\n.addOptionBox(title, values)\n\n    This will create an OptionBox, adding the contents of the values list, in the order specified.  \n\n\n\n\n\n\n.addTickOptionBox(title, values)\n\n    This will create an OptionBox made up of check buttons.\n\n    The \ntitle\n will always be displayed as the \nselected\n entry in the OptionBox, event though it can't be selected/ticked.\n\n    Instead of selecting a single item, you tick the ones you want.\n\n    Calling \n.getOptionBox(title)\n will return a dictionary of the options along with a True/False value.\n\n\n  \n\n\n\n\n\n\nfrom appJar import gui\n\ndef get(btn):\n    print(app.getOptionBox(\nFavourite Pets\n))\n\napp=gui()\napp.setFont(20)\napp.addTickOptionBox(\nFavourite Pets\n, [\nDogs\n, \nCats\n, \nHamsters\n, \nFish\n])\napp.addButton(\nGET\n, get)\napp.go()\n\n\n\n\nSet OptionBoxes\n\n\n\n\n\n\n.changeOptionBox(title, newOptions, index)\n\n    This will replace the contents of the OptionBox, with the new list provided.\n\n    If specified, the indexed item will be selected - this can be a position or an item name.\n\n    If setting a TickOptionBox, pass in the optional value.  \n\n\n\n\n\n\n.setOptionBox(title, position, value=True)\n\n    This will select the item in the list, at the position specified.\n\n    Alternatively, the name of an item can be specified.\n\n    If changing a TickOptionBox, the specified item will be set to the specified value.  \n\n\n\n\n\n\n.deleteOptionBox(title, position)\n\n    This will delete the item in the list, at the position specified.\n\n    Alternatively, the name of an item can be specified.\n\n    Not available on TickOptionBoxes.  \n\n\n\n\n\n\nGet OptionBoxes\n\n\n\n\n.getOptionBox(title)\n\n    This will return the currently displayed value in an OptionBox.\n\n    Or a dictionary of names, and their boolean value if a TickOptionBox.\n\n    Will return None, if an invalid option is currently selected.  \n\n\n\n\nSpinBox\n\n\n\n\nA scrollable list of options. Up and down buttons are provided to scroll from one item to the next.\n\nUnlike the OptionBox, you do not get a drop-down of choices, instead it spins to the next/previous option.  \n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(20)\napp.addLabelSpinBox(\noptions\n, [\nApple\n, \nOrange\n, \nPear\n, \nkiwi\n])\napp.go()\n\n\n\n\nAdd SpinBoxes\n\n\n\n\n\n\n.addSpinBox(title, values)\n\n    This will create a SpinBox, adding the contents of the values list, in the order specified.\n\n\n\n\n\n\n.addSpinBoxRange(title, from, to)\n\n    This will create a SpinBox, with a numeric range of items.  \n\n\n  \n\n\n\n\n\n\n    from appJar import gui\n\n    app=gui()\n    app.setFont(20)\n    app.addSpinBoxRange(\nNumbers\n, 1, 12)\n    app.go()\n\n\n\n\nSet SpinBoxes\n\n\n\n\n\n\n.setSpinBox(title, value)\n\n    This will select the specified value in the SpinBox.  \n\n\n\n\n\n\n.setSpinBoxPos(title, pos)\n\n    This will select the value at the specified position in the SpinBox.  \n\n\n\n\n\n\nGet SpinBoxes\n\n\n\n\n.getSpinBox(title)\n\n    This will get the selected value from the specified SpinBox.  \n\n\n\n\nListBox\n\n\n\n\nA box containing a list of items, single or multi-select\n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(20)\napp.addListBox(\nlist\n, [\napple\n, \norange\n, \npear\n, \nkiwi\n])\napp.go()\n\n\n\n\nAdd ListBoxes\n\n\n\n\n\n\n.addListBox(title, values)\n\n    Creates a ListBox with the specified values.  \n\n\n\n\n\n\n.addListItem(title, item)\n\n    Adds a single item to the the end of the ListBox, and selects it.  \n\n\n\n\n\n\n.addListItems(title, items)\n\n    Adds a list of items to the end of the List Box, selecting the last one.  \n\n\n\n\n\n\nSet ListBoxes\n\n\n\n\n\n\n.updateListItems(title, items)\n\n    Replace the contents of the specified ListBox with the new values.  \n\n\n\n\n\n\n.removeListItem(title, item)\n\n    Remove the specified item from the  specified ListBox.  \n\n\n\n\n\n\nfrom appJar import gui\ndef press(btn):\n    items = app.getListItems(\nlist\n)\n    if len(items)\n 0:\n        app.removeListItem(\nlist\n, items[0])\n\napp=gui()\napp.setFont(20)\napp.addListBox(\nlist\n, [\napple\n, \norange\n, \npear\n, \nkiwi\n])\napp.addButton(\npress\n,  press)\napp.go()\n\n\n\n\n\n\n\n\n.clearListBox(title)\n\n    Removes all items from the specified ListBox.  \n\n\n\n\n\n\n.setListBoxRows(title)\n\n    Sets how many rows to display in the specified ListBox.  \n\n\n\n\n\n\n.setListBoxMulti(list, multi=True)\n\n    Configures whether the specified ListBox is single or multi select.  \n\n\n\n\n\n\n.selectListItem(title, item)\n\n    Selects the specified item in the specified ListBox.  \n\n\n\n\n\n\n.setListItemBg(title, item, colour)\n \n \n.setListItemFg(title, item, colour)\n\n\n.setListItemAtPosBg(title, item, colour)\n \n \n.setListItemAtPosFg(title, item, colour)\n\n    Sets the background or foreground colours the specified ListBox item.\n\n    Can either specify a named item (will update all with that name) or the position of an item.  \n\n\n\n\n\n\n  \n\n\nGet ListBoxes\n\n\n\n\n\n\n.getListItems(title)\n\n    Gets all of the selected items from the specified ListBox.  \n\n\n\n\n\n\n.getAllListItems(title)\n\n    Gets all of the items from the specified ListBox.  \n\n\n\n\n\n\nScale\n\n\n\n\nA slider, that has a minimum \n maximum value.  \n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(20)\napp.addLabelScale(\nscale\n)\napp.go()\n\n\n\n\nAdd Scales\n\n\n\n\n.addScale(title)\n\n    Adds a horizontal scale, with a default range between 0 and 100.  \n\n\n\n\nSet Scales\n\n\n\n\n\n\n.setScale(title, pos)\n\n    Sets the selected pos for the specified Scale.  \n\n\n\n\n\n\n.setScaleRange(title from, to, curr=None)\n\n    Allows you to change the range available in the Scale.\n\n    If \ncurr\n is provided, then the Scale will be set to that value.  \n\n\n\n\n\n\n.showScaleIntervals(title, intervals)\n\n    Configures the Scale to show interval labels along its length.\n\n\n  \n\n\n\n\n\n\n.showScaleValue(title, show=True)\n\n    Configures the Scale to show the currently selected value.\n\n\n  \n\n\n\n\n\n\n.setScaleHorizontal(title)\n \n \n.setScaleVertical(title)\n\n    Changes the Scale's orientation to the specified value.  \n\n\n  \n\n\n\n\n\n\n.setScaleWidth(title, width)\n \n \n.setScaleLength(title, length)\n\n    Sets a width/length for the scale's slider.  \n\n\n\n\n\n\n.setScaleFunction(title, func)\n\n    Sets a function to call, each time the scale is changed.\n\n    The function must take one parameter, which will be populated with the scale's title.  \n\n\n\n\n\n\nGet Scales\n\n\n\n\n.getScale(title)\n\n    Gets the currently selected value from the scale.  \n\n\n\n\nMessage\n\n\n\n\nSimilar to a Label, except it will wrap the text over multiple lines.  \n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(12)\napp.addMessage(\nmess\n, \nYou can put a lot of text in this widget.\nThe text will be wrapped over multiple lines.\nIt's not possible to apply different styles to different words.\n)\napp.go()\n\n\n\n\nAdd Messages\n\n\n\n\n\n\n.addMessage(title, text)\n\n    Adds a Message widget, with the specified text.  \n\n\n\n\n\n\n.addEmptyMessage(title)\n\n    Adds an empty Message widget.  \n\n\n\n\n\n\nSet Messages\n\n\n\n\n\n\n.clearMessage(title)\n\n    Clears the specified Message widget.  \n\n\n\n\n\n\n.setMessage(title, text)\n\n    Sets the contents of the specified Message widget, to the specified text.  \n\n\n\n\n\n\nTextArea\n\n\n\n\nSimilar to an Entry box, but allows you to type text over multiple lines.  \n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.addTextArea(\nt1\n)\napp.go()\n\n\n\n\nAdd TextAreas\n\n\n\n\n\n\n.addTextArea(title)\n\n    Adds an empty TextArea, with the specified title.  \n\n\n\n\n\n\n.addScrolledTextArea(title)\n\n    Adds a scrollable TextArea with the specified title.  \n\n\n\n\n\n\n  \n\n\nSet TextAreas\n\n\n\n\n\n\n.setTextArea(title, text)\n\n    Changes the contents of the specified TextArea, to the specified text.  \n\n\n\n\n\n\n.clearTextArea(title)\n\n    Clears the contents of the specified TextArea.  \n\n\n\n\n\n\nGet TextAreas\n\n\n\n\n.getTextArea(title)\n\n    Gets the contents of the specified TextArea.  \n\n\n\n\nMeter\n\n\n\n\nVarious styles of progress meter:  \n\n\n\n\n\n\nMeter\n\n\n\nA simple meter for showing progress from 0% to 100%.  \n\n\n\n\n\n\nSplitMeter\n\n\n\nA possesion style meter, showing percentages on either side.  \n\n\n\n\n\n\nDualMeter\n\n\n\nTwo separate meters, expanding out from the middle.  \n\n\n\n\n\n\nfrom appJar import gui\n\napp=gui()\napp.addMeter(\nprogress\n)\napp.setMeterFill(\nprogress\n, \nblue\n)\napp.go()\n\n\n\n\nAdd Meters\n\n\n\n\naddMeter(name)\n \n \n.addSplitMeter(name)\n \n  \n.addDualMeter(name)\n\n    Adds a meter with the specified name, of the specified type..  \n\n\n\n\nSet Meters\n\n\n\n\n\n\nsetMeter(name, value, text=None)\n\n    Changes the specified meter to the specified value.\n\n    For \nMeter\n \n \nSplitMeter\nshould be a value between 0 and 100.\n\n    For \nDualMeter\n should be a list of two values, each between 0 and 100.  \n\n\n\n\n\n\nsetMeterFill(name, colour)\n\n    Changes the fill colour of the specified meter.\n\n    For \nSplitMeter\n \n \nDualMeter\nshould be a list of two colours.  \n\n\n\n\n\n\nGet Meters\n\n\n\n\ngetMeter(name)\n\n    Gets the value of the specified meter.\n\n    As meters convert their data to a value between 0 and 1, this will return a list of two values: \n(0.45, '45 %')\n  \n\n\n\n\nBackground Processing\n\n\nMeters are designed to show progress over time.\n\nOne common solution is to register a function that is constantly updating a meter.\n\nThis should then be monitoring/updating a global variable:  \n\n\ndef updateMeter():\n    app.setMeter(\nprogress\n, percentComplete)\n\n# schedue function to be called regularly\napp.registerEvent(updateMeter)\n\n\n\n\nProperties\n\n\n\n\nA compound widget that shows multiple CheckButtons linked to a dictionary.\n\nNote, dictionaries have no order, so when added as a dictionary, the items will be automatically sorted.  \n\n\n\n\n\n\nfrom appJar import gui\n\ntoppings={\nCheese\n:False, \nTomato\n:False, \nBacon\n:False,\n            \nCorn\n:False, \nMushroom\n:False}\n\napp=gui()\napp.setBg(\nlightBlue\n)\napp.setFont(20)\napp.addProperties(\nToppings\n, toppings)\napp.setProperty(\nToppings\n, \nPepper\n)\napp.go()\n\n\n\n\nAdd Properties\n\n\n\n\naddProperties(title, values)\n\n    Creates a new Properties widget, with the specified title.\n\n    If values is populated, then the dictionary items will be added to the widget.  \n\n\n\n\nSet Properties\n\n\n\n\n\n\nsetProperties(title, props)\n\n    Adds the dictionary of properties to the widget.\n\n    If any of them already exist, they will be updated.  \n\n\n\n\n\n\nsetProperty(title, prop, value=False)\n\n    Sets the named property to the specified value.\n\n    If it doesn't exist, it will be added first, at the end of the widget.  \n\n\n\n\n\n\ndeleteProperty(title, prop)\n\n    Deletes the named property from the widget.  \n\n\n\n\n\n\nGet Properties\n\n\n\n\n\n\ngetProperties(title)\n\n    Gets a dictionary of the all items in the Properties widget.  \n\n\n\n\n\n\ngetProperty(title, prop)\n\n    Gets the value of the named property.  \n\n\n\n\n\n\nExamples\n\n\nIt's possible to put Properties into ToggleFrames, and also set a Function to listen for any changes.  \n\n\n\n\n\n\n\n\nfrom appJar import gui\n\ndef changed(props):\n    print(\nChanged\n, props)\n\ntoppings={\nCheese\n:False, \nTomato\n:False, \nBacon\n:False,\n            \nCorn\n:False, \nMushroom\n:False}\n\napp=gui()\napp.setBg(\nlightBlue\n)\napp.setFont(20)\n\napp.startToggleFrame(\nToppings\n)\napp.addProperties(\nToppings\n, toppings)\napp.setPropertiesFunction(\nToppings\n, changed)\napp.stopToggleFrame()\n\napp.go()\n\n\n\n\nSeparator\n\n\n\n\nUseful for indicating separation between widgets.\n\nWill draw a horizontal/vertical line spanning the cell.\n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.setBg(\nlightBlue\n)\napp.addHorizontalSeparator(0,0,4, colour=\nred\n)\napp.addVerticalSeparator(1,0, colour=\nred\n)\napp.addVerticalSeparator(1,1, colour=\nred\n)\napp.addVerticalSeparator(1,2, colour=\nred\n)\napp.addVerticalSeparator(1,3, colour=\nred\n)\napp.addHorizontalSeparator(2,0,4, colour=\nred\n)\napp.go()\n\n\n\n\nAdd Seperators\n\n\n\n\n.addHorizontalSeparator(colour=None)\n \n \n.addVerticalSeparator(colour=None)\n\n    Adds a separator (a horizontal or vertical line) spanning the cell.\n\n    An optional colour can be passed in, to set a colour for the separator.  \n\n\n\n\nLink/WebLink\n\n\n\n\nClickable text to call a function or launch a URL\n\n\n  \n\n\nfrom appJar import gui\ndef press(link):\n    app.infoBox(\nInfo\n, \nYou clicked the link!\n)\n\napp=gui()\napp.setFont(20)\napp.addLink(\nClick me\n, press)\napp.addWebLink(\nappJar.info\n, \nhttp://appJar.info\n)\napp.go()\n\n\n\n\nAdd Links\n\n\n\n\n\n\n.addLink(title, func)\n\n    Adds a \nhyperlink\n, that when clicked, will call the specified function.  \n\n\n\n\n\n\n.addWebLink(title, page)\n\n    Adds a \nhyperlink\n, that when clicked, will launch the default browser, and load the specified page.\n\n    It must be a fully formed link, including \nhttp://\n  \n\n\n\n\n\n\nGrip\n\n\n\n\nClickable icon to drag the window around.  \n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(20)\napp.setBg(\nlightBlue\n)\n\napp.addLabel(\nl1\n, \nMove me around...\n, 0, 0)\napp.addGrip(0,1)\napp.addSeparator(1,0,2, colour=\nred\n)\napp.go()\n\n\n\n\nAdd Grips\n\n\n\n\n.addGrip()\n\n    Adds a simple grip icon.\n\n    The mouse pointer changes over the grip, and a ToolTip will be shown.\n\n    The size and image can't be changed.  \n\n\n\n\nDatePicker\n\n\n\n\nA widget to capture a date - will handle presenting accurate drop-downs, and return a date.\n\n\n  \n\n\nfrom appJar import gui\n\ndef showDate(btn):\n    print(app.getDatePicker(\ndp\n))\n\n    app=gui()\n    app.addDatePicker(\ndp\n)\n    app.addButton(\nGET\n, showDate)\n    app.setDatePickerRange(\ndp\n, 1900, 2100)\n    app.setDatePicker(\ndp\n)\n    app.go()\n\n\n\n\nAdd DatePickers\n\n\n\n\n.addDatePicker(title)\n\n    Create a DatePicker, with a range from 1/1/1970 to 31/12/2020  \n\n\n\n\nSet DatePickers\n\n\n\n\n\n\n.setDatePicker(title, date=None)\n\n    Will set the specified DatePicker to the specified date, or current date if no date is supplied.  \n\n\n\n\n\n\n.setDatePickerRange(title, startYear, endYear=None)\n\n    Set the range for the named DatePicker.\n\n    If endYear is None, the current Year will be used.  \n\n\n\n\n\n\nGet DatePickers\n\n\n\n\n.getDatePicker(title)\n\n    Will return the currently selected date.",
            "title": "Widgets"
        },
        {
            "location": "/pythonWidgets/#widgets",
            "text": "In a GUI, the fillings are known as  widgets . \nThere are lots of different widgets to chose from, each suited to a specific task.    Nearly every widget needs a  TITLE . \nThis is a unique name for the widget, so that later you can get information from that widget, or change it.    Nearly all widgets in appJar provide the same three functions:   (Always) -  ADD  a widget (with a unique title) - this creates the widget  (Often) -  GET  the widget (using its unique title) - this gets the contents of the widget (usually done in a function)  (Sometimes) -  SET  the widget (using its unique title) - this changes what's in the widget   On top of these, there is a common set of functions for  changing widgets . \nAs well as some specialist functions, unique to each widget (see below).",
            "title": "Widgets"
        },
        {
            "location": "/pythonWidgets/#label",
            "text": "Labels  are used for displaying text in the GUI.     They are great for titles, at the top of the GUI, usually spanning multiple columns.    They are really useful before  Entries  and  Drop-downs  to explain their purpose.    And, they're very helpful at the bottom of the GUI, to show the results of an action.       from appJar import gui\n\napp = gui()\n\napp.addLabel( l1 ,  Label 1 )\napp.addLabel( l2 ,  Label 2 )\napp.addLabel( l3 ,  Label 3 )\napp.addLabel( l4 ,  Label 4 )\n# common set functions\napp.setLabelBg( l1 ,  red )\napp.setLabelBg( l2 ,  yellow )\napp.setLabelBg( l3 ,  purple )\napp.setLabelBg( l4 ,  orange )\n\napp.go()",
            "title": "Label"
        },
        {
            "location": "/pythonWidgets/#add-labels",
            "text": ".addLabel(title, text=None) \n    As with all widgets, when you add a  label , a title must be provided - to identify the  label . This is then followed by an optional piece of text to display.    .addEmptyLabel(title) \n    Does the same as add a  label , except there''s no parameter to set any text.    .addFlashLabel(title, text=None) \n    This adds a flashing  label , that will alternate between the foreground and background colours.        from appJar import gui\n\napp = gui()\n\napp.addFlashLabel( f1 ,  This is flashing )\napp.addLabel( f2 ,  This is not flashing )\napp.addFlashLabel( f3 ,  This is also flashing )\n\napp.go()",
            "title": "Add Labels"
        },
        {
            "location": "/pythonWidgets/#set-labels",
            "text": ".setLabel(title, text) \n    Change the contents of the  label .    .clearLabel(title) \n    Clear the contents of the  label .",
            "title": "Set Labels"
        },
        {
            "location": "/pythonWidgets/#get-labels",
            "text": ".getLabel(title) \n    Get the contents of the  label .",
            "title": "Get Labels"
        },
        {
            "location": "/pythonWidgets/#auto-labelled-widgets",
            "text": "It's possible to automatically include a  label  alongside some widgets. \nBoth the label and widget will be placed in the same grid space. \nSimply add the word  Label  to the command when adding the widget:     .addLabelEntry(title)  .addLabelNumericEntry(title)  .addLabelSecretEntry(title)  .addLabelAutoEntry(title, words)  .addLabelScale(title)  .addLabelOptionBox(title, values)  .addLabelTickOptionBox(title, values)  .addLabelSpinBox(title, values)  .addLabelSpinBoxRange(title, from, to)      See the relevant section for a description of what the widget does.",
            "title": "Auto-Labelled Widgets"
        },
        {
            "location": "/pythonWidgets/#entry",
            "text": "Entries are used to capture input from the user. They take a single parameter - a title.  There are three special-case entries:   NumericEntry - this only allows numbers to be typed in - always returns a float.  SecretEntry - this will show stars, instead of the letters typed - useful for capturing passwords.  AutoEntry - this takes a list of words to provide auto-completion.      from appJar import gui\n\napp=gui()\n\napp.addEntry( e1 )\napp.addEntry( e2 )\napp.addEntry( e3 )\napp.addLabelEntry( Name )\n\napp.setEntryDefault( e2 ,  Age here )\n\napp.go()",
            "title": "Entry"
        },
        {
            "location": "/pythonWidgets/#add-entries",
            "text": ".addEntry(title)  .addNumericEntry(title)  .addSecretEntry(title)   .addAutoEntry(title, words)     Each of these will add the specified type of Entry, using the title provided.",
            "title": "Add Entries"
        },
        {
            "location": "/pythonWidgets/#set-entries",
            "text": ".setEntry(title, text) \n    This sets the contents of the specified entry box.    .setEntryDefault(title, text) \n    This sets a default value to display in an entry box. \n    Once the user starts typing, it will disappear. \n    The text is centered, shown in a light gray font, and will not be returned by  .getEntry(title)       .clearEntry(title) \n    This will clear the contents of the specified entry box.    .clearAllEntries() \n    This will clear all the entry boxes in the GUI.    .setFocus(title) \n    This will put the cursor in the specified entry box, so that the user can start typing without needing to click.",
            "title": "Set Entries"
        },
        {
            "location": "/pythonWidgets/#get-entries",
            "text": ".getEntry(title) \n    This will return the contents of the specified entry box. \n    NB.  numericEntries  always return a float.",
            "title": "Get Entries"
        },
        {
            "location": "/pythonWidgets/#button",
            "text": "A clickable button, that will call a function. \nThese are the key to starting an interactive application. \nThe GUI is looping, waiting for something to happen. \nA button click is the classic way to start interacting with a GUI.  Whenever any function is called by the GUI, the title of the widget that called it is passed as a parameter. \nThat way, multiple widgets can use the same function, but different actions can be performed, depending on the name passed as a parameter.       from appJar import gui\n\n    # the title of the button will be received as a parameter\n    def press(btn):\n        print(btn)\n\n    app=gui()\n    # 3 buttons, each calling the same function\n    app.addButton( One , press)\n    app.addButton( Two , press)\n    app.addButton( Three , press)\n    app.go()",
            "title": "Button"
        },
        {
            "location": "/pythonWidgets/#add-buttons",
            "text": ".addButton(title, function) \n    Add a single button to the GUI, the text on the button will be the same as the button's title. \n    A function should be specified, which will be called when the button is clicked.    .addButtons(titles, functions) \n    It's possible to add a list of buttons to the GUI. \n    Pass a 1-dimensional or 2-dimensional list, and they will be rendered accordingly. \n    A single function can be passed, to use for all buttons. \n    Or a list of functions can be passed, which MUST correspond to the buttons.      .addNamedButton(name, title, function) \n    By default, it's not possible to have two buttons with the same text. \n    If that's required, a named button should be used. \n    This allows a name and title to be set for a button. \n    The name will be displayed on the button, and the title passed to the function.",
            "title": "Add Buttons"
        },
        {
            "location": "/pythonWidgets/#set-buttons",
            "text": ".setButton(name, text) \n    This will change the text displayed on a button, but  NOT  the value passed as a parameter to the function.      .setButtonImage(title, image) \n    This allows an image to be placed on a button, instead of the usual text.",
            "title": "Set Buttons"
        },
        {
            "location": "/pythonWidgets/#radiobutton",
            "text": "A group of round boxes, only one of which can be selected. \nThese are great for getting a single value, for a multiple choice question.        from appJar import gui\n\napp=gui()\napp.addRadioButton( song ,  Killer Queen )\napp.addRadioButton( song ,  Paradise City )\napp.addRadioButton( song ,  Parklife )\napp.go()",
            "title": "RadioButton"
        },
        {
            "location": "/pythonWidgets/#add-radiobuttons",
            "text": ".addRadioButton(title, name) \n    This will create a RadioButton grouped by the specified title. \n    This button will have the value of name. \n    Radio buttons are usually used in groups.",
            "title": "Add RadioButtons"
        },
        {
            "location": "/pythonWidgets/#set-radiobuttons",
            "text": ".setRadioButton(title, value) \n    This will tick the specified RadioButton.      .setRadioTick(title, tick=True) \n    It is possible to use tick-boxes instead of the classic circular radio-button. \n    Setting tick to True will convert all the radio-buttons for this title to tick boxes.",
            "title": "Set RadioButtons"
        },
        {
            "location": "/pythonWidgets/#get-radiobuttons",
            "text": ".getRadioButton(title) \n    Gets the value of the selected RadioButton, for the specified title.       from appJar import gui\n\n    def press(rb):\n        print(app.getRadioButton( song ))\n\n    app=gui()\n    app.addRadioButton( song ,  Killer Queen )\n    app.addRadioButton( song ,  Paradise City )\n\n    # call this function, when the RadioButton changes\n    app.setRadioButtonFunction( song , press)\n\n    app.addButton( PLAY , press)\n    app.go()",
            "title": "Get RadioButtons"
        },
        {
            "location": "/pythonWidgets/#checkbox",
            "text": "A simple tick-box, with a label, that can be either ON or OFF.        from appJar import gui\n\napp=gui()\napp.setFont(20)\n\napp.addCheckBox( Apples )\napp.addCheckBox( Pears )\napp.addCheckBox( Oranges )\napp.addCheckBox( Kiwis )\n\napp.setCheckBox( Oranges )\n\napp.go()",
            "title": "CheckBox"
        },
        {
            "location": "/pythonWidgets/#add-checkboxes",
            "text": ".addCheckBox(title) \n    This creates a CheckBox, with the specified title.",
            "title": "Add CheckBoxes"
        },
        {
            "location": "/pythonWidgets/#set-checkboxes",
            "text": ".setCheckBox(title, ticked=True) \n    This will tick the CheckBox, or untick it if ticked is set to False.",
            "title": "Set CheckBoxes"
        },
        {
            "location": "/pythonWidgets/#get-checkboxes",
            "text": ".getCheckBox(title) \n    This will return True or False, depending on the state of the CheckBox.",
            "title": "Get CheckBoxes"
        },
        {
            "location": "/pythonWidgets/#optionbox",
            "text": "Creates a simple drop-down box. \nIt is only possible to select one option from this drop-down. \nPass in a list of values to show in the drop-down box. \nThey will be added in the same order, with the first item shown. \nIf the first item is empty, a simple title  - options -  will be created. \nAny other empty items will be removed. \nIf an item starts with a dash (-), it will be treated as a separator, and can't be selected.          from appJar import gui\n\napp=gui()\napp.setFont(20)\napp.addLabelOptionBox( Options , [ - Fruits - ,  Apple ,  Orange ,\n                         Pear ,  kiwi ,  - Pets - ,  Dogs ,  Cats ,\n                         Fish ,  Hamsters ])\napp.go()",
            "title": "OptionBox"
        },
        {
            "location": "/pythonWidgets/#add-optionboxes",
            "text": ".addOptionBox(title, values) \n    This will create an OptionBox, adding the contents of the values list, in the order specified.      .addTickOptionBox(title, values) \n    This will create an OptionBox made up of check buttons. \n    The  title  will always be displayed as the  selected  entry in the OptionBox, event though it can't be selected/ticked. \n    Instead of selecting a single item, you tick the ones you want. \n    Calling  .getOptionBox(title)  will return a dictionary of the options along with a True/False value.        from appJar import gui\n\ndef get(btn):\n    print(app.getOptionBox( Favourite Pets ))\n\napp=gui()\napp.setFont(20)\napp.addTickOptionBox( Favourite Pets , [ Dogs ,  Cats ,  Hamsters ,  Fish ])\napp.addButton( GET , get)\napp.go()",
            "title": "Add OptionBoxes"
        },
        {
            "location": "/pythonWidgets/#set-optionboxes",
            "text": ".changeOptionBox(title, newOptions, index) \n    This will replace the contents of the OptionBox, with the new list provided. \n    If specified, the indexed item will be selected - this can be a position or an item name. \n    If setting a TickOptionBox, pass in the optional value.      .setOptionBox(title, position, value=True) \n    This will select the item in the list, at the position specified. \n    Alternatively, the name of an item can be specified. \n    If changing a TickOptionBox, the specified item will be set to the specified value.      .deleteOptionBox(title, position) \n    This will delete the item in the list, at the position specified. \n    Alternatively, the name of an item can be specified. \n    Not available on TickOptionBoxes.",
            "title": "Set OptionBoxes"
        },
        {
            "location": "/pythonWidgets/#get-optionboxes",
            "text": ".getOptionBox(title) \n    This will return the currently displayed value in an OptionBox. \n    Or a dictionary of names, and their boolean value if a TickOptionBox. \n    Will return None, if an invalid option is currently selected.",
            "title": "Get OptionBoxes"
        },
        {
            "location": "/pythonWidgets/#spinbox",
            "text": "A scrollable list of options. Up and down buttons are provided to scroll from one item to the next. \nUnlike the OptionBox, you do not get a drop-down of choices, instead it spins to the next/previous option.        from appJar import gui\n\napp=gui()\napp.setFont(20)\napp.addLabelSpinBox( options , [ Apple ,  Orange ,  Pear ,  kiwi ])\napp.go()",
            "title": "SpinBox"
        },
        {
            "location": "/pythonWidgets/#add-spinboxes",
            "text": ".addSpinBox(title, values) \n    This will create a SpinBox, adding the contents of the values list, in the order specified.    .addSpinBoxRange(title, from, to) \n    This will create a SpinBox, with a numeric range of items.              from appJar import gui\n\n    app=gui()\n    app.setFont(20)\n    app.addSpinBoxRange( Numbers , 1, 12)\n    app.go()",
            "title": "Add SpinBoxes"
        },
        {
            "location": "/pythonWidgets/#set-spinboxes",
            "text": ".setSpinBox(title, value) \n    This will select the specified value in the SpinBox.      .setSpinBoxPos(title, pos) \n    This will select the value at the specified position in the SpinBox.",
            "title": "Set SpinBoxes"
        },
        {
            "location": "/pythonWidgets/#get-spinboxes",
            "text": ".getSpinBox(title) \n    This will get the selected value from the specified SpinBox.",
            "title": "Get SpinBoxes"
        },
        {
            "location": "/pythonWidgets/#listbox",
            "text": "A box containing a list of items, single or multi-select      from appJar import gui\n\napp=gui()\napp.setFont(20)\napp.addListBox( list , [ apple ,  orange ,  pear ,  kiwi ])\napp.go()",
            "title": "ListBox"
        },
        {
            "location": "/pythonWidgets/#add-listboxes",
            "text": ".addListBox(title, values) \n    Creates a ListBox with the specified values.      .addListItem(title, item) \n    Adds a single item to the the end of the ListBox, and selects it.      .addListItems(title, items) \n    Adds a list of items to the end of the List Box, selecting the last one.",
            "title": "Add ListBoxes"
        },
        {
            "location": "/pythonWidgets/#set-listboxes",
            "text": ".updateListItems(title, items) \n    Replace the contents of the specified ListBox with the new values.      .removeListItem(title, item) \n    Remove the specified item from the  specified ListBox.      from appJar import gui\ndef press(btn):\n    items = app.getListItems( list )\n    if len(items)  0:\n        app.removeListItem( list , items[0])\n\napp=gui()\napp.setFont(20)\napp.addListBox( list , [ apple ,  orange ,  pear ,  kiwi ])\napp.addButton( press ,  press)\napp.go()    .clearListBox(title) \n    Removes all items from the specified ListBox.      .setListBoxRows(title) \n    Sets how many rows to display in the specified ListBox.      .setListBoxMulti(list, multi=True) \n    Configures whether the specified ListBox is single or multi select.      .selectListItem(title, item) \n    Selects the specified item in the specified ListBox.      .setListItemBg(title, item, colour)     .setListItemFg(title, item, colour)  .setListItemAtPosBg(title, item, colour)     .setListItemAtPosFg(title, item, colour) \n    Sets the background or foreground colours the specified ListBox item. \n    Can either specify a named item (will update all with that name) or the position of an item.",
            "title": "Set ListBoxes"
        },
        {
            "location": "/pythonWidgets/#get-listboxes",
            "text": ".getListItems(title) \n    Gets all of the selected items from the specified ListBox.      .getAllListItems(title) \n    Gets all of the items from the specified ListBox.",
            "title": "Get ListBoxes"
        },
        {
            "location": "/pythonWidgets/#scale",
            "text": "A slider, that has a minimum   maximum value.        from appJar import gui\n\napp=gui()\napp.setFont(20)\napp.addLabelScale( scale )\napp.go()",
            "title": "Scale"
        },
        {
            "location": "/pythonWidgets/#add-scales",
            "text": ".addScale(title) \n    Adds a horizontal scale, with a default range between 0 and 100.",
            "title": "Add Scales"
        },
        {
            "location": "/pythonWidgets/#set-scales",
            "text": ".setScale(title, pos) \n    Sets the selected pos for the specified Scale.      .setScaleRange(title from, to, curr=None) \n    Allows you to change the range available in the Scale. \n    If  curr  is provided, then the Scale will be set to that value.      .showScaleIntervals(title, intervals) \n    Configures the Scale to show interval labels along its length.        .showScaleValue(title, show=True) \n    Configures the Scale to show the currently selected value.        .setScaleHorizontal(title)     .setScaleVertical(title) \n    Changes the Scale's orientation to the specified value.          .setScaleWidth(title, width)     .setScaleLength(title, length) \n    Sets a width/length for the scale's slider.      .setScaleFunction(title, func) \n    Sets a function to call, each time the scale is changed. \n    The function must take one parameter, which will be populated with the scale's title.",
            "title": "Set Scales"
        },
        {
            "location": "/pythonWidgets/#get-scales",
            "text": ".getScale(title) \n    Gets the currently selected value from the scale.",
            "title": "Get Scales"
        },
        {
            "location": "/pythonWidgets/#message",
            "text": "Similar to a Label, except it will wrap the text over multiple lines.        from appJar import gui\n\napp=gui()\napp.setFont(12)\napp.addMessage( mess ,  You can put a lot of text in this widget.\nThe text will be wrapped over multiple lines.\nIt's not possible to apply different styles to different words. )\napp.go()",
            "title": "Message"
        },
        {
            "location": "/pythonWidgets/#add-messages",
            "text": ".addMessage(title, text) \n    Adds a Message widget, with the specified text.      .addEmptyMessage(title) \n    Adds an empty Message widget.",
            "title": "Add Messages"
        },
        {
            "location": "/pythonWidgets/#set-messages",
            "text": ".clearMessage(title) \n    Clears the specified Message widget.      .setMessage(title, text) \n    Sets the contents of the specified Message widget, to the specified text.",
            "title": "Set Messages"
        },
        {
            "location": "/pythonWidgets/#textarea",
            "text": "Similar to an Entry box, but allows you to type text over multiple lines.        from appJar import gui\n\napp=gui()\napp.addTextArea( t1 )\napp.go()",
            "title": "TextArea"
        },
        {
            "location": "/pythonWidgets/#add-textareas",
            "text": ".addTextArea(title) \n    Adds an empty TextArea, with the specified title.      .addScrolledTextArea(title) \n    Adds a scrollable TextArea with the specified title.",
            "title": "Add TextAreas"
        },
        {
            "location": "/pythonWidgets/#set-textareas",
            "text": ".setTextArea(title, text) \n    Changes the contents of the specified TextArea, to the specified text.      .clearTextArea(title) \n    Clears the contents of the specified TextArea.",
            "title": "Set TextAreas"
        },
        {
            "location": "/pythonWidgets/#get-textareas",
            "text": ".getTextArea(title) \n    Gets the contents of the specified TextArea.",
            "title": "Get TextAreas"
        },
        {
            "location": "/pythonWidgets/#meter",
            "text": "Various styles of progress meter:",
            "title": "Meter"
        },
        {
            "location": "/pythonWidgets/#meter_1",
            "text": "A simple meter for showing progress from 0% to 100%.",
            "title": "Meter"
        },
        {
            "location": "/pythonWidgets/#splitmeter",
            "text": "A possesion style meter, showing percentages on either side.",
            "title": "SplitMeter"
        },
        {
            "location": "/pythonWidgets/#dualmeter",
            "text": "Two separate meters, expanding out from the middle.      from appJar import gui\n\napp=gui()\napp.addMeter( progress )\napp.setMeterFill( progress ,  blue )\napp.go()",
            "title": "DualMeter"
        },
        {
            "location": "/pythonWidgets/#add-meters",
            "text": "addMeter(name)     .addSplitMeter(name)      .addDualMeter(name) \n    Adds a meter with the specified name, of the specified type..",
            "title": "Add Meters"
        },
        {
            "location": "/pythonWidgets/#set-meters",
            "text": "setMeter(name, value, text=None) \n    Changes the specified meter to the specified value. \n    For  Meter     SplitMeter should be a value between 0 and 100. \n    For  DualMeter  should be a list of two values, each between 0 and 100.      setMeterFill(name, colour) \n    Changes the fill colour of the specified meter. \n    For  SplitMeter     DualMeter should be a list of two colours.",
            "title": "Set Meters"
        },
        {
            "location": "/pythonWidgets/#get-meters",
            "text": "getMeter(name) \n    Gets the value of the specified meter. \n    As meters convert their data to a value between 0 and 1, this will return a list of two values:  (0.45, '45 %')",
            "title": "Get Meters"
        },
        {
            "location": "/pythonWidgets/#background-processing",
            "text": "Meters are designed to show progress over time. \nOne common solution is to register a function that is constantly updating a meter. \nThis should then be monitoring/updating a global variable:    def updateMeter():\n    app.setMeter( progress , percentComplete)\n\n# schedue function to be called regularly\napp.registerEvent(updateMeter)",
            "title": "Background Processing"
        },
        {
            "location": "/pythonWidgets/#properties",
            "text": "A compound widget that shows multiple CheckButtons linked to a dictionary. \nNote, dictionaries have no order, so when added as a dictionary, the items will be automatically sorted.      from appJar import gui\n\ntoppings={ Cheese :False,  Tomato :False,  Bacon :False,\n             Corn :False,  Mushroom :False}\n\napp=gui()\napp.setBg( lightBlue )\napp.setFont(20)\napp.addProperties( Toppings , toppings)\napp.setProperty( Toppings ,  Pepper )\napp.go()",
            "title": "Properties"
        },
        {
            "location": "/pythonWidgets/#add-properties",
            "text": "addProperties(title, values) \n    Creates a new Properties widget, with the specified title. \n    If values is populated, then the dictionary items will be added to the widget.",
            "title": "Add Properties"
        },
        {
            "location": "/pythonWidgets/#set-properties",
            "text": "setProperties(title, props) \n    Adds the dictionary of properties to the widget. \n    If any of them already exist, they will be updated.      setProperty(title, prop, value=False) \n    Sets the named property to the specified value. \n    If it doesn't exist, it will be added first, at the end of the widget.      deleteProperty(title, prop) \n    Deletes the named property from the widget.",
            "title": "Set Properties"
        },
        {
            "location": "/pythonWidgets/#get-properties",
            "text": "getProperties(title) \n    Gets a dictionary of the all items in the Properties widget.      getProperty(title, prop) \n    Gets the value of the named property.",
            "title": "Get Properties"
        },
        {
            "location": "/pythonWidgets/#examples",
            "text": "It's possible to put Properties into ToggleFrames, and also set a Function to listen for any changes.       from appJar import gui\n\ndef changed(props):\n    print( Changed , props)\n\ntoppings={ Cheese :False,  Tomato :False,  Bacon :False,\n             Corn :False,  Mushroom :False}\n\napp=gui()\napp.setBg( lightBlue )\napp.setFont(20)\n\napp.startToggleFrame( Toppings )\napp.addProperties( Toppings , toppings)\napp.setPropertiesFunction( Toppings , changed)\napp.stopToggleFrame()\n\napp.go()",
            "title": "Examples"
        },
        {
            "location": "/pythonWidgets/#separator",
            "text": "Useful for indicating separation between widgets. \nWill draw a horizontal/vertical line spanning the cell.      from appJar import gui\n\napp=gui()\napp.setBg( lightBlue )\napp.addHorizontalSeparator(0,0,4, colour= red )\napp.addVerticalSeparator(1,0, colour= red )\napp.addVerticalSeparator(1,1, colour= red )\napp.addVerticalSeparator(1,2, colour= red )\napp.addVerticalSeparator(1,3, colour= red )\napp.addHorizontalSeparator(2,0,4, colour= red )\napp.go()",
            "title": "Separator"
        },
        {
            "location": "/pythonWidgets/#add-seperators",
            "text": ".addHorizontalSeparator(colour=None)     .addVerticalSeparator(colour=None) \n    Adds a separator (a horizontal or vertical line) spanning the cell. \n    An optional colour can be passed in, to set a colour for the separator.",
            "title": "Add Seperators"
        },
        {
            "location": "/pythonWidgets/#linkweblink",
            "text": "Clickable text to call a function or launch a URL      from appJar import gui\ndef press(link):\n    app.infoBox( Info ,  You clicked the link! )\n\napp=gui()\napp.setFont(20)\napp.addLink( Click me , press)\napp.addWebLink( appJar.info ,  http://appJar.info )\napp.go()",
            "title": "Link/WebLink"
        },
        {
            "location": "/pythonWidgets/#add-links",
            "text": ".addLink(title, func) \n    Adds a  hyperlink , that when clicked, will call the specified function.      .addWebLink(title, page) \n    Adds a  hyperlink , that when clicked, will launch the default browser, and load the specified page. \n    It must be a fully formed link, including  http://",
            "title": "Add Links"
        },
        {
            "location": "/pythonWidgets/#grip",
            "text": "Clickable icon to drag the window around.        from appJar import gui\n\napp=gui()\napp.setFont(20)\napp.setBg( lightBlue )\n\napp.addLabel( l1 ,  Move me around... , 0, 0)\napp.addGrip(0,1)\napp.addSeparator(1,0,2, colour= red )\napp.go()",
            "title": "Grip"
        },
        {
            "location": "/pythonWidgets/#add-grips",
            "text": ".addGrip() \n    Adds a simple grip icon. \n    The mouse pointer changes over the grip, and a ToolTip will be shown. \n    The size and image can't be changed.",
            "title": "Add Grips"
        },
        {
            "location": "/pythonWidgets/#datepicker",
            "text": "A widget to capture a date - will handle presenting accurate drop-downs, and return a date.      from appJar import gui\n\ndef showDate(btn):\n    print(app.getDatePicker( dp ))\n\n    app=gui()\n    app.addDatePicker( dp )\n    app.addButton( GET , showDate)\n    app.setDatePickerRange( dp , 1900, 2100)\n    app.setDatePicker( dp )\n    app.go()",
            "title": "DatePicker"
        },
        {
            "location": "/pythonWidgets/#add-datepickers",
            "text": ".addDatePicker(title) \n    Create a DatePicker, with a range from 1/1/1970 to 31/12/2020",
            "title": "Add DatePickers"
        },
        {
            "location": "/pythonWidgets/#set-datepickers",
            "text": ".setDatePicker(title, date=None) \n    Will set the specified DatePicker to the specified date, or current date if no date is supplied.      .setDatePickerRange(title, startYear, endYear=None) \n    Set the range for the named DatePicker. \n    If endYear is None, the current Year will be used.",
            "title": "Set DatePickers"
        },
        {
            "location": "/pythonWidgets/#get-datepickers",
            "text": ".getDatePicker(title) \n    Will return the currently selected date.",
            "title": "Get DatePickers"
        },
        {
            "location": "/pythonImages/",
            "text": "Images\n\n\n\n\n  \n\n\nDefault image support in appJar assumes no extra libraries. That means it should only support \n.GIF\n and \n.PPM\n images.\n\nHowever, code is included to allow the use of \n.PNG\n and \n.JPG\n files. appJar will convert these to \n.GIF\n files, before loading.\n\nConverting image files is \nSLOW\n, so it's best to stick to \n.GIF\n files!  \n\n\nGetting the path for images right can be \nTRICKY\n\nIt's therefore best to put images in the same folder as your Python code.\n\nOr, create an image folder and set it using the \n.setImageLocation(location)\n function.  \n\n\nAdd Images\n\n\n\n\n.addImage(title, file)\n\n    Adding an image is exactly the same as adding any other widget.\n\n    Simply give the image a title, and pass the filename.\n\n    appJar will confirm the file is valid, and will also check the file contains the type specified.\n\n    If an animated \n.GIF\n is found, then it will be animated within the GUI.  \n\n\n\n\napp.startLabelFrame(\nSimple\n, 0, 0)\napp.addImage(\nsimple\n, \nballoons.gif\n)\napp.stopLabelFrame()\n\n\n\n\n\n\n\n\n.addImageData(title, imgData)\n\n    As above, but receives raw image data.\n\n    Currently only supports base64 encoded GIF images.  \n\n\n\n\n\n\n.setImageLocation(location)\n\n    Set a folder for image files.\n\n    This will be put before the names of any image files used.  \n\n\n\n\n\n\nChange Images\n\n\n\n\n\n\n.setImage(title, image)\n \n \n.setImageData(title, imgData)\n\n    This will replace the existing image with the new one.\n\n    If the image has the same path, it will not be changed.\n\n    If imgData, will always be reloaded.  \n\n\n\n\n\n\n.reloadImage(title, image)\n \n \n.reloadImageData(title, imgData)\n\n    This will replace the existing image with the new one.\n\n    It will force an image reload, even if the file name hasn't changed.\n\n    Useful if an outside agency modifies the image file.  \n\n\n\n\n\n\ndef changePic(btn):\n    if btn == \nReload\n:\n        app.reloadImage(\nreload\n, \nballoons.gif\n)\n\napp.startLabelFrame(\nReload\n, 1, 1)\napp.setSticky(\new\n)\napp.addImage(\nreload\n, \nballoons.gif\n)\napp.addButton(\nReload\n, changePic)\napp.stopLabelFrame()\n\n\n\n\n\n\n.setImageFunction(title, function)\n\n    This will set a function to call when the image is clicked.  \n\n\n\n\ndef changePic(btn):\n    if btn == \nclickme\n:\n        global clicked\n        if clicked: app.setImage(\nclickme\n, \nballoons.gif\n)\n        else: app.setImage(\nclickme\n, \nballoons2.png\n)\n        clicked = not clicked\n\napp.startLabelFrame(\nClick Me\n, 0, 2)\napp.addImage(\nclickme\n, \nballoons.gif\n)\napp.setImageFunction(\nclickme\n, changePic)\napp.stopLabelFrame()\n\n\n\n\n\n\n.setImageMouseOver(title, image)\n\n    Set an image to show, instead of the stored image, while the mouse is over this widget.  \n\n\n\n\napp.startLabelFrame(\nMouse Over\n, 0, 1)\napp.addImage(\nmo_1\n, \nballoons.gif\n)\napp.setImageMouseOver(\nmo_1\n, \nballoons2.png\n)\napp.stopLabelFrame()\n\n\n\n\n\n\n\n\n.setImageSize(title, width, height)\n\n    This will set the size of the container for the image, cropping anything that doesn't fit.  \n\n\n\n\n\n\n.zoomImage(title, mod)\n\n    This will attempt to change the size of the image.\n\n    It's very rudimentary, and usually doesn't look good - but is fun to play around with (try adding a slider under an image...)\n\n    Negative values will shrink the image, positive will enlarge the image.  \n\n\n\n\n\n\ndef changePic(btn):\n    if btn == \nZoom\n:\n        app.zoomImage(\nZoom\n, int(app.getSpinBox(\nZoom\n)))\n\n\n\n\n\n\n.shrinkImage(title, mod)\n \n \n.growImage(title, mod)\n\n    These are wrappers for the above function, simply causing the image to shrink or grow accordingly.\n\n\n\n\nChange Image Animation\n\n\nIf an image is animated, it's possible to control it.\n\n\n\n\n\n\n.setAnimationSpeed(title, speed)\n\n    This will change the speed an image is animated at.\n\n\n\n\n\n\n.stopAnimation(title)\n \n \n.startAnimation(title)\n\n    These will start and stop the animation of an image.\n\n\n\n\n\n\ndef changePic(btn):\n    if btn == \nStop\n:\n        global animated\n        if animated:\n            app.stopAnimation(\nanimated\n)\n            app.setButton(\nStop\n, \nStart\n)\n        else:\n            app.startAnimation(\nanimated\n)\n            app.setButton(\nStop\n, \nStop\n)\n        animated = not animated\n\napp.startLabelFrame(\nAnimated\n, 1, 2)\napp.setSticky(\new\n)\napp.addImage(\nanimated\n, \nanimated_balloons.gif\n)\napp.addButton(\nStop\n, changePic)\napp.stopLabelFrame()\n\n\n\n\nSet Background Images\n\n\nIt's also possible to add a background image to your GUI.\n\nIf you have lots of grouped widgets, this can look quite \nUGLY\n, as all of the widgets are drawn on top.  \n\n\n\n\n\n\n.setBgImage(image)\n\n    Set the image for the background.\n\n\n\n\n\n\n.removeBgImage(image)\n\n    Remove the image form the background.\n\n\n\n\n\n\nImage Caching\n\n\nappJar employs an image caching mechanism, to speed up image processing.\n\nEvery time an image is loaded, it's added to the cache.\n\nThe next time an image of the same filename is referenced, it will be loaded from the cache.\n\nThis speeds up processes such as mouse-overs, or setting images back-and-forth.  \n\n\nAnimatd images also have their own internal cache, storing each version of the image.  \n\n\nappJar attempts to preload mouse over images and animated images, to improve smoothness.  \n\n\nIf there's ever a need to clear the image cache (maybe reduce memory footprint), call: \n.clearImageCache()",
            "title": "Images"
        },
        {
            "location": "/pythonImages/#images",
            "text": "Default image support in appJar assumes no extra libraries. That means it should only support  .GIF  and  .PPM  images. \nHowever, code is included to allow the use of  .PNG  and  .JPG  files. appJar will convert these to  .GIF  files, before loading. \nConverting image files is  SLOW , so it's best to stick to  .GIF  files!    Getting the path for images right can be  TRICKY \nIt's therefore best to put images in the same folder as your Python code. \nOr, create an image folder and set it using the  .setImageLocation(location)  function.",
            "title": "Images"
        },
        {
            "location": "/pythonImages/#add-images",
            "text": ".addImage(title, file) \n    Adding an image is exactly the same as adding any other widget. \n    Simply give the image a title, and pass the filename. \n    appJar will confirm the file is valid, and will also check the file contains the type specified. \n    If an animated  .GIF  is found, then it will be animated within the GUI.     app.startLabelFrame( Simple , 0, 0)\napp.addImage( simple ,  balloons.gif )\napp.stopLabelFrame()    .addImageData(title, imgData) \n    As above, but receives raw image data. \n    Currently only supports base64 encoded GIF images.      .setImageLocation(location) \n    Set a folder for image files. \n    This will be put before the names of any image files used.",
            "title": "Add Images"
        },
        {
            "location": "/pythonImages/#change-images",
            "text": ".setImage(title, image)     .setImageData(title, imgData) \n    This will replace the existing image with the new one. \n    If the image has the same path, it will not be changed. \n    If imgData, will always be reloaded.      .reloadImage(title, image)     .reloadImageData(title, imgData) \n    This will replace the existing image with the new one. \n    It will force an image reload, even if the file name hasn't changed. \n    Useful if an outside agency modifies the image file.      def changePic(btn):\n    if btn ==  Reload :\n        app.reloadImage( reload ,  balloons.gif )\n\napp.startLabelFrame( Reload , 1, 1)\napp.setSticky( ew )\napp.addImage( reload ,  balloons.gif )\napp.addButton( Reload , changePic)\napp.stopLabelFrame()   .setImageFunction(title, function) \n    This will set a function to call when the image is clicked.     def changePic(btn):\n    if btn ==  clickme :\n        global clicked\n        if clicked: app.setImage( clickme ,  balloons.gif )\n        else: app.setImage( clickme ,  balloons2.png )\n        clicked = not clicked\n\napp.startLabelFrame( Click Me , 0, 2)\napp.addImage( clickme ,  balloons.gif )\napp.setImageFunction( clickme , changePic)\napp.stopLabelFrame()   .setImageMouseOver(title, image) \n    Set an image to show, instead of the stored image, while the mouse is over this widget.     app.startLabelFrame( Mouse Over , 0, 1)\napp.addImage( mo_1 ,  balloons.gif )\napp.setImageMouseOver( mo_1 ,  balloons2.png )\napp.stopLabelFrame()    .setImageSize(title, width, height) \n    This will set the size of the container for the image, cropping anything that doesn't fit.      .zoomImage(title, mod) \n    This will attempt to change the size of the image. \n    It's very rudimentary, and usually doesn't look good - but is fun to play around with (try adding a slider under an image...) \n    Negative values will shrink the image, positive will enlarge the image.      def changePic(btn):\n    if btn ==  Zoom :\n        app.zoomImage( Zoom , int(app.getSpinBox( Zoom )))   .shrinkImage(title, mod)     .growImage(title, mod) \n    These are wrappers for the above function, simply causing the image to shrink or grow accordingly.",
            "title": "Change Images"
        },
        {
            "location": "/pythonImages/#change-image-animation",
            "text": "If an image is animated, it's possible to control it.    .setAnimationSpeed(title, speed) \n    This will change the speed an image is animated at.    .stopAnimation(title)     .startAnimation(title) \n    These will start and stop the animation of an image.    def changePic(btn):\n    if btn ==  Stop :\n        global animated\n        if animated:\n            app.stopAnimation( animated )\n            app.setButton( Stop ,  Start )\n        else:\n            app.startAnimation( animated )\n            app.setButton( Stop ,  Stop )\n        animated = not animated\n\napp.startLabelFrame( Animated , 1, 2)\napp.setSticky( ew )\napp.addImage( animated ,  animated_balloons.gif )\napp.addButton( Stop , changePic)\napp.stopLabelFrame()",
            "title": "Change Image Animation"
        },
        {
            "location": "/pythonImages/#set-background-images",
            "text": "It's also possible to add a background image to your GUI. \nIf you have lots of grouped widgets, this can look quite  UGLY , as all of the widgets are drawn on top.      .setBgImage(image) \n    Set the image for the background.    .removeBgImage(image) \n    Remove the image form the background.",
            "title": "Set Background Images"
        },
        {
            "location": "/pythonImages/#image-caching",
            "text": "appJar employs an image caching mechanism, to speed up image processing. \nEvery time an image is loaded, it's added to the cache. \nThe next time an image of the same filename is referenced, it will be loaded from the cache. \nThis speeds up processes such as mouse-overs, or setting images back-and-forth.    Animatd images also have their own internal cache, storing each version of the image.    appJar attempts to preload mouse over images and animated images, to improve smoothness.    If there's ever a need to clear the image cache (maybe reduce memory footprint), call:  .clearImageCache()",
            "title": "Image Caching"
        },
        {
            "location": "/pythonSound/",
            "text": "Sound\n\n\n\n\nSound is only supported in Windows, using the Winsound API.\n\nTherefore, only \n.WAV\n files will work.\n\n\nPlaying Sound Files\n\n\n\n\n\n\n\n\n.playSound(sound, wait=False)\n\n    Play the named sound file.\n\n    By default, the sound is played asynchronously, meaning the function will return immediately, even though the sound hasn't finished playing.\n\n    It is possible to override this, by setting wait to True. This is not recommended though, as the GUI will become unresponsive.\n\n\n\n\n\n\n.stopSound()\n\n    This will stop whatever sound is currently being played.\n\n\n\n\n\n\n.loopSound(sound)\n\n    This will play the named sound in a loop.\n\n\n\n\n\n\n.setSoundLocation(location)\n\n    Set a folder for the sound files.\n\n    This will be put before the names of any sound files used.  \n\n\n\n\n\n\nPlaying Built-In Sounds\n\n\n\n\n\n\n\n\n.soundError()\n\n\nThis will sound a simple error beep.\n\n\n\n\n\n\n.soundWarning()\n\n\nThis will sound a simple warning beep.\n\n\n\n\n\n\nPlaying Musical Notes\n\n\n\n\n\n\n\n\n.playNote(note, duration=200)\n\n\nSupport is built in for playing musical notes, using winsound.\nThe note can be a numeric frequency, or a String note.\nThe duration can be a number in milliseconds, or a String duration.\n\n\nOver 50 String notes are available, such as:\n\n\n\n\nf#1 = 46\n\n\nb7 = 3951\n\n\ng9 = 12543  \n\n\n\n\nThe following String durations are supported:\n\n\n\n\nBREVE = 2000\n\n\nSEMIBREVE = 1000\n\n\nMINIM = 500\n\n\nCROTCHET = 250\n\n\nQUAVER = 125\n\n\nSEMIQUAVER = 63\n\n\nDEMISEMIQUAVER = 32\n\n\nHEMIDEMISEMIQUAVER = 16\n\n\n\n\nThese can be accessed through the variables \ngui.NOTES\n and \ngui.DURATIONS",
            "title": "Sounds"
        },
        {
            "location": "/pythonSound/#sound",
            "text": "Sound is only supported in Windows, using the Winsound API. \nTherefore, only  .WAV  files will work.",
            "title": "Sound"
        },
        {
            "location": "/pythonSound/#playing-sound-files",
            "text": ".playSound(sound, wait=False) \n    Play the named sound file. \n    By default, the sound is played asynchronously, meaning the function will return immediately, even though the sound hasn't finished playing. \n    It is possible to override this, by setting wait to True. This is not recommended though, as the GUI will become unresponsive.    .stopSound() \n    This will stop whatever sound is currently being played.    .loopSound(sound) \n    This will play the named sound in a loop.    .setSoundLocation(location) \n    Set a folder for the sound files. \n    This will be put before the names of any sound files used.",
            "title": "Playing Sound Files"
        },
        {
            "location": "/pythonSound/#playing-built-in-sounds",
            "text": ".soundError()  This will sound a simple error beep.    .soundWarning()  This will sound a simple warning beep.",
            "title": "Playing Built-In Sounds"
        },
        {
            "location": "/pythonSound/#playing-musical-notes",
            "text": ".playNote(note, duration=200)  Support is built in for playing musical notes, using winsound.\nThe note can be a numeric frequency, or a String note.\nThe duration can be a number in milliseconds, or a String duration.  Over 50 String notes are available, such as:   f#1 = 46  b7 = 3951  g9 = 12543     The following String durations are supported:   BREVE = 2000  SEMIBREVE = 1000  MINIM = 500  CROTCHET = 250  QUAVER = 125  SEMIQUAVER = 63  DEMISEMIQUAVER = 32  HEMIDEMISEMIQUAVER = 16   These can be accessed through the variables  gui.NOTES  and  gui.DURATIONS",
            "title": "Playing Musical Notes"
        },
        {
            "location": "/pythonBars/",
            "text": "Toolbars, Menubars \n Statusbars\n\n\n\n\nToolbars and Menubars are features common to most GUIs, you'll be used to seeing them along the top of apps, such as MS Word.\n\nStatusbars are also useful features, they allow you to show information about what's going on in a GUI, usually along the bottom of the app.  \n\n\nToolbar\n\n\n\n\nToolbars (sometimes known as ribbons) appear across the top of a GUI.\n\nThey offer a series of buttons to click, which can be used to change settings/functionality in a GUI.\n\n  \n\n\ntools = [\nABOUT\n, \nREFRESH\n, \nOPEN\n, \nCLOSE\n, \nSAVE\n,\n        \nNEW\n, \nSETTINGS\n, \nPRINT\n, \nSEARCH\n, \nUNDO\n,\n        \nREDO\n, \nPREFERENCES\n, \nHOME\n, \nHELP\n, \nCALENDAR\n,\n        \nWEB\n, \nOFF\n]\n\napp.addToolbar(tools, tbFunc, findIcon=True)\n\n\n\n\nCreate Toolbars\n\n\n\n\n.addToolbar(names, funcs, findIcon=False)\n\n    Will add a list of buttons along the top, in a toolbar. Each button will call the corresponding function.\n\n    If only one function is supplied, they will all call the same function, providing the buttons name as a parameter.\n\n    A set of icons is available, if \nfindIcon\n is set to True, then appJar will attempt to fins an icon for each button.  \n\n\n\n\nSet Toolbars\n\n\n\n\n\n\n.setToolbarIcon(name, icon)\n\n    Will set an icon for the corresponding button in the toolbar.\n\n    Use the name of any of the icons in the resource folder (without the folder or file extension).  \n\n\n\n\n\n\n.setToolbarImage(name, image)\n\n    Will set an image for the corresponding button in the toolbar.  \n\n\n\n\n\n\n.setToolbarEnabled()\n \n \n.setToolbarDisabled()\n\n    Will enable/disable all buttons on the toolbar.  \n\n\n\n\n\n\n.setToolbarButtonEnabled(name)\n \n \n.setToolbarButtonDisabled(name)\n\n    Will enable/disable the named toolbar button.  \n\n\n\n\n\n\n.showToolbar()\n \n \n.hideToolbar()\n\n    Will show/hide the toolbar.  \n\n\n\n\n\n\nMenubar\n\n\n\n\nAdds a standard Menubar along the top of the GUI.\n\nOn Windows/Linux a menubar will only be shown, once the first menu has been added.\n\nOn Mac, a menubar is always present.\n\nMenubars are made up of a series of menus, each conaining a list of names.\n\nThese names can be menu-items, radio buttons, check boxes, separators, or sub-menus.  \n\n\nCreate Menus\n\n\n\n\n.addMenuList(menu, names, functions)\n\n    Will create a new menu, with the specified title, containing the list of names.\n\n    Pass a single function - all names will call that function, passing their name.\n\n    Or a list of functions (the same length as the names), each menu will call the corresponding function.\n\n    If a name is \n-\n, then a separator will be added to the menu.  \n\n\n\n\n    \n\n\nfileMenus = [\nOpen\n, \nSave\n, \nSave as...\n, \n-\n, \nExport\n, \nPrint\n, \n-\n, \nClose\n]\napp.addMenuList(\nFile\n, fileMenus, menuPress)\n\n\n\n\n\n\n\n\n.createMenu(menu, tearable=False)\n\n    Will create a new, empty menu, to add menu-items to.\n\n\n\n\n\n\n.addMenuItem(menu, name, func=None, shortcut=None, underline=-1)\n\n    Add a menu-item to the named menu, with the specified function.\n\n    If the named menu does not exist, it will be automatically created.\n\n    If the name is \n-\n, then a separator will be added to the menu.  \n\n\n\n\n\n\n.addMenuSeparator(menu)\n\n    Add a separator to the named menu.  \n\n\n\n\n\n\n.addMenuCheckBox(menu, name, function=None, shortcut=None, underline=-1)\n\n    Add a check box, to the named menu, with the specified name.  \n\n\n\n\n\n\n.addMenuRadioButton(menu, name, value, function=None, shortcut=None, underline=-1)\n\n    Add a radio button, to the named menu, grouped by name, with the specified value.  \n\n\n\n\n\n\n\n\napp.createMenu(\nConfig\n)\n\nfor i in range(5):\n    app.addMenuRadioButton(\nConfig\n, \nfont\n, \n1\n + str(i), menuPress)\n\napp.addMenuSeparator(\nConfig\n)\n\nfor i in range(5):\n    app.addMenuCheckBox(\nConfig\n, \nSize 1\n + str(i), menuPress)\n\n\n\n\n\n\n.addSubMenu(menu, subMenu)\n\n    Adds a sub-menu to the specified menu.\n\n    Then add menu-items to this menu (using its name).  \n\n\n\n\n\n\napp.createMenu(\nConfig\n)\napp.addSubMenu(\nConfig\n, \nFont Size\n)\nfor i in range(5):\n    app.addMenuRadioButton(\nFont Size\n, \nfont\n, \n1\n + str(i), menuPress)\n\n\n\n\n\n\n\n.addMenu(menu, function, shortcut=None, underline=-1)\n\n    Adds a single menu, with no list of menu-items,  that will call the specified function.  \n\n\n\n\nSet Menus\n\n\n\n\n\n\n.setMenuCheckBox(menu, name)\n\n    Inverts the specified check box, in the named menu.\n\n\n\n\n\n\n.setMenuRadioButton(menu, name, value)\n\n    Selects the specified value, of the specified radio button, in the named menu.\n\n\n\n\n\n\n.setMenuImage(menu, name, image, align='text')\n\n    Will set the specified image for the specified menu-item.  \n\n\n\n\n\n\n.setMenuIcon(menu, name, icon, align='text')\n\n    Will set the specified icon for the specified menu-item.  \n\n\n\n\n\n\n.disableMenuItem(menu, name)\n \n \n.enableMenuItem(menu, name)\n\n    Will enable/disable the specified menu name.  \n\n\n\n\n\n\n.disableMenu(menu)\n \n \n.enableMenu(menu)\n\n    Will disable/enable the specified menu.  \n\n\n\n\n\n\n.disableMenubar()\n \n \n.enableMenubar()\n\n    Will disable/enable all menus.\n\n    NB. currently doesn't disable entries in default Mac menus.  \n\n\n\n\n\n\nGet Menus\n\n\n\n\n\n\n.getMenuCheckBox(menu, name)\n\n    Get the value of the specified check box, from the named menu.\n\n    Returns True or False.  \n\n\n\n\n\n\n.getMenuRadioButton(menu, name)\n\n    Get the value of the specified radio button, from the named menu.\n\n    Returns the name of the checked radio button, for this group.  \n\n\n\n\n\n\n\n\nExtra Features:\n\n\n\n\n\n\nshortcut\n These are keyboard shortcuts to call a menu-item.\n\n    These should always be a combination of \nspecial keys\n and a \nregular key\n, separated by dashes.\n\n    e.g. \n\"Control-s\"\n or \n\"Control-Shift-z\"\n\n    The following \nspecial keys\n are available: \nControl\n, \nOption\n, \nAlt\n, \nShift\n, \nCommand\n, \nMeta\n  \n\n\n\n\n\n\nunderline\n If set to an Integer, the corresponding character will be underlined.  \n\n\n\n\n\n\ntearable\n If this is set to True, it's possible to undock the menu.  \n\n\n\n\n\n\n\n\nPlatform Specific/Custom Menus\n\n\nIt's possible to interact with menus that are specific to particular platforms, or prebuilt for specific purposes.\n\nSimply use the menu names given below when adding menu-items to a menu.  \n\n\n\n\n\n\nGeneric\n  \n\n\n\n\n\n\nRight-click Menu\n\n    Call \n.createRightClickMenu(menu, showInBar=False)\n to create an empty \nright-click menu\n \n\n    If \nshowInBar\n is set to \nTrue\n, the Menu will also appear in the topLevel Menubar.\n\n    The right-click menu can be populated the same way as a regular menu.  \n\n\nTo link the \nright-click menu\n to a widget, call \n.setXXXRightClick(widgetName, menu)\n  \n\n\n\n\n\n\nEdit Menu\n - \nEDIT\n provides a right-click, \ncut \n paste\n menu automatically linked to all \ntext\n, \nentry\n \n \noption boxes\n.\n\n    Call \n.addMenuEdit(inMenuBar=False)\n to enable the \nEdit\n menu.\n\n    Set the parameter to True, to also show it in the menu bar.\n\n    This menu does its best to show the appropriate options, for all situations - but doesn't know when you can't \nredo\n an action.  \n\n\n\n\n\n\n\n\n\n\nWindows\n  \n\n\n\n\nSystem Menu\n - \nWIN_SYS\n accessed by clicking the icon in the top left corner of the GUI.  \n\n\n\n\n\n\n\n\nMac\n - there are three \ndefault\n menus, each containing platform specific menus-item. \n\n    There are also a couple of menu-items the user can/should provide.  \n\n\n\n\nApplication Menu\n - \nMAC_APP\n after the Apple logo (\uf8ff), usuaully called \nPython\n.\n\n    This menu is always present, and connot be renamed - no matter how much I wish it could!\n\n    Call \n.addMenuPreferences(function)\n to enable the \nPreferences\n menu-item, within the \nApplication Menu\n.  \n\n\nWindow Menu\n - \nMAC_WIN\n contains menu-items related to windows. \n\n    To access this menu, you must first call \n.addMenuWindow()\n  \n\n\nHelp Menu\n - \nMAC_HELP\n provides a \nSearch\n menu-item \n\n    To access this menu, you must first call \n.addMenuHelp(function)\n, passing the function to call for the default \nPython Help\n menu-item.  \n\n\n\n\n\n\n\n\nLinux\n  \n\n\n\n\nn/a  \n\n\n\n\n\n\n\n\nStatusbar\n\n\n\n\nAdds a statusbar along the bottom of the GUI.\nThis can be used for easy debugging, as info for the user, or to show current settings.  \n\n\n  \n\n\napp.addStatusbar(fields=3)\napp.setStatusbar(\nLine: 20\n, 0)\napp.setStatusbar(\nColumn: 4\n, 1)\napp.setStatusbar(\nMode: Edit\n, 2)\n\n\n\n\n  \n\n\napp.addToolbar(tools, tbFunc, True)\napp.addStatusbar(fields=3, side=\nRIGHT\n)\n# NOTE: 0 is now on the right\napp.setStatusbarWidth(50, 2)\napp.setStatusbarBg(\nred\n, 2)\napp.setStatusbarFg(\nwhite\n, 2)\n\n\n\n\nCreate Statusbars\n\n\n\n\n.addStatusbar(header=\"\", fields=1, side=None)\n\n    This turns the statusbar on, and if a header is supplied, will prepend the header before every status.\n\n    If \nfields\n is populated, it's possible to have multiple status boxes, each addressable by a number.\n\n\nside\n can be set as LEFT/RIGHT to make the fields appear from the left or right side, otherwise they will stretch equally.  \n\n\n\n\nSet Statusbars\n\n\n\n\n\n\n.setStatusbar(text, field=0)\n\n    This updates the contents of the statusbar.\n\n    Again, if a header was set when adding the statusbar, it will be prepended to the message.\n\n    If multiple fields were created, a position should be supplied to populate (starting from 0).  \n\n\n\n\n\n\n.clearStatusbar(field=0)\n\n    Clear anything displayed in the statusbar, along with any header that might be set.\n\n    If multiple fields were created, specify which one, otherwise all fields will be cleared.  \n\n\n\n\n\n\n.setStatusbarWidth(width, field=0)\n\n    Set the width of the specified statusbar field (in characters).",
            "title": "Bars"
        },
        {
            "location": "/pythonBars/#toolbars-menubars-statusbars",
            "text": "Toolbars and Menubars are features common to most GUIs, you'll be used to seeing them along the top of apps, such as MS Word. \nStatusbars are also useful features, they allow you to show information about what's going on in a GUI, usually along the bottom of the app.",
            "title": "Toolbars, Menubars &amp; Statusbars"
        },
        {
            "location": "/pythonBars/#toolbar",
            "text": "Toolbars (sometimes known as ribbons) appear across the top of a GUI. \nThey offer a series of buttons to click, which can be used to change settings/functionality in a GUI.     tools = [ ABOUT ,  REFRESH ,  OPEN ,  CLOSE ,  SAVE ,\n         NEW ,  SETTINGS ,  PRINT ,  SEARCH ,  UNDO ,\n         REDO ,  PREFERENCES ,  HOME ,  HELP ,  CALENDAR ,\n         WEB ,  OFF ]\n\napp.addToolbar(tools, tbFunc, findIcon=True)",
            "title": "Toolbar"
        },
        {
            "location": "/pythonBars/#create-toolbars",
            "text": ".addToolbar(names, funcs, findIcon=False) \n    Will add a list of buttons along the top, in a toolbar. Each button will call the corresponding function. \n    If only one function is supplied, they will all call the same function, providing the buttons name as a parameter. \n    A set of icons is available, if  findIcon  is set to True, then appJar will attempt to fins an icon for each button.",
            "title": "Create Toolbars"
        },
        {
            "location": "/pythonBars/#set-toolbars",
            "text": ".setToolbarIcon(name, icon) \n    Will set an icon for the corresponding button in the toolbar. \n    Use the name of any of the icons in the resource folder (without the folder or file extension).      .setToolbarImage(name, image) \n    Will set an image for the corresponding button in the toolbar.      .setToolbarEnabled()     .setToolbarDisabled() \n    Will enable/disable all buttons on the toolbar.      .setToolbarButtonEnabled(name)     .setToolbarButtonDisabled(name) \n    Will enable/disable the named toolbar button.      .showToolbar()     .hideToolbar() \n    Will show/hide the toolbar.",
            "title": "Set Toolbars"
        },
        {
            "location": "/pythonBars/#menubar",
            "text": "Adds a standard Menubar along the top of the GUI. \nOn Windows/Linux a menubar will only be shown, once the first menu has been added. \nOn Mac, a menubar is always present. \nMenubars are made up of a series of menus, each conaining a list of names. \nThese names can be menu-items, radio buttons, check boxes, separators, or sub-menus.",
            "title": "Menubar"
        },
        {
            "location": "/pythonBars/#create-menus",
            "text": ".addMenuList(menu, names, functions) \n    Will create a new menu, with the specified title, containing the list of names. \n    Pass a single function - all names will call that function, passing their name. \n    Or a list of functions (the same length as the names), each menu will call the corresponding function. \n    If a name is  - , then a separator will be added to the menu.           fileMenus = [ Open ,  Save ,  Save as... ,  - ,  Export ,  Print ,  - ,  Close ]\napp.addMenuList( File , fileMenus, menuPress)    .createMenu(menu, tearable=False) \n    Will create a new, empty menu, to add menu-items to.    .addMenuItem(menu, name, func=None, shortcut=None, underline=-1) \n    Add a menu-item to the named menu, with the specified function. \n    If the named menu does not exist, it will be automatically created. \n    If the name is  - , then a separator will be added to the menu.      .addMenuSeparator(menu) \n    Add a separator to the named menu.      .addMenuCheckBox(menu, name, function=None, shortcut=None, underline=-1) \n    Add a check box, to the named menu, with the specified name.      .addMenuRadioButton(menu, name, value, function=None, shortcut=None, underline=-1) \n    Add a radio button, to the named menu, grouped by name, with the specified value.       app.createMenu( Config )\n\nfor i in range(5):\n    app.addMenuRadioButton( Config ,  font ,  1  + str(i), menuPress)\n\napp.addMenuSeparator( Config )\n\nfor i in range(5):\n    app.addMenuCheckBox( Config ,  Size 1  + str(i), menuPress)   .addSubMenu(menu, subMenu) \n    Adds a sub-menu to the specified menu. \n    Then add menu-items to this menu (using its name).      app.createMenu( Config )\napp.addSubMenu( Config ,  Font Size )\nfor i in range(5):\n    app.addMenuRadioButton( Font Size ,  font ,  1  + str(i), menuPress)   .addMenu(menu, function, shortcut=None, underline=-1) \n    Adds a single menu, with no list of menu-items,  that will call the specified function.",
            "title": "Create Menus"
        },
        {
            "location": "/pythonBars/#set-menus",
            "text": ".setMenuCheckBox(menu, name) \n    Inverts the specified check box, in the named menu.    .setMenuRadioButton(menu, name, value) \n    Selects the specified value, of the specified radio button, in the named menu.    .setMenuImage(menu, name, image, align='text') \n    Will set the specified image for the specified menu-item.      .setMenuIcon(menu, name, icon, align='text') \n    Will set the specified icon for the specified menu-item.      .disableMenuItem(menu, name)     .enableMenuItem(menu, name) \n    Will enable/disable the specified menu name.      .disableMenu(menu)     .enableMenu(menu) \n    Will disable/enable the specified menu.      .disableMenubar()     .enableMenubar() \n    Will disable/enable all menus. \n    NB. currently doesn't disable entries in default Mac menus.",
            "title": "Set Menus"
        },
        {
            "location": "/pythonBars/#get-menus",
            "text": ".getMenuCheckBox(menu, name) \n    Get the value of the specified check box, from the named menu. \n    Returns True or False.      .getMenuRadioButton(menu, name) \n    Get the value of the specified radio button, from the named menu. \n    Returns the name of the checked radio button, for this group.",
            "title": "Get Menus"
        },
        {
            "location": "/pythonBars/#extra-features",
            "text": "shortcut  These are keyboard shortcuts to call a menu-item. \n    These should always be a combination of  special keys  and a  regular key , separated by dashes. \n    e.g.  \"Control-s\"  or  \"Control-Shift-z\" \n    The following  special keys  are available:  Control ,  Option ,  Alt ,  Shift ,  Command ,  Meta       underline  If set to an Integer, the corresponding character will be underlined.      tearable  If this is set to True, it's possible to undock the menu.",
            "title": "Extra Features:"
        },
        {
            "location": "/pythonBars/#platform-specificcustom-menus",
            "text": "It's possible to interact with menus that are specific to particular platforms, or prebuilt for specific purposes. \nSimply use the menu names given below when adding menu-items to a menu.      Generic       Right-click Menu \n    Call  .createRightClickMenu(menu, showInBar=False)  to create an empty  right-click menu   \n    If  showInBar  is set to  True , the Menu will also appear in the topLevel Menubar. \n    The right-click menu can be populated the same way as a regular menu.    To link the  right-click menu  to a widget, call  .setXXXRightClick(widgetName, menu)       Edit Menu  -  EDIT  provides a right-click,  cut   paste  menu automatically linked to all  text ,  entry     option boxes . \n    Call  .addMenuEdit(inMenuBar=False)  to enable the  Edit  menu. \n    Set the parameter to True, to also show it in the menu bar. \n    This menu does its best to show the appropriate options, for all situations - but doesn't know when you can't  redo  an action.        Windows      System Menu  -  WIN_SYS  accessed by clicking the icon in the top left corner of the GUI.       Mac  - there are three  default  menus, each containing platform specific menus-item.  \n    There are also a couple of menu-items the user can/should provide.     Application Menu  -  MAC_APP  after the Apple logo (\uf8ff), usuaully called  Python . \n    This menu is always present, and connot be renamed - no matter how much I wish it could! \n    Call  .addMenuPreferences(function)  to enable the  Preferences  menu-item, within the  Application Menu .    Window Menu  -  MAC_WIN  contains menu-items related to windows.  \n    To access this menu, you must first call  .addMenuWindow()     Help Menu  -  MAC_HELP  provides a  Search  menu-item  \n    To access this menu, you must first call  .addMenuHelp(function) , passing the function to call for the default  Python Help  menu-item.       Linux      n/a",
            "title": "Platform Specific/Custom Menus"
        },
        {
            "location": "/pythonBars/#statusbar",
            "text": "Adds a statusbar along the bottom of the GUI.\nThis can be used for easy debugging, as info for the user, or to show current settings.        app.addStatusbar(fields=3)\napp.setStatusbar( Line: 20 , 0)\napp.setStatusbar( Column: 4 , 1)\napp.setStatusbar( Mode: Edit , 2)      app.addToolbar(tools, tbFunc, True)\napp.addStatusbar(fields=3, side= RIGHT )\n# NOTE: 0 is now on the right\napp.setStatusbarWidth(50, 2)\napp.setStatusbarBg( red , 2)\napp.setStatusbarFg( white , 2)",
            "title": "Statusbar"
        },
        {
            "location": "/pythonBars/#create-statusbars",
            "text": ".addStatusbar(header=\"\", fields=1, side=None) \n    This turns the statusbar on, and if a header is supplied, will prepend the header before every status. \n    If  fields  is populated, it's possible to have multiple status boxes, each addressable by a number.  side  can be set as LEFT/RIGHT to make the fields appear from the left or right side, otherwise they will stretch equally.",
            "title": "Create Statusbars"
        },
        {
            "location": "/pythonBars/#set-statusbars",
            "text": ".setStatusbar(text, field=0) \n    This updates the contents of the statusbar. \n    Again, if a header was set when adding the statusbar, it will be prepended to the message. \n    If multiple fields were created, a position should be supplied to populate (starting from 0).      .clearStatusbar(field=0) \n    Clear anything displayed in the statusbar, along with any header that might be set. \n    If multiple fields were created, specify which one, otherwise all fields will be cleared.      .setStatusbarWidth(width, field=0) \n    Set the width of the specified statusbar field (in characters).",
            "title": "Set Statusbars"
        },
        {
            "location": "/pythonDialogs/",
            "text": "Pop-ups\n\n\n\n\nA number of pop-ups (aka dialogs) are available, to add a different user experience, notify the user of information, or get one off pieces of data.\n\n\nMessage Boxes\n\n\n\n\n\n\n.infoBox(title, message)\n\n    Shows a simple information message, with an OK button.\n\n\n\n\n\n\n\n\n.errorBox(title, message)\n\n    Shows a simple error message, with an OK button.\n\n\n\n\n\n\n\n\n.warningBox(title, message)\n\n    Shows a simple warning message, with an OK message.\n\n\n\n\n\n\n\n\nQuestion Boxes\n\n\n\n\n\n\n.yesNoBox(title, message)\n\n    Shows a question, with Yes/No buttons. Returns True/False.\n\n\n\n\n\n\n\n\n.questionBox(title, message)\n\n    Shows a question, with Yes/No buttons. Returns True/False.\n\n\n\n\n\n\n\n\n.okBox(title, message)\n\n    Shows a question, with OK/Cancel buttons. Returns True/False.\n\n\n\n\n\n\n\n\n.retryBox(title, message)\n\n    Shows a question, with Cancel/Retry buttons. Returns True/False.\n\n\n\n\n\n\n\n\n.textBox(title, message)\n\n    Shows a question requesting a text response. Returns a String, or None if Cancel pressed.\n\n\n\n\n\n\n\n\n.numberBox(title, message)\n\n    Shows a question requesting a numeric response. Returns a number, or None if Cancel pressed.\n\n\n\n\n\n\n\n\nFile Boxes\n\n\n\n\n\n\n.openBox(title=None, dirName=None, fileTypes=None, asFile=False)\n\n    Shows an open file dialog.  \n\n\n\n\n\nVarious parameters can be provided (although they don't work on all platforms):  \n\n\n\n\ntitle\n this will set a title for the dialog  \n\n\ndirName\n this will set a starting directory, defaults to the current working directory  \n\n\nfileTypes=[('images', '*.png'), ('images', '*.jpg')]\n\nThis will set the allowed file extensions, it should be a list of tuples. They will be grouped by the name.  \n\n\nasFile\n this will determine whether a path or actual Python file object is returned, defaults to filename   \n\n\n\n\n\n\n\n\n.saveBox()\n\n    Shows a save file dialog.  \n\n\n\n\n\n\n.directoryBox()\n\n\n\n\n\n\nOther Boxes\n\n\n\n\n.colourBox()",
            "title": "Pop-ups"
        },
        {
            "location": "/pythonDialogs/#pop-ups",
            "text": "A number of pop-ups (aka dialogs) are available, to add a different user experience, notify the user of information, or get one off pieces of data.",
            "title": "Pop-ups"
        },
        {
            "location": "/pythonDialogs/#message-boxes",
            "text": ".infoBox(title, message) \n    Shows a simple information message, with an OK button.     .errorBox(title, message) \n    Shows a simple error message, with an OK button.     .warningBox(title, message) \n    Shows a simple warning message, with an OK message.",
            "title": "Message Boxes"
        },
        {
            "location": "/pythonDialogs/#question-boxes",
            "text": ".yesNoBox(title, message) \n    Shows a question, with Yes/No buttons. Returns True/False.     .questionBox(title, message) \n    Shows a question, with Yes/No buttons. Returns True/False.     .okBox(title, message) \n    Shows a question, with OK/Cancel buttons. Returns True/False.     .retryBox(title, message) \n    Shows a question, with Cancel/Retry buttons. Returns True/False.     .textBox(title, message) \n    Shows a question requesting a text response. Returns a String, or None if Cancel pressed.     .numberBox(title, message) \n    Shows a question requesting a numeric response. Returns a number, or None if Cancel pressed.",
            "title": "Question Boxes"
        },
        {
            "location": "/pythonDialogs/#file-boxes",
            "text": ".openBox(title=None, dirName=None, fileTypes=None, asFile=False) \n    Shows an open file dialog.     \nVarious parameters can be provided (although they don't work on all platforms):     title  this will set a title for the dialog    dirName  this will set a starting directory, defaults to the current working directory    fileTypes=[('images', '*.png'), ('images', '*.jpg')] \nThis will set the allowed file extensions, it should be a list of tuples. They will be grouped by the name.    asFile  this will determine whether a path or actual Python file object is returned, defaults to filename        .saveBox() \n    Shows a save file dialog.      .directoryBox()",
            "title": "File Boxes"
        },
        {
            "location": "/pythonDialogs/#other-boxes",
            "text": ".colourBox()",
            "title": "Other Boxes"
        },
        {
            "location": "/splash/",
            "text": "Splashscreen\n\n\nIt's possible to show a very simple SplashScreen when your GUI starts up.\n\nIt will fill the whole screen, and stay up for a couple of seconds, while your GUI loads.\n\n\n  \n\n\nSimply call:  \n\n\n\n\n.showSplash(text, fill='red', stripe='black', fg='white', font=44)\n\n    Pass in the text you want to show, plus any colours (not required).\n\n\ntext\n This should be ashort message to show in the center of the screen.\n\n\nfill\n - this is the bg colour for the splashscreen.\n\n\nstripe\n - this is the bg colour of a stripe across the screen.\n\n\nfg\n - this is the colour of the writing to put in the stripe.\n\n\nfont\n - the size of the text.  \n\n\n\n\nThis is only a very simple splashScreen, eventually, it will be possible to arrange labels and images in it, just as is possible in the main GUI layout...",
            "title": "Splashscreen"
        },
        {
            "location": "/splash/#splashscreen",
            "text": "It's possible to show a very simple SplashScreen when your GUI starts up. \nIt will fill the whole screen, and stay up for a couple of seconds, while your GUI loads.      Simply call:     .showSplash(text, fill='red', stripe='black', fg='white', font=44) \n    Pass in the text you want to show, plus any colours (not required).  text  This should be ashort message to show in the center of the screen.  fill  - this is the bg colour for the splashscreen.  stripe  - this is the bg colour of a stripe across the screen.  fg  - this is the colour of the writing to put in the stripe.  font  - the size of the text.     This is only a very simple splashScreen, eventually, it will be possible to arrange labels and images in it, just as is possible in the main GUI layout...",
            "title": "Splashscreen"
        },
        {
            "location": "/pythonDevWidgets/",
            "text": "Widgets Under Development\n\n\n\n\nThe following widgets are \nunder development\n.\n\nThey're included in the library, but offer limited functionality, and are still buggy.  \n\n\nPieChart\n\n\n\n\nWidget to depict a Pie Chart.\n\nIt will automatically calculate percentages, and draw a pie chart, given a dictionary of items and their amount.\n\nThe PieChart is purely for display purposes, and is not interactive.\n\n\n  \n\n\n    from appJar import gui\n\n    app=gui()\n    app.addPieChart(\np1\n, {\napples\n:50, \noranges\n:200, \ngrapes\n:75,\n                            \nbeef\n:300, \nturkey\n:150})\n    app.go()\n\n\n\n\nAdd PieCharts\n\n\n\n\n.addPieChart(title, values)\n\n    Takes a dictionary of names and values, which will be converted to percentages, and plotted on the chart.\n\n    The names will be used as part of tooltips that appear over each wedge of the PieChart.  \n\n\n\n\nSet PieCharts\n\n\n\n\n.setPieChart(title, name, value)\n\n    Will update the PieChart, by either changing an existing value, adding a new value, or removing a value if it's set to 0.  \n\n\n\n\nTree\n\n\n\n\nTakes an arbitrary XML string, and converts it into a tree structure.  \n\n\n\n\nfrom appJar import gui\n\napp=gui()\napp.addTree(\nt1\n,\n            \npeople\n\n            \nperson\nname\nFred\n/name\nage\n45\n/age\ngender\nMale\n/gender\n/person\n\n            \nperson\nname\nTina\n/name\nage\n37\n/age\ngender\nFemale\n/gender\n/person\n\n            \nperson\nname\nCLive\n/name\nage\n28\n/age\ngender\nMale\n/gender\n/person\n\n            \nperson\nname\nBetty\n/name\nage\n51\n/age\ngender\nFemale\n/gender\n/person\n\n            \n/people\n)\napp.go()\n\n\n\n\nAdd Trees\n\n\n\n\n.addTree(title, xml_data)\n\n    Create a tree from the specified XML data  \n\n\n\n\nSet Trees\n\n\n\n\n.setTreeDoubleClickFunction(title, func)\n\n    Register a function to call when an item is double-clicked  \n\n\n.setTreeEditFunction(title, func)\n\n    Register a function to call when an item is edited  \n\n\n.setTreeEditable(title, value)\n\n    Set whether the tree can be edited  \n\n\n.setTreeBg(title, colour)\n\n    Set the background colour of the tree  \n\n\n.setTreeFg(title, colour)\n\n    Set the foreground colour of the tree  \n\n\n.setTreeHighlightBg(title, colour)\n\n    Set the background colour of the highlighted node    \n\n\n.setTreeHighlightFg(title, colour)\n\n    Set the foreground colour of the highlighted node  \n\n\n\n\nGet Trees\n\n\n\n\n.getTreeXML(title)\n\n    Return the tree as XML  \n\n\n.getTreeSelected(title)\n\n    Return the selected node as a String\n\n\n.getTreeSelectedXML(title)\n\n    Return the selected node (and any children) as XML\n\n\n\n\nGrid\n\n\n\n\nUsed to create a spreadsheet like interface.\n\nThe grid has mouse interactivity, with mouse-over highlighting, and mouse-click highlighting.\n\nIt is possible to include buttons at the end of each row, and an additional row of entry boxes, with their own button.  \n\n\n  \n\n\n    from appJar import gui\n\n    app=gui()\n    app.setFont(20)\n    app.addGrid(\ng1\n,\n        [[\nName\n, \nAge\n, \nGender\n],\n        [\nFred\n, 45, \nMale\n],\n        [\nTina\n, 37, \nFemale\n],\n        [\nClive\n, 28, \nMale\n],\n        [\nBetty\n, 51, \nFemale\n]])\n    app.go()\n\n\n\n\nAdd Grids\n\n\n\n\n.addGrid(title, data, action=None, addRow=False)\n\n    Receives a (jagged) 2D list of values. The first list should be the headers for the grid, the rest will contain each row of values.\n\n    If action is set, a button will be created, at the end of each row,  calling the specified function.\n\n    If addRow is True, then an additional row will appear at the end, with entry boxes and an additional button.  \n\n\n\n\nGet Grids\n\n\n\n\n.getGridEntries(title)\n\n    Get the contents of the entry boxes, if present.\n\n    Returned as a list, in the same order as the entry boxes.  \n\n\n.getGridSelectedCells(title)\n\n    Gets a dictionary of booleans, indicating the status of each cell.\n\n    True indicates the cell is selected, False indicates the cell is not selected.\n\n    The name of each entry on the dictionary will be in the format ROW-COLUMN, eg. 0-2  \n\n\n\n\nSet Grids\n\n\n\n\n.addGridRow(title, data)\n\n    Add a single row of data to the existing grid.\n\n    It will be positioned at the bottom of the grid, above the entry boxes if present.  \n\n\n\n\nMatPlotLib\n\n\n\n\nSupport for embedding very basic \nMatPlotLib\n plots.  \n\n\n  \n\n\nfrom numpy import sin, pi, arange\nfrom appJar import gui\n\nx = arange(0.0, 3.0, 0.01)\ny = sin(2*pi*x)\n\napp = gui()\naxes = app.addPlot(\np1\n, x, y)\naxes.legend(['key data'])\napp.go()\n\n\n\n\n\n\n\n\n.addPlot(title, x, y)\n\n    Create a plot with the specified x and y values.\n\n    Returns the plot object, to allow further customisation.  \n\n\n\n\n\n\n.updatePlot(title, x, y)\n\n    Update the specified plot with the specified x and y values.\n\n\n\n\n\n\n.refreshPlot(title)\n\n    Redraw the plot, call after changing the axes object...",
            "title": "In the works..."
        },
        {
            "location": "/pythonDevWidgets/#widgets-under-development",
            "text": "The following widgets are  under development . \nThey're included in the library, but offer limited functionality, and are still buggy.",
            "title": "Widgets Under Development"
        },
        {
            "location": "/pythonDevWidgets/#piechart",
            "text": "Widget to depict a Pie Chart. \nIt will automatically calculate percentages, and draw a pie chart, given a dictionary of items and their amount. \nThe PieChart is purely for display purposes, and is not interactive.          from appJar import gui\n\n    app=gui()\n    app.addPieChart( p1 , { apples :50,  oranges :200,  grapes :75,\n                             beef :300,  turkey :150})\n    app.go()",
            "title": "PieChart"
        },
        {
            "location": "/pythonDevWidgets/#add-piecharts",
            "text": ".addPieChart(title, values) \n    Takes a dictionary of names and values, which will be converted to percentages, and plotted on the chart. \n    The names will be used as part of tooltips that appear over each wedge of the PieChart.",
            "title": "Add PieCharts"
        },
        {
            "location": "/pythonDevWidgets/#set-piecharts",
            "text": ".setPieChart(title, name, value) \n    Will update the PieChart, by either changing an existing value, adding a new value, or removing a value if it's set to 0.",
            "title": "Set PieCharts"
        },
        {
            "location": "/pythonDevWidgets/#tree",
            "text": "Takes an arbitrary XML string, and converts it into a tree structure.     from appJar import gui\n\napp=gui()\napp.addTree( t1 ,\n             people \n             person name Fred /name age 45 /age gender Male /gender /person \n             person name Tina /name age 37 /age gender Female /gender /person \n             person name CLive /name age 28 /age gender Male /gender /person \n             person name Betty /name age 51 /age gender Female /gender /person \n             /people )\napp.go()",
            "title": "Tree"
        },
        {
            "location": "/pythonDevWidgets/#add-trees",
            "text": ".addTree(title, xml_data) \n    Create a tree from the specified XML data",
            "title": "Add Trees"
        },
        {
            "location": "/pythonDevWidgets/#set-trees",
            "text": ".setTreeDoubleClickFunction(title, func) \n    Register a function to call when an item is double-clicked    .setTreeEditFunction(title, func) \n    Register a function to call when an item is edited    .setTreeEditable(title, value) \n    Set whether the tree can be edited    .setTreeBg(title, colour) \n    Set the background colour of the tree    .setTreeFg(title, colour) \n    Set the foreground colour of the tree    .setTreeHighlightBg(title, colour) \n    Set the background colour of the highlighted node      .setTreeHighlightFg(title, colour) \n    Set the foreground colour of the highlighted node",
            "title": "Set Trees"
        },
        {
            "location": "/pythonDevWidgets/#get-trees",
            "text": ".getTreeXML(title) \n    Return the tree as XML    .getTreeSelected(title) \n    Return the selected node as a String  .getTreeSelectedXML(title) \n    Return the selected node (and any children) as XML",
            "title": "Get Trees"
        },
        {
            "location": "/pythonDevWidgets/#grid",
            "text": "Used to create a spreadsheet like interface. \nThe grid has mouse interactivity, with mouse-over highlighting, and mouse-click highlighting. \nIt is possible to include buttons at the end of each row, and an additional row of entry boxes, with their own button.            from appJar import gui\n\n    app=gui()\n    app.setFont(20)\n    app.addGrid( g1 ,\n        [[ Name ,  Age ,  Gender ],\n        [ Fred , 45,  Male ],\n        [ Tina , 37,  Female ],\n        [ Clive , 28,  Male ],\n        [ Betty , 51,  Female ]])\n    app.go()",
            "title": "Grid"
        },
        {
            "location": "/pythonDevWidgets/#add-grids",
            "text": ".addGrid(title, data, action=None, addRow=False) \n    Receives a (jagged) 2D list of values. The first list should be the headers for the grid, the rest will contain each row of values. \n    If action is set, a button will be created, at the end of each row,  calling the specified function. \n    If addRow is True, then an additional row will appear at the end, with entry boxes and an additional button.",
            "title": "Add Grids"
        },
        {
            "location": "/pythonDevWidgets/#get-grids",
            "text": ".getGridEntries(title) \n    Get the contents of the entry boxes, if present. \n    Returned as a list, in the same order as the entry boxes.    .getGridSelectedCells(title) \n    Gets a dictionary of booleans, indicating the status of each cell. \n    True indicates the cell is selected, False indicates the cell is not selected. \n    The name of each entry on the dictionary will be in the format ROW-COLUMN, eg. 0-2",
            "title": "Get Grids"
        },
        {
            "location": "/pythonDevWidgets/#set-grids",
            "text": ".addGridRow(title, data) \n    Add a single row of data to the existing grid. \n    It will be positioned at the bottom of the grid, above the entry boxes if present.",
            "title": "Set Grids"
        },
        {
            "location": "/pythonDevWidgets/#matplotlib",
            "text": "Support for embedding very basic  MatPlotLib  plots.        from numpy import sin, pi, arange\nfrom appJar import gui\n\nx = arange(0.0, 3.0, 0.01)\ny = sin(2*pi*x)\n\napp = gui()\naxes = app.addPlot( p1 , x, y)\naxes.legend(['key data'])\napp.go()    .addPlot(title, x, y) \n    Create a plot with the specified x and y values. \n    Returns the plot object, to allow further customisation.      .updatePlot(title, x, y) \n    Update the specified plot with the specified x and y values.    .refreshPlot(title) \n    Redraw the plot, call after changing the axes object...",
            "title": "MatPlotLib"
        },
        {
            "location": "/pythonWidgetLayout/",
            "text": "Arranging Widgets\n\n\n\n\nYou can make your GUIs as simple or as complicated as you want...  \n\n\nSequential Layout\n\n\n\n\nBy default, each time you add a widget to a GUI, it is simply added on a new row:\n\n\n\n\nfrom appJar import gui  \n\ndef changeLabel(btn):  \n    app.setLabel(\nl2\n, app.getEntry(\ntext\n))  \n\napp = gui()  \napp.addLabel(\nl1\n, \nSimple Demo\n)\napp.addEntry(\ntext\n)\napp.addButton(\nOK\n, changeLabel)\napp.addEmptyLabel(\nl2\n)\napp.go()\n\n\n\n\nGrid Layout\n\n\n\n\nIf, however, you want a bit more control, then you can treat your GUI like a \nGRID\n.\n\nThink of it just like a spreadsheet, and position your widgets in whichever cell you want.  \n\n\nEach time you add a widget, simply specify the row and column it should appear in (always in that order):\n\n\n\n\nfrom appJar import gui\n\napp=gui(\nGrid Demo\n, \n300x300\n)\napp.setSticky(\nnews\n)\napp.setExpand(\nboth\n)\napp.setFont(20)\n\napp.addLabel(\nl1\n, \nrow=0\\ncolumn=0\n, 0, 0)\napp.addLabel(\nl2\n, \nrow=0\\ncolumn=1\n, 0, 1)\napp.addLabel(\nl3\n, \nrow=0\\ncolumn=2\n, 0, 2)\napp.addLabel(\nl4\n, \nrow=1\\ncolumn=0\n, 1, 0)\napp.addLabel(\nl5\n, \nrow=1\\ncolumn=1\n, 1, 1)\napp.addLabel(\nl6\n, \nrow=1\\ncolumn=2\n, 1, 2)\napp.addLabel(\nl7\n, \nrow=2\\ncolumn=0\n, 2, 0)\napp.addLabel(\nl8\n, \nrow=2\\ncolumn=1\n, 2, 1)\napp.addLabel(\nl9\n, \nrow=2\\ncolumn=2\n, 2, 2)\n\napp.setLabelBg(\nl1\n, \nLightYellow\n)\napp.setLabelBg(\nl2\n, \nLemonChiffon\n)\napp.setLabelBg(\nl3\n, \nLightGoldenRodYellow\n)\napp.setLabelBg(\nl4\n, \nPapayaWhip\n)\napp.setLabelBg(\nl5\n, \nMoccasin\n)\napp.setLabelBg(\nl6\n, \nPeachPuff\n)\napp.setLabelBg(\nl7\n, \nPaleGoldenRod\n)\napp.setLabelBg(\nl8\n, \nKhaki\n)\napp.setLabelBg(\nl9\n, \nDarkKhaki\n)\n\napp.go()\n\n\n\n\nIf youre still not satisfied, you can configure widgets to span across multiple columns or rows.\n\nSimply provide a third \n fourth parameter to specify how many rows and columns to span:  \n\n\n\n\nfrom appJar import gui\n\napp=gui(\nGrid Demo\n, \n300x300\n)\napp.setSticky(\nnews\n)\napp.setExpand(\nboth\n)\napp.setFont(14)\n\napp.addLabel(\nl1\n, \nrow=0\\ncolumn=0\n)\napp.addLabel(\nl2\n, \nrow=0\\ncolumn=1\\ncolspan=2\n, 0, 1, 2)\napp.addLabel(\nl4\n, \nrow=1\\ncolumn=0\\ncolspan=2\n, 1, 0, 2)\napp.addLabel(\nl6\n, \nrow=1\\ncolumn=2\\ncolspan=1\\nrowspan=2\n, 1, 2, 1, 2)\napp.addLabel(\nl7\n, \nrow=2\\ncolumn=0\n, 2)\napp.addLabel(\nl8\n, \nrow=2\\ncolumn=1\n, 2, 1)\n\napp.setLabelBg(\nl1\n, \nred\n)\napp.setLabelBg(\nl2\n, \nblue\n)\napp.setLabelBg(\nl4\n, \ngreen\n)\napp.setLabelBg(\nl6\n, \norange\n)\napp.setLabelBg(\nl7\n, \nyellow\n)\n\napp.go()\n\n\n\n\nNote, the parameters are read from left to right, so:  \n\n\n\n\nIf you're specifying a column, you must first specify a row  \n\n\nIf you're specifying a row-span, you must first specify both the row \n column  \n\n\nAnd, if you're specifying a column-span, you must first specify a row, column \n column-span  \n\n\n\n\nLayout Tricks\n\n\nThere are a few tricks you can employ, to make life a bit easier...\n\n\nNamed Arguments\n\n\nIt can be annoying having to specify all of the positional parameters each time, so why not take advantage of Python's support for \nNamed Arguments\n. These allow you to set specific parameters, using their name.\n\nFor example: \napp.addLabel(\"l1\", \"text here\", colspan=2)\n, will set the \ncolspan\n parameter, without having to set the preceeding ones.   \n\n\nRow Helpers\n\n\nIf you combine that with having appJar telling you the row you're on, things get even easier.  \n\n\n\n\n.getRow()\n or \n.gr()\n\n    Returns the row number currently being used.\n\n    Useful if you're mainly adding things sequentially, but want to modify one line out of sequence.  \n\n\n\n\n\n\nfrom appJar import gui\n\ncolours=[\nred\n,\nblue\n]\n\napp=gui()\n\nfor loop in range(3):\n    app.addLabel(loop, \nNew Row\n, colspan=2)\n    app.setLabelBg(loop, colours[loop%2])\n\nrow = app.getRow() # get current row\n\napp.addLabel(\na\n, \nLEFT\n, row, 0) \napp.addLabel(\nb\n, \nRIGHT\n, row, 1) \n\napp.setLabelBg(\na\n, \ngreen\n)\napp.setLabelBg(\nb\n, \norange\n)\n\nfor loop in range(3, 6):\n    app.addLabel(loop, \nNew Row\n, colspan=2)\n    app.setLabelBg(loop, colours[loop%2])\n\napp.go()\n\n\n\n\nWidget Positioning\n\n\n\n\nOnce you've laid out your widgets, the next most important thing is how they line up in their rows and columns.  \n\n\nThere are two things you can configure:    \n\n\n\n\nHow columns and rows stretch to fill the GUI - \nstretchiness\n  \n\n\nHow widgets stretch to fill their cells - \nstickiness\n  \n\n\n\n\nNote, you can also cange these settings for \nindividual widgets\n\n\nSet Stretch \n Sticky\n\n\n\n\n.setStretch(sides)\n\n    This tells rows \n columns how to stretch when the GUI is resized.\n\n    It allows them to adjust to fill the available space:\n\n\nnone\n - don't stretch  \n\n\nrow\n - only rows should stretch down  \n\n\ncolumn\n - only columns should stretch across  \n\n\nboth\n - stretch rows \n columns  \n\n\n\n\n\n\n.setSticky(sides)\n\n    This determines which sides of the grid-cell the widget will stick to.\n\n    It should be a string, made up of any combination of \nn\n, \ne\n, \ns\n or \nw\n\n    By default, most widgets use \n\"ew\"\n\n\n\n\nColumns \n Rows Stretchiness\n\n\nBy default, the columns stretch (equally) to fill the width of the GUI, but rows don't - they take up the minimum space required.    \n\n\n  \n\n\nIt's possible to tell the rows to stretch too:\n\n\n  \n\n\napp.setStretch(\nboth\n)\n\n\n\n\nBut, as you can see - this doesn't make much difference...\n\n\nWidget Stickiness\n\n\nEven if the cells in the columns \n rows are stretching, the widgets inside them might not.  \n\n\nWidges have a \nstickiness\n which tells them which sides of their cells to stick to.  \n\n\nAgain, widgets are configured to stick to the left \n right, but not the top \n bottom.  \n\n\nTo change this, you need to set a new stickiness:  \n\n\n  \n\n\napp.setStretch(\nboth\n)\napp.setSticky(\nnesw\n)\n\n\n\n\nIf you remove all stickiness, you end up with this:\n\n\n  \n\n\napp.setStretch(\nboth\n)\napp.setSticky(\n)\n\n\n\n\nIt's even possible to give each widget its own \nstickiness\n:\n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\n\napp.setBg(\nblue\n)\napp.setStretch(\nboth\n)\n\napp.setSticky(\nnw\n)\napp.addLabel(\nl1\n, \nOne\n, 0, 0)\napp.setLabelBg(\nl1\n, \nyellow\n)\n\napp.setSticky(\nne\n)\napp.addLabel(\nl2\n, \nTwo\n, 0, 1)\napp.setLabelBg(\nl2\n, \ngreen\n)\n\napp.setSticky(\nsw\n)\napp.addLabel(\nl3\n, \nThree\n, 1, 0)\napp.setLabelBg(\nl3\n, \npink\n)\n\napp.setSticky(\nse\n)\napp.addLabel(\nl4\n, \nFour\n, 1, 1)\napp.setLabelBg(\nl4\n, \nOrange\n)\n\napp.go()\n\n\n\n\nWidget Padding\n\n\nIt's possible to configure how much empty space is around a widget.\n\nThis is known as padding. You can put padding both inside and outside a widget...  \n\n\n\n\napp.setPadding([20,20]) # 20 pixels padding outside the widget [X, Y]\napp.setInPadding([20,20]) # 20 pixels padding inside the widget [X, Y]\n\n\n\n\nSet Padding \n InPadding\n\n\n\n\n.setPadding([x,y])\n\n    This sets the X \n Y padding outside a widget.  \n\n\n.setInPadding([x,y])\n\n    This sets the X \n Y padding inside a widget.  \n\n\n\n\n\n\napp.setPadding([20,20]) # padding outside the widget\napp.setInPadding([40,20]) # padding inside the widget",
            "title": "Arranging widgets"
        },
        {
            "location": "/pythonWidgetLayout/#arranging-widgets",
            "text": "You can make your GUIs as simple or as complicated as you want...",
            "title": "Arranging Widgets"
        },
        {
            "location": "/pythonWidgetLayout/#sequential-layout",
            "text": "By default, each time you add a widget to a GUI, it is simply added on a new row:   from appJar import gui  \n\ndef changeLabel(btn):  \n    app.setLabel( l2 , app.getEntry( text ))  \n\napp = gui()  \napp.addLabel( l1 ,  Simple Demo )\napp.addEntry( text )\napp.addButton( OK , changeLabel)\napp.addEmptyLabel( l2 )\napp.go()",
            "title": "Sequential Layout"
        },
        {
            "location": "/pythonWidgetLayout/#grid-layout",
            "text": "If, however, you want a bit more control, then you can treat your GUI like a  GRID . \nThink of it just like a spreadsheet, and position your widgets in whichever cell you want.    Each time you add a widget, simply specify the row and column it should appear in (always in that order):   from appJar import gui\n\napp=gui( Grid Demo ,  300x300 )\napp.setSticky( news )\napp.setExpand( both )\napp.setFont(20)\n\napp.addLabel( l1 ,  row=0\\ncolumn=0 , 0, 0)\napp.addLabel( l2 ,  row=0\\ncolumn=1 , 0, 1)\napp.addLabel( l3 ,  row=0\\ncolumn=2 , 0, 2)\napp.addLabel( l4 ,  row=1\\ncolumn=0 , 1, 0)\napp.addLabel( l5 ,  row=1\\ncolumn=1 , 1, 1)\napp.addLabel( l6 ,  row=1\\ncolumn=2 , 1, 2)\napp.addLabel( l7 ,  row=2\\ncolumn=0 , 2, 0)\napp.addLabel( l8 ,  row=2\\ncolumn=1 , 2, 1)\napp.addLabel( l9 ,  row=2\\ncolumn=2 , 2, 2)\n\napp.setLabelBg( l1 ,  LightYellow )\napp.setLabelBg( l2 ,  LemonChiffon )\napp.setLabelBg( l3 ,  LightGoldenRodYellow )\napp.setLabelBg( l4 ,  PapayaWhip )\napp.setLabelBg( l5 ,  Moccasin )\napp.setLabelBg( l6 ,  PeachPuff )\napp.setLabelBg( l7 ,  PaleGoldenRod )\napp.setLabelBg( l8 ,  Khaki )\napp.setLabelBg( l9 ,  DarkKhaki )\n\napp.go()  If youre still not satisfied, you can configure widgets to span across multiple columns or rows. \nSimply provide a third   fourth parameter to specify how many rows and columns to span:     from appJar import gui\n\napp=gui( Grid Demo ,  300x300 )\napp.setSticky( news )\napp.setExpand( both )\napp.setFont(14)\n\napp.addLabel( l1 ,  row=0\\ncolumn=0 )\napp.addLabel( l2 ,  row=0\\ncolumn=1\\ncolspan=2 , 0, 1, 2)\napp.addLabel( l4 ,  row=1\\ncolumn=0\\ncolspan=2 , 1, 0, 2)\napp.addLabel( l6 ,  row=1\\ncolumn=2\\ncolspan=1\\nrowspan=2 , 1, 2, 1, 2)\napp.addLabel( l7 ,  row=2\\ncolumn=0 , 2)\napp.addLabel( l8 ,  row=2\\ncolumn=1 , 2, 1)\n\napp.setLabelBg( l1 ,  red )\napp.setLabelBg( l2 ,  blue )\napp.setLabelBg( l4 ,  green )\napp.setLabelBg( l6 ,  orange )\napp.setLabelBg( l7 ,  yellow )\n\napp.go()  Note, the parameters are read from left to right, so:     If you're specifying a column, you must first specify a row    If you're specifying a row-span, you must first specify both the row   column    And, if you're specifying a column-span, you must first specify a row, column   column-span",
            "title": "Grid Layout"
        },
        {
            "location": "/pythonWidgetLayout/#layout-tricks",
            "text": "There are a few tricks you can employ, to make life a bit easier...",
            "title": "Layout Tricks"
        },
        {
            "location": "/pythonWidgetLayout/#named-arguments",
            "text": "It can be annoying having to specify all of the positional parameters each time, so why not take advantage of Python's support for  Named Arguments . These allow you to set specific parameters, using their name. \nFor example:  app.addLabel(\"l1\", \"text here\", colspan=2) , will set the  colspan  parameter, without having to set the preceeding ones.",
            "title": "Named Arguments"
        },
        {
            "location": "/pythonWidgetLayout/#row-helpers",
            "text": "If you combine that with having appJar telling you the row you're on, things get even easier.     .getRow()  or  .gr() \n    Returns the row number currently being used. \n    Useful if you're mainly adding things sequentially, but want to modify one line out of sequence.      from appJar import gui\n\ncolours=[ red , blue ]\n\napp=gui()\n\nfor loop in range(3):\n    app.addLabel(loop,  New Row , colspan=2)\n    app.setLabelBg(loop, colours[loop%2])\n\nrow = app.getRow() # get current row\n\napp.addLabel( a ,  LEFT , row, 0) \napp.addLabel( b ,  RIGHT , row, 1) \n\napp.setLabelBg( a ,  green )\napp.setLabelBg( b ,  orange )\n\nfor loop in range(3, 6):\n    app.addLabel(loop,  New Row , colspan=2)\n    app.setLabelBg(loop, colours[loop%2])\n\napp.go()",
            "title": "Row Helpers"
        },
        {
            "location": "/pythonWidgetLayout/#widget-positioning",
            "text": "Once you've laid out your widgets, the next most important thing is how they line up in their rows and columns.    There are two things you can configure:       How columns and rows stretch to fill the GUI -  stretchiness     How widgets stretch to fill their cells -  stickiness      Note, you can also cange these settings for  individual widgets",
            "title": "Widget Positioning"
        },
        {
            "location": "/pythonWidgetLayout/#set-stretch-sticky",
            "text": ".setStretch(sides) \n    This tells rows   columns how to stretch when the GUI is resized. \n    It allows them to adjust to fill the available space:  none  - don't stretch    row  - only rows should stretch down    column  - only columns should stretch across    both  - stretch rows   columns      .setSticky(sides) \n    This determines which sides of the grid-cell the widget will stick to. \n    It should be a string, made up of any combination of  n ,  e ,  s  or  w \n    By default, most widgets use  \"ew\"",
            "title": "Set Stretch &amp; Sticky"
        },
        {
            "location": "/pythonWidgetLayout/#columns-rows-stretchiness",
            "text": "By default, the columns stretch (equally) to fill the width of the GUI, but rows don't - they take up the minimum space required.          It's possible to tell the rows to stretch too:      app.setStretch( both )  But, as you can see - this doesn't make much difference...",
            "title": "Columns &amp; Rows Stretchiness"
        },
        {
            "location": "/pythonWidgetLayout/#widget-stickiness",
            "text": "Even if the cells in the columns   rows are stretching, the widgets inside them might not.    Widges have a  stickiness  which tells them which sides of their cells to stick to.    Again, widgets are configured to stick to the left   right, but not the top   bottom.    To change this, you need to set a new stickiness:        app.setStretch( both )\napp.setSticky( nesw )  If you remove all stickiness, you end up with this:      app.setStretch( both )\napp.setSticky( )  It's even possible to give each widget its own  stickiness :      from appJar import gui\n\napp=gui()\n\napp.setBg( blue )\napp.setStretch( both )\n\napp.setSticky( nw )\napp.addLabel( l1 ,  One , 0, 0)\napp.setLabelBg( l1 ,  yellow )\n\napp.setSticky( ne )\napp.addLabel( l2 ,  Two , 0, 1)\napp.setLabelBg( l2 ,  green )\n\napp.setSticky( sw )\napp.addLabel( l3 ,  Three , 1, 0)\napp.setLabelBg( l3 ,  pink )\n\napp.setSticky( se )\napp.addLabel( l4 ,  Four , 1, 1)\napp.setLabelBg( l4 ,  Orange )\n\napp.go()",
            "title": "Widget Stickiness"
        },
        {
            "location": "/pythonWidgetLayout/#widget-padding",
            "text": "It's possible to configure how much empty space is around a widget. \nThis is known as padding. You can put padding both inside and outside a widget...     app.setPadding([20,20]) # 20 pixels padding outside the widget [X, Y]\napp.setInPadding([20,20]) # 20 pixels padding inside the widget [X, Y]",
            "title": "Widget Padding"
        },
        {
            "location": "/pythonWidgetLayout/#set-padding-inpadding",
            "text": ".setPadding([x,y]) \n    This sets the X   Y padding outside a widget.    .setInPadding([x,y]) \n    This sets the X   Y padding inside a widget.      app.setPadding([20,20]) # padding outside the widget\napp.setInPadding([40,20]) # padding inside the widget",
            "title": "Set Padding &amp; InPadding"
        },
        {
            "location": "/pythonWidgetGrouping/",
            "text": "Grouping Widgets\n\n\n\n\nThe standard way of using appJar, is simply to place all widgets into a single window.\n\nEverything is grouped into that single window, and any changes affect everything in that window.  \n\n\nIt's sometimes desirable to group widgets together within a window.\n\nOr to have multiple \npages\n of widgets.\n\nA number of options are provided to make this easier.  \n\n\nFormat\n\n\nAll of these methods work in the same way.\n\nYou call the \nstart\n function when you want to start a container, then the \nstop\n function when you're done.\n\nWhen you call \nstart\n you can pass in positional arguments like any other widget (row, column, rowspan, colspan).\n\nAny \nGUI Options\n you set, within the container, will only affect that container.  \n\n\nReopening Containers\n\n\nIf you want to dynamically add widgets to a container, once the gui has been started, you can open a specific container, perform the desired actions, then stop it again.\n\n\ndef addRows(btn):\n    count = app.getEntry(\nnumRows\n)\n    app.openTab(\ntabbedPane\n, \nDetails Tab\n) # open the required tab\n    for rowLoop in range(count):\n        # add a new label, with a unique ID\n        # make sure to put it in the right place\n        app.addLabel(\ndyn\n+str(rowLoop), \nDynamic Label\n, rowLoop+5)\n    app.stopTab()\n\n\n\n\nLabel Frame\n\n\n\n\nA way of grouping widgets into a box, with a label at the top of the box.\n\nPosition the \nLabelFrame\n within the grid, then position widgets inside the \nLabelFrame\n\n\n\n\nfrom appJar import gui\n\napp=gui()\n\napp.startLabelFrame(\nLogin Details\n)\n# these only affect the labelFrame\napp.setSticky(\new\n)\napp.setFont(20)\n\napp.addLabel(\nl1\n, \nName\n, 0, 0)\napp.addEntry(\nName\n, 0, 1)\napp.addLabel(\nl2\n, \nPassword\n, 1, 0)\napp.addEntry(\nPassword\n, 1, 1)\napp.addButtons([\nSubmit\n, \nCancel\n], None, 2, 0, 2)\napp.stopLabelFrame()\n\napp.go()\n\n\n\n\nStart/Stop Label Frames\n\n\n\n\n\n\n.startLabelFrame(name)\n \n \n.stopLabelFrame()\n\n    Used to start and stop a \nLabelFrame\n\n    The specified title will be used as the label for the frame.  \n\n\n\n\n\n\n.openLabelFrame(title)\n\n    Used to reopen the named \nLabelFrame\n.  \n\n\n\n\n\n\nSet Label Frames\n\n\n\n\n.setSticky(coords)\n\n    By default, widgets in the frame will align on the left.\n\n    If you want to change this, specify a different \nsticky\n value.\n\n    For example, \n.setSticky(\"ew\")\n will cause the widgets to stretch to fit the width, aligning in the centre.  \n\n\n\n\nToggle Frame\n\n\n\n\nA collapsible container for a group of related widgets.\n\nBy default, the contents of the frame are hidden.\n\nThey can be revealed/hidden again by clicking an associated button.\n\n\n\n\n\n\nfrom appJar import gui\n\napp=gui()\napp.setFont(20)\n\napp.startToggleFrame(\nOptions\n)\napp.addCheckBox(\nShow this\n)\napp.addCheckBox(\nShow that\n)\napp.addCheckBox(\nShow the other\n)\napp.setCheckBox(\nShow that\n)\napp.stopToggleFrame()\n\napp.go()\n\n\n\n\nStart/Stop Toggle Frames\n\n\n\n\n\n\n.startToggleFrame(title)\n \n \n.stopToggleFrame(title)\n\n    Used to start and stop a \nToggleFrame\n.\n\n    The \ntitle\n will be used as the title for the \nToggleFrame\n.  \n\n\n\n\n\n\n.openToggleFrame(title)\n\n    Used to reopen the named \nToggleFrame\n.  \n\n\n\n\n\n\nSet Toggle Frames\n\n\n\n\n\n\n.toggleToggleFrame(title)\n\n    Will toggle the state of the specified \nToggleFrame\n.  \n\n\n\n\n\n\n.disableToggleFrame(title, disabled=True)\n\n    Will disable the specified \nToggleFrame\n.\n\n    If \ndisabled\n is set to False, the \nToggleFrame\n will be re-enabled.  \n\n\n\n\n\n\nGet Toggle Frames\n\n\n\n\n.getToggleFrameState(title)\n\n    Will return True if the \nToggleFrame\n is open, else will return False.  \n\n\n\n\nTabbed Frame\n\n\n\n\nA way to create a (basic) tabbed-style interface.\n\nPosition the \nTabbedFrame\n within the grid, start a \nTab\n, then position widgets inside the \nTab\n\n\n  \n\n\nfrom appJar import gui\n\napp=gui()\n\napp.startTabbedFrame(\nTabbedFrame\n)\napp.startTab(\nTab1\n)\napp.addLabel(\nl1\n, \nTab 1 Label\n)\napp.stopTab()\n\napp.startTab(\nTab2\n)\napp.addLabel(\nl2\n, \nTab 2 Label\n)\napp.stopTab()\n\napp.startTab(\nTab3\n)\napp.addLabel(\nl3\n, \nTab 3 Label\n)\napp.stopTab()\napp.stopTabbedFrame()\n\napp.go()\n\n\n\n\nStart/Stop Tabbed Frames\n\n\n\n\n\n\n.startTabbedFrame(name)\n \n \n.stopTabbedFrame()\n\n    Used to start \n stop the a \nTabbedFrame\n, with the specified name.  \n\n\n\n\n\n\n.startTab(name)\n \n \n.stopTab()\n\n    Used to start and stop each of the tabs in the \nTabbedFrame\n.\n\n    The title for the tab will be the specified \nname\n.  \n\n\n\n\n\n\n.openTabbedFrame(title)\n \n \n.openTab(frameTitle, tabTitle)\n\n    Used to reopen the named \nTabbedFrame\n or named \nTab\n.  \n\n\n\n\n\n\nSet TabbedFrame\n\n\n\n\n\n\n.setTabbedFrameTabExpand(title, expand=True)\n\n    By default, the tabs take up the minimum amount of space necessary.\n\n    Set this to True, to have the tabs fill the entire row.\n\n\n  \n\n\n\n\n\n\n.setTabbedFrameSelectedTab(title, tab)\n\n    Select the specified tab in the TabbedFrame.  \n\n\n\n\n\n\n.setTabbedFrameDisabledTab(title, tab, disabled=True)\n\n    Disable the specified tab in the TabbedFrame.\n\n    Set disabled to False to re-enable it.\n\n    This will also change the displayed tab, if the disaplyed tab is being disabled.  \n\n\n\n\n\n\n.setTabbedFrameDisableAllTabs(title, disabled=True)\n\n    Will disable all tabs for the named TabFrame.\n\n    Or, enable them if disabled is set to False.  \n\n\n\n\n\n\nChanging Colours\n\n\nTabbedFrames have a set of colours that can be changed:  \n\n\n\n\nActiveFg - Sets the colour of the text in the active tab  \n\n\nActiveBg - Sets the background colour of the active tab  \n\n\nInactiveFg - Sets the colour of the text in all inactive tabs  \n\n\nInactiveBG - Sets the background colour of all inactive tabs  \n\n\nDisabledFg - Sets the colour of the text in all disabled tabs  \n\n\nDisabledBg - Sets the background colour of all disabled tabs  \n\n\nBg - Sets the background colour behind the widget - only visible at the end of the tabs  \n\n\n\n\nThese are all changed via the standard property changing functions, eg:  \n\n\n\n\n.setTabbedFrameBg(\"t1\", \"red\")\n\n\n.setTabbedFrameActiveBg(\"t1\", \"yellow\")\n\n\n\n\nIt is also possible to change the colour of individual panes.\n\nCall \n.setBg(\"colour\")\n while adding widgets to the specific pane.\n\nOr \n.setTabBg(title, tab, 'colour')\n at other times.  \n\n\nGet TabbedFrame\n\n\n\n\n.getTabbedFrameSelectedTab(title)\n\n    Gets the name of the currently selected tab, for the named TabFrame.  \n\n\n\n\nPaned Frame\n\n\n\n\nA way to present re-sizable panes, separated by drag-bars.\n\nOnce the first pane is placed, all additional panes should be placed inside it.\n\nBy default, panes will be placed side-by-side (horizontally).\n\nThis can be changed by setting the pane to vertical, then they'll be placed underneath each other.  \n\n\nStart/Stop Paned Frames\n\n\n\n\n\n\n.startPanedFrame(name)\n, \n.startPanedFrameVertical(name)\n \n \n.stopPanedFrame()\n\n    Used to start \n stop \nPanedFrames\n, with the specified name.\n\n    By default, any panes added to this pane will be added side-by-side (horizontally).\n\n    Starting a vertical pane will cause additional panes to be stacked on top of each other.  \n\n\n\n\n\n\n.openPanedFrame(title)\n\n    Used to reopen the named \nPanedFrame\n.  \n\n\n\n\n\n\nHorizontal Pane Layout\n\n\n  \n\n\n\n\nStart an initial pane  \n\n\nStart all additional panes inside the initial pane  \n\n\n\n\nfrom appJar import gui\napp = gui()\n\n# start initial pane\napp.startPanedFrame(\np1\n)\napp.addLabel(\nl1\n, \nInside Pane 1\n)\n\n# start additional panes inside initial pane\napp.startPanedFrame(\np2\n)\napp.addLabel(\nl2\n, \nInside Pane 2\n)\napp.stopPanedFrame()\n\napp.startPanedFrame(\np3\n)\napp.addLabel(\nl3\n, \nInside Pane 3\n)\napp.stopPanedFrame()\n\n# stop initial pane\napp.stopPanedFrame()\n\napp.go()\n\n\n\n\nVertical Pane Layout\n\n\n  \n\n\n\n\nStart an initial, vertical pane  \n\n\nStart all additional panes inside the intial pane  \n\n\n\n\nfrom appJar import gui\napp = gui()\n\n# start initial, vertical pane\napp.startPanedFrameVertical(\np1\n)\napp.addLabel(\nl1\n, \nInside Pane 1\n)\n\n# start additional panes inside initial pane\napp.startPanedFrame(\np2\n)\napp.addLabel(\nl2\n, \nInside Pane 2\n)\napp.stopPanedFrame()\n\napp.startPanedFrame(\np3\n)\napp.addLabel(\nl3\n, \nInside Pane 3\n)\napp.stopPanedFrame()\n\n# stop initial pane\napp.stopPanedFrame()\n\napp.go()\n\n\n\n\nE-Pane Layout\n\n\n  \n\n\n\n\nStart an initial pane  \n\n\nStart a second, vertical pane inside the intial pane  \n\n\nStart all additional panes inside the second pane  \n\n\n\n\nfrom appJar import gui\napp = gui()\n\n# start initial pane\napp.startPanedFrame(\np1\n)\napp.addLabel(\nl1\n, \nInside Pane 1\n)\n\n# start second, vertical pane inside inital pane\napp.startPanedFrameVertical(\np2\n)\napp.addLabel(\nl2\n, \nInside Pane 2\n)\n\n# start additional panes inside second pane\napp.startPanedFrame(\np3\n)\napp.addLabel(\nl3\n, \nInside Pane 3\n)\napp.stopPanedFrame()\n\n# stop second \n initial panes\napp.stopPanedFrame()\napp.stopPanedFrame()\n\napp.go()\n\n\n\n\nT-Pane Layout\n\n\n  \n\n\n\n\nStart an initial, vertical pane  \n\n\nStart a second pane, indside the initial pane  \n\n\nStart additional panes inside the second pane  \n\n\n\n\nfrom appJar import gui\napp = gui()\n\n# start intial, vertical pane\napp.startPanedFrameVertical(\np1\n)\napp.addLabel(\nl1\n, \nInside Pane 1\n)\n\n# start second pane\napp.startPanedFrame(\np2\n)\napp.addLabel(\nl2\n, \nInside Pane 2\n)\n\n# start additional panes inside second pane \napp.startPanedFrame(\np3\n)\napp.addLabel(\nl3\n, \nInside Pane 3\n)\napp.stopPanedFrame()\n\n# stop second \n initial panes\napp.stopPanedFrame()\napp.stopPanedFrame()\n\napp.go()\n\n\n\n\nPaged Window\n\n\n\n\nA container that mimics a classic phone based interface.\n\nIt provides \nPREVIOUS\n/\nNEXT\n buttons to navigate through a series of pages.\n\nIt has an optional widget title, and shows the current page, in a page counter.\n\nKeyboard bindings are provided to navigate with arrow key presses. CTRL-arrow will navigate to the beginning/end.\n\nEvents can be bound to page changes, the page can be changed via a funciton call, and the current page number can be queried.\n\n\n\n\nfrom appJar import gui\n\napp=gui()\n\napp.setBg(\nDarkKhaki\n)\napp.setGeometry(280,400)\n\napp.startPagedWindow(\nMain Title\n)\napp.startPage()\napp.addLabel(\nl13\n, \nLabel 1\n)\napp.stopPage()\n\napp.startPage()\napp.addLabel(\nl21\n, \nLabel 2\n)\napp.stopPage()\n\napp.startPage()\napp.addLabel(\nl3\n, \nLabel 3\n)\napp.stopPage()\n\napp.startPage()\napp.addLabel(\nl4\n, \nLabel 4\n)\napp.stopPage()\napp.stopPagedWindow()\n\napp.go()\n\n\n\n\nStart/Stop Paged Windows\n\n\n\n\n\n\n.startPagedWindow(title)\n \n \n.stopPagedWindow()\n\n    Used to start and stop a \nPagedWindow\n.\n\n    The \ntitle\n will be used in the title section of the widget.  \n\n\n\n\n\n\n.startPage()\n \n \n.stopPage()\n\n    Used to start and stop each new page.\n\n    Navigation, page count, etc are all dealt with automatically.  \n\n\n\n\n\n\n.openPagedWindow(title)\n \n \n.openPage(windowTitle, pageNumber)\n \n\n    Used to reopen the named \nPagedWindow\n or \nPage\n.  \n\n\n\n\n\n\nSet Paged Windows\n\n\n\n\n\n\n.setPagedWindowTitle(title, title)\n \n \n.setPagedWindowButtons(title, [buttons])\n\n    Used to change the text in the title and buttons.\n\n    When changing the buttons, two values must be passed in: previous/next.  \n\n\n\n\n\n\n.setPagedWindowButtonsTop(title, top=True)\n\n    Used to position the navigation buttons.  By default, they are at the bottom.\n\n    Call this funtion to move them to the top.  \n\n\n\n\n\n\n.setPagedWindowPage(title, pageNum)\n\n    Used to display the selected page.  \n\n\n\n\n\n\n.setPagedWindowFunction(title, function)\n\n    Declare a function to call, each time the page is changed.  \n\n\n\n\n\n\n.showPagedWindowPageNumber(title, show=True)\n \n \n.showPagedWindowTitle(title, show=True)\n\n    Use these to declare if you want the page title, page numbers to be shown.  \n\n\n\n\n\n\nGet Paged Windows\n\n\n\n\n.getPagedWindowPageNumber(title)\n\n    Used to get the page number currently being shown.  \n\n\n\n\nSub Window\n\n\n\n\nA way to add additional windows, which can be hidden and shown.\n\n\n\n\nfrom appJar import gui\n\ndef launch(win):\n    app.showSubWindow(win)\n\napp=gui()\n\napp.startSubWindow(\none\n, modal=True)\napp.addLabel(\nl1\n, \nSubWindow One\n)\napp.stopSubWindow()\n\napp.startSubWindow(\ntwo\n)\napp.addLabel(\nl2\n, \nSubWindow Two\n)\napp.stopSubWindow()\n\napp.addButtons([\none\n, \ntwo\n], launch)\n\napp.go()\n\n\n\n\nStart/Stop Sub Windows\n\n\n\n\n\n\n.startSubwindow(name, title=None, modal=False)\n \n \n.stopSubwindow()\n\n    Used to start and stop defining a \nSubWindow\n\n    Setting a \ntitle\n will override the \nname\n as a title for the \nSubWindow\n. \n\n    Setting \nmodal\n to True, will prevent the user from interacting with the parent window until the \nSubWindow\n is closed.  \n\n\n\n\n\n\n.openSubWindow(title)\n\n    Used to reopen the named \nSubWindow\n.  \n\n\n\n\n\n\nShow/Hide Sub Windows\n\n\n\n\n\n\n.showSubWindow(title)\n\n    Will cause the specified \nSubWindow\n to be shown.\n\n    If it is set as \nmodal\n the parent window will become uninteractive until the \nSubWindow\n is closed.  \n\n\n\n\n\n\n.hideSubWindow(title)\n\n    Used to hide the specified \nSubWindow\n.\n\n    This will not destroy the \nSubWindow\n, so it can be shown again later.  \n\n\n\n\n\n\n.destroySubWindow(title)\n\n    This will hide and permanently destroy the specified \nSubWindow\n.\n\n    It cannot be shown again.  \n\n\n\n\n\n\nIt's useful to be able to create a button that stops a SubWindow:\n\nIf you create a button, that calls \n.hideSubWindow()\n or \n.destroySubWindow()\n, and give it the same name as the \nSubWindow\n, then it will hide/destroy the \nSubWindow\n, and call any  associated \n.stopFunction()\n.  \n\n\napp.startSubWindow(\nDemo\n)\napp.addLabel(\nl1\n, \nPress the button to close this window\n)\n# set the button's name to match the SubWindow's name\napp.addNamedButton(\nCLOSE\n, \nDemo\n, app.hideSubWindow)\napp.stopSubWindow()\n\n\n\n\nSet Sub Windows\n\n\nNote, all functions available on the main window are also available on \nSubWindows\n.\n\nSimply call those functions after starting a \nSubWindow\n.  \n\n\napp.startSubWindow(\none\n, modal=True)\napp.setBg(\norange\n)\napp.setGeometry(\n400x400\n)\napp.setTransparency(25)\napp.setStopFunction(checkDone)\napp.addLabel(\nl1\n, \nIn sub window\n)\napp.stopSubWindow()\n\n\n\n\nUnder Development\n\n\n\n\nFrame\n\n\nA simple way of grouping together widgets.\n\nPosition the \nFrame\n within the grid, then position widgets inside the \nFrame\n  \n\n\nStart/Stop Frames\n\n\n\n\n\n\n.startFrame(name)\n \n \n.stopFrame()\n\n    Used to start and stop a \nFrame\n.  \n\n\n\n\n\n\n.openFrame(title)\n\n    Used to reopen the named \nFrame\n.  \n\n\n\n\n\n\nScroll Pane\n\n\n\n\nA scrollable pane, to contain widgets.  \n\n\n\n\nWill respond to horizontal \n vertical scroll events on Mac \n Windows.  \n\n\nWill respond to horizontal scroll events, and interpret SHIFT-horizontal scroll events as vertical scroll events on Linux.  \n\n\n\n\nWill also respond to key presses:  \n\n\n\n\nUp \n Down: Move up or down the equivalent of a line  \n\n\nLeft \n Right: Move left or right the equivalent of a line  \n\n\nPageUp \n PageDown: Move up or down the equivalent of a page  \n\n\nCtrl-PageUp \n Ctrl-PageDown: Move left or right the equivalent of a page  \n\n\nCtrl-Up \n Ctrl-Down: Move up or down the equivalent of a page  \n\n\nCtrl-Left \n Ctrl-Right: Move left or right the equivalent of a page   \n\n\nHome \n End: Move to the top or bottom  \n\n\nCtrl-Home \n Ctrl-End: Move to the far-left or the far-right  \n\n\n\n\n\n\n\n\n.startScrollPane(title)\n \n \n.stopScrollPane()\n\n    Used to start and stop the \nScrollPane\n.  \n\n\n\n\n\n\n.openScrollPane(title)\n\n    Used to reopen the named \nScrollPane\n.",
            "title": "Grouping widgets"
        },
        {
            "location": "/pythonWidgetGrouping/#grouping-widgets",
            "text": "The standard way of using appJar, is simply to place all widgets into a single window. \nEverything is grouped into that single window, and any changes affect everything in that window.    It's sometimes desirable to group widgets together within a window. \nOr to have multiple  pages  of widgets. \nA number of options are provided to make this easier.",
            "title": "Grouping Widgets"
        },
        {
            "location": "/pythonWidgetGrouping/#format",
            "text": "All of these methods work in the same way. \nYou call the  start  function when you want to start a container, then the  stop  function when you're done. \nWhen you call  start  you can pass in positional arguments like any other widget (row, column, rowspan, colspan). \nAny  GUI Options  you set, within the container, will only affect that container.",
            "title": "Format"
        },
        {
            "location": "/pythonWidgetGrouping/#reopening-containers",
            "text": "If you want to dynamically add widgets to a container, once the gui has been started, you can open a specific container, perform the desired actions, then stop it again.  def addRows(btn):\n    count = app.getEntry( numRows )\n    app.openTab( tabbedPane ,  Details Tab ) # open the required tab\n    for rowLoop in range(count):\n        # add a new label, with a unique ID\n        # make sure to put it in the right place\n        app.addLabel( dyn +str(rowLoop),  Dynamic Label , rowLoop+5)\n    app.stopTab()",
            "title": "Reopening Containers"
        },
        {
            "location": "/pythonWidgetGrouping/#label-frame",
            "text": "A way of grouping widgets into a box, with a label at the top of the box. \nPosition the  LabelFrame  within the grid, then position widgets inside the  LabelFrame   from appJar import gui\n\napp=gui()\n\napp.startLabelFrame( Login Details )\n# these only affect the labelFrame\napp.setSticky( ew )\napp.setFont(20)\n\napp.addLabel( l1 ,  Name , 0, 0)\napp.addEntry( Name , 0, 1)\napp.addLabel( l2 ,  Password , 1, 0)\napp.addEntry( Password , 1, 1)\napp.addButtons([ Submit ,  Cancel ], None, 2, 0, 2)\napp.stopLabelFrame()\n\napp.go()",
            "title": "Label Frame"
        },
        {
            "location": "/pythonWidgetGrouping/#startstop-label-frames",
            "text": ".startLabelFrame(name)     .stopLabelFrame() \n    Used to start and stop a  LabelFrame \n    The specified title will be used as the label for the frame.      .openLabelFrame(title) \n    Used to reopen the named  LabelFrame .",
            "title": "Start/Stop Label Frames"
        },
        {
            "location": "/pythonWidgetGrouping/#set-label-frames",
            "text": ".setSticky(coords) \n    By default, widgets in the frame will align on the left. \n    If you want to change this, specify a different  sticky  value. \n    For example,  .setSticky(\"ew\")  will cause the widgets to stretch to fit the width, aligning in the centre.",
            "title": "Set Label Frames"
        },
        {
            "location": "/pythonWidgetGrouping/#toggle-frame",
            "text": "A collapsible container for a group of related widgets. \nBy default, the contents of the frame are hidden. \nThey can be revealed/hidden again by clicking an associated button.    from appJar import gui\n\napp=gui()\napp.setFont(20)\n\napp.startToggleFrame( Options )\napp.addCheckBox( Show this )\napp.addCheckBox( Show that )\napp.addCheckBox( Show the other )\napp.setCheckBox( Show that )\napp.stopToggleFrame()\n\napp.go()",
            "title": "Toggle Frame"
        },
        {
            "location": "/pythonWidgetGrouping/#startstop-toggle-frames",
            "text": ".startToggleFrame(title)     .stopToggleFrame(title) \n    Used to start and stop a  ToggleFrame . \n    The  title  will be used as the title for the  ToggleFrame .      .openToggleFrame(title) \n    Used to reopen the named  ToggleFrame .",
            "title": "Start/Stop Toggle Frames"
        },
        {
            "location": "/pythonWidgetGrouping/#set-toggle-frames",
            "text": ".toggleToggleFrame(title) \n    Will toggle the state of the specified  ToggleFrame .      .disableToggleFrame(title, disabled=True) \n    Will disable the specified  ToggleFrame . \n    If  disabled  is set to False, the  ToggleFrame  will be re-enabled.",
            "title": "Set Toggle Frames"
        },
        {
            "location": "/pythonWidgetGrouping/#get-toggle-frames",
            "text": ".getToggleFrameState(title) \n    Will return True if the  ToggleFrame  is open, else will return False.",
            "title": "Get Toggle Frames"
        },
        {
            "location": "/pythonWidgetGrouping/#tabbed-frame",
            "text": "A way to create a (basic) tabbed-style interface. \nPosition the  TabbedFrame  within the grid, start a  Tab , then position widgets inside the  Tab      from appJar import gui\n\napp=gui()\n\napp.startTabbedFrame( TabbedFrame )\napp.startTab( Tab1 )\napp.addLabel( l1 ,  Tab 1 Label )\napp.stopTab()\n\napp.startTab( Tab2 )\napp.addLabel( l2 ,  Tab 2 Label )\napp.stopTab()\n\napp.startTab( Tab3 )\napp.addLabel( l3 ,  Tab 3 Label )\napp.stopTab()\napp.stopTabbedFrame()\n\napp.go()",
            "title": "Tabbed Frame"
        },
        {
            "location": "/pythonWidgetGrouping/#startstop-tabbed-frames",
            "text": ".startTabbedFrame(name)     .stopTabbedFrame() \n    Used to start   stop the a  TabbedFrame , with the specified name.      .startTab(name)     .stopTab() \n    Used to start and stop each of the tabs in the  TabbedFrame . \n    The title for the tab will be the specified  name .      .openTabbedFrame(title)     .openTab(frameTitle, tabTitle) \n    Used to reopen the named  TabbedFrame  or named  Tab .",
            "title": "Start/Stop Tabbed Frames"
        },
        {
            "location": "/pythonWidgetGrouping/#set-tabbedframe",
            "text": ".setTabbedFrameTabExpand(title, expand=True) \n    By default, the tabs take up the minimum amount of space necessary. \n    Set this to True, to have the tabs fill the entire row.        .setTabbedFrameSelectedTab(title, tab) \n    Select the specified tab in the TabbedFrame.      .setTabbedFrameDisabledTab(title, tab, disabled=True) \n    Disable the specified tab in the TabbedFrame. \n    Set disabled to False to re-enable it. \n    This will also change the displayed tab, if the disaplyed tab is being disabled.      .setTabbedFrameDisableAllTabs(title, disabled=True) \n    Will disable all tabs for the named TabFrame. \n    Or, enable them if disabled is set to False.",
            "title": "Set TabbedFrame"
        },
        {
            "location": "/pythonWidgetGrouping/#changing-colours",
            "text": "TabbedFrames have a set of colours that can be changed:     ActiveFg - Sets the colour of the text in the active tab    ActiveBg - Sets the background colour of the active tab    InactiveFg - Sets the colour of the text in all inactive tabs    InactiveBG - Sets the background colour of all inactive tabs    DisabledFg - Sets the colour of the text in all disabled tabs    DisabledBg - Sets the background colour of all disabled tabs    Bg - Sets the background colour behind the widget - only visible at the end of the tabs     These are all changed via the standard property changing functions, eg:     .setTabbedFrameBg(\"t1\", \"red\")  .setTabbedFrameActiveBg(\"t1\", \"yellow\")   It is also possible to change the colour of individual panes. \nCall  .setBg(\"colour\")  while adding widgets to the specific pane. \nOr  .setTabBg(title, tab, 'colour')  at other times.",
            "title": "Changing Colours"
        },
        {
            "location": "/pythonWidgetGrouping/#get-tabbedframe",
            "text": ".getTabbedFrameSelectedTab(title) \n    Gets the name of the currently selected tab, for the named TabFrame.",
            "title": "Get TabbedFrame"
        },
        {
            "location": "/pythonWidgetGrouping/#paned-frame",
            "text": "A way to present re-sizable panes, separated by drag-bars. \nOnce the first pane is placed, all additional panes should be placed inside it. \nBy default, panes will be placed side-by-side (horizontally). \nThis can be changed by setting the pane to vertical, then they'll be placed underneath each other.",
            "title": "Paned Frame"
        },
        {
            "location": "/pythonWidgetGrouping/#startstop-paned-frames",
            "text": ".startPanedFrame(name) ,  .startPanedFrameVertical(name)     .stopPanedFrame() \n    Used to start   stop  PanedFrames , with the specified name. \n    By default, any panes added to this pane will be added side-by-side (horizontally). \n    Starting a vertical pane will cause additional panes to be stacked on top of each other.      .openPanedFrame(title) \n    Used to reopen the named  PanedFrame .",
            "title": "Start/Stop Paned Frames"
        },
        {
            "location": "/pythonWidgetGrouping/#horizontal-pane-layout",
            "text": "Start an initial pane    Start all additional panes inside the initial pane     from appJar import gui\napp = gui()\n\n# start initial pane\napp.startPanedFrame( p1 )\napp.addLabel( l1 ,  Inside Pane 1 )\n\n# start additional panes inside initial pane\napp.startPanedFrame( p2 )\napp.addLabel( l2 ,  Inside Pane 2 )\napp.stopPanedFrame()\n\napp.startPanedFrame( p3 )\napp.addLabel( l3 ,  Inside Pane 3 )\napp.stopPanedFrame()\n\n# stop initial pane\napp.stopPanedFrame()\n\napp.go()",
            "title": "Horizontal Pane Layout"
        },
        {
            "location": "/pythonWidgetGrouping/#vertical-pane-layout",
            "text": "Start an initial, vertical pane    Start all additional panes inside the intial pane     from appJar import gui\napp = gui()\n\n# start initial, vertical pane\napp.startPanedFrameVertical( p1 )\napp.addLabel( l1 ,  Inside Pane 1 )\n\n# start additional panes inside initial pane\napp.startPanedFrame( p2 )\napp.addLabel( l2 ,  Inside Pane 2 )\napp.stopPanedFrame()\n\napp.startPanedFrame( p3 )\napp.addLabel( l3 ,  Inside Pane 3 )\napp.stopPanedFrame()\n\n# stop initial pane\napp.stopPanedFrame()\n\napp.go()",
            "title": "Vertical Pane Layout"
        },
        {
            "location": "/pythonWidgetGrouping/#e-pane-layout",
            "text": "Start an initial pane    Start a second, vertical pane inside the intial pane    Start all additional panes inside the second pane     from appJar import gui\napp = gui()\n\n# start initial pane\napp.startPanedFrame( p1 )\napp.addLabel( l1 ,  Inside Pane 1 )\n\n# start second, vertical pane inside inital pane\napp.startPanedFrameVertical( p2 )\napp.addLabel( l2 ,  Inside Pane 2 )\n\n# start additional panes inside second pane\napp.startPanedFrame( p3 )\napp.addLabel( l3 ,  Inside Pane 3 )\napp.stopPanedFrame()\n\n# stop second   initial panes\napp.stopPanedFrame()\napp.stopPanedFrame()\n\napp.go()",
            "title": "E-Pane Layout"
        },
        {
            "location": "/pythonWidgetGrouping/#t-pane-layout",
            "text": "Start an initial, vertical pane    Start a second pane, indside the initial pane    Start additional panes inside the second pane     from appJar import gui\napp = gui()\n\n# start intial, vertical pane\napp.startPanedFrameVertical( p1 )\napp.addLabel( l1 ,  Inside Pane 1 )\n\n# start second pane\napp.startPanedFrame( p2 )\napp.addLabel( l2 ,  Inside Pane 2 )\n\n# start additional panes inside second pane \napp.startPanedFrame( p3 )\napp.addLabel( l3 ,  Inside Pane 3 )\napp.stopPanedFrame()\n\n# stop second   initial panes\napp.stopPanedFrame()\napp.stopPanedFrame()\n\napp.go()",
            "title": "T-Pane Layout"
        },
        {
            "location": "/pythonWidgetGrouping/#paged-window",
            "text": "A container that mimics a classic phone based interface. \nIt provides  PREVIOUS / NEXT  buttons to navigate through a series of pages. \nIt has an optional widget title, and shows the current page, in a page counter. \nKeyboard bindings are provided to navigate with arrow key presses. CTRL-arrow will navigate to the beginning/end. \nEvents can be bound to page changes, the page can be changed via a funciton call, and the current page number can be queried.   from appJar import gui\n\napp=gui()\n\napp.setBg( DarkKhaki )\napp.setGeometry(280,400)\n\napp.startPagedWindow( Main Title )\napp.startPage()\napp.addLabel( l13 ,  Label 1 )\napp.stopPage()\n\napp.startPage()\napp.addLabel( l21 ,  Label 2 )\napp.stopPage()\n\napp.startPage()\napp.addLabel( l3 ,  Label 3 )\napp.stopPage()\n\napp.startPage()\napp.addLabel( l4 ,  Label 4 )\napp.stopPage()\napp.stopPagedWindow()\n\napp.go()",
            "title": "Paged Window"
        },
        {
            "location": "/pythonWidgetGrouping/#startstop-paged-windows",
            "text": ".startPagedWindow(title)     .stopPagedWindow() \n    Used to start and stop a  PagedWindow . \n    The  title  will be used in the title section of the widget.      .startPage()     .stopPage() \n    Used to start and stop each new page. \n    Navigation, page count, etc are all dealt with automatically.      .openPagedWindow(title)     .openPage(windowTitle, pageNumber)   \n    Used to reopen the named  PagedWindow  or  Page .",
            "title": "Start/Stop Paged Windows"
        },
        {
            "location": "/pythonWidgetGrouping/#set-paged-windows",
            "text": ".setPagedWindowTitle(title, title)     .setPagedWindowButtons(title, [buttons]) \n    Used to change the text in the title and buttons. \n    When changing the buttons, two values must be passed in: previous/next.      .setPagedWindowButtonsTop(title, top=True) \n    Used to position the navigation buttons.  By default, they are at the bottom. \n    Call this funtion to move them to the top.      .setPagedWindowPage(title, pageNum) \n    Used to display the selected page.      .setPagedWindowFunction(title, function) \n    Declare a function to call, each time the page is changed.      .showPagedWindowPageNumber(title, show=True)     .showPagedWindowTitle(title, show=True) \n    Use these to declare if you want the page title, page numbers to be shown.",
            "title": "Set Paged Windows"
        },
        {
            "location": "/pythonWidgetGrouping/#get-paged-windows",
            "text": ".getPagedWindowPageNumber(title) \n    Used to get the page number currently being shown.",
            "title": "Get Paged Windows"
        },
        {
            "location": "/pythonWidgetGrouping/#sub-window",
            "text": "A way to add additional windows, which can be hidden and shown.   from appJar import gui\n\ndef launch(win):\n    app.showSubWindow(win)\n\napp=gui()\n\napp.startSubWindow( one , modal=True)\napp.addLabel( l1 ,  SubWindow One )\napp.stopSubWindow()\n\napp.startSubWindow( two )\napp.addLabel( l2 ,  SubWindow Two )\napp.stopSubWindow()\n\napp.addButtons([ one ,  two ], launch)\n\napp.go()",
            "title": "Sub Window"
        },
        {
            "location": "/pythonWidgetGrouping/#startstop-sub-windows",
            "text": ".startSubwindow(name, title=None, modal=False)     .stopSubwindow() \n    Used to start and stop defining a  SubWindow \n    Setting a  title  will override the  name  as a title for the  SubWindow .  \n    Setting  modal  to True, will prevent the user from interacting with the parent window until the  SubWindow  is closed.      .openSubWindow(title) \n    Used to reopen the named  SubWindow .",
            "title": "Start/Stop Sub Windows"
        },
        {
            "location": "/pythonWidgetGrouping/#showhide-sub-windows",
            "text": ".showSubWindow(title) \n    Will cause the specified  SubWindow  to be shown. \n    If it is set as  modal  the parent window will become uninteractive until the  SubWindow  is closed.      .hideSubWindow(title) \n    Used to hide the specified  SubWindow . \n    This will not destroy the  SubWindow , so it can be shown again later.      .destroySubWindow(title) \n    This will hide and permanently destroy the specified  SubWindow . \n    It cannot be shown again.      It's useful to be able to create a button that stops a SubWindow: \nIf you create a button, that calls  .hideSubWindow()  or  .destroySubWindow() , and give it the same name as the  SubWindow , then it will hide/destroy the  SubWindow , and call any  associated  .stopFunction() .    app.startSubWindow( Demo )\napp.addLabel( l1 ,  Press the button to close this window )\n# set the button's name to match the SubWindow's name\napp.addNamedButton( CLOSE ,  Demo , app.hideSubWindow)\napp.stopSubWindow()",
            "title": "Show/Hide Sub Windows"
        },
        {
            "location": "/pythonWidgetGrouping/#set-sub-windows",
            "text": "Note, all functions available on the main window are also available on  SubWindows . \nSimply call those functions after starting a  SubWindow .    app.startSubWindow( one , modal=True)\napp.setBg( orange )\napp.setGeometry( 400x400 )\napp.setTransparency(25)\napp.setStopFunction(checkDone)\napp.addLabel( l1 ,  In sub window )\napp.stopSubWindow()",
            "title": "Set Sub Windows"
        },
        {
            "location": "/pythonWidgetGrouping/#under-development",
            "text": "",
            "title": "Under Development"
        },
        {
            "location": "/pythonWidgetGrouping/#frame",
            "text": "A simple way of grouping together widgets. \nPosition the  Frame  within the grid, then position widgets inside the  Frame",
            "title": "Frame"
        },
        {
            "location": "/pythonWidgetGrouping/#startstop-frames",
            "text": ".startFrame(name)     .stopFrame() \n    Used to start and stop a  Frame .      .openFrame(title) \n    Used to reopen the named  Frame .",
            "title": "Start/Stop Frames"
        },
        {
            "location": "/pythonWidgetGrouping/#scroll-pane",
            "text": "A scrollable pane, to contain widgets.     Will respond to horizontal   vertical scroll events on Mac   Windows.    Will respond to horizontal scroll events, and interpret SHIFT-horizontal scroll events as vertical scroll events on Linux.     Will also respond to key presses:     Up   Down: Move up or down the equivalent of a line    Left   Right: Move left or right the equivalent of a line    PageUp   PageDown: Move up or down the equivalent of a page    Ctrl-PageUp   Ctrl-PageDown: Move left or right the equivalent of a page    Ctrl-Up   Ctrl-Down: Move up or down the equivalent of a page    Ctrl-Left   Ctrl-Right: Move left or right the equivalent of a page     Home   End: Move to the top or bottom    Ctrl-Home   Ctrl-End: Move to the far-left or the far-right       .startScrollPane(title)     .stopScrollPane() \n    Used to start and stop the  ScrollPane .      .openScrollPane(title) \n    Used to reopen the named  ScrollPane .",
            "title": "Scroll Pane"
        },
        {
            "location": "/pythonWidgetOptions/",
            "text": "Changing Widgets\n\n\n\n\nThere are a lot of things that can be change in a widget.\n\nThere is a pattern to how this works, you simply specify the widget type and the parameter, eg:\n\n\n\n\n.setLabelBg(name, value)\n\n\n.setButtonFg(name, value)\n\n\n.setListBoxState(name, value)\n\n\n\n\nThe list of widgets is defined in \ngui.WIDGETS\n, it contains:\nLabel, Message, Button, Entry, Scale, SpinBox, OptionBox, TextArea, Link, Meter, Image, RadioButton, CheckBox, ListBox, LabelFrame, PanedWindow, NoteBook\n\n\nBasic  Looks\n\n\n\n\nThe following options are available for all widgets:\n\n\n\n\n\n\n.set XXX Fg(name, value)\n\n    Sets the foreground colour (usually the text) of the named widget.\n\n\n\n\n\n\n.set XXX Bg(name, value)\n\n    Sets the background colour of the named widget.\n\n\n\n\n\n\n.set XXX DisabledFg(name, value)\n\n    Sets the disabled foreground colour (usually the text) of the named widget.\n\n\n\n\n\n\n.set XXX DisabledBg(name, value)\n\n    Sets the disabled background colour of the named widget.\n\n\n\n\n\n\n.set XXX ActiveFg(name, value)\n\n    Sets the active foreground colour (usually the text) of the named widget.\n\n\n\n\n\n\n.set XXX ActiveBg(name, value)\n\n    Sets the active background colour of the named widget.\n\n\n\n\n\n\n.set XXX Width(name, value)\n\n    Sets the width of the named widget.\n\n\n\n\n\n\n.set XXX Height(name, value)\n\n    Set the height of the named widget.\n\n\n\n\n\n\n.set XXX Relief(name, value)\n\n    Sets the border of the named widget. One of: \n\"sunken\"\n, \n\"raised\"\n, \n\"groove\"\n, \n\"ridge\"\n, \n\"flat\"\n  \n\n\n\n\n\n\n.set XXX State(name, value)\n\n    Sets the state of the named widget. One of: \n\"normal\"\n, \n\"active\"\n, \n\"disabled\"\n  \n\n\n\n\n\n\nIt's possible to change \nglobal GUI settings\n, such as the background and font.\n\nIf you need to modify individual settings of a widget, you can access it directly, and use the traditional tKinter methods.  \n\n\nTo change the font for a specific widget, try the following:\n\n\n\n\napp.addLabel(\nl1\n, \nTimes\n)\napp.addLabel(\nl2\n, \nComic Sans\n)\napp.addLabel(\nl3\n, \nHelvetica\n)\napp.addLabel(\nl4\n, \nSans Serif\n)\napp.addLabel(\nl5\n, \nVerdana\n)\napp.addLabel(\nl6\n, \nCourier\n)\n\napp.getLabelWidget(\nl1\n).config(font=\nTimes 20 italic underline\n)\napp.getLabelWidget(\nl2\n).config(font=(\nComic Sans\n, \n20\n, \nnormal\n))\napp.getLabelWidget(\nl3\n).config(font=\nHelvetica 20 underline\n)\napp.getLabelWidget(\nl4\n).config(font=(\nSans Serif\n, \n20\n, \nbold\n))\napp.getLabelWidget(\nl5\n).config(font=\nVerdana 20 overstrike\n)\napp.getLabelWidget(\nl6\n).config(font=\nCourier 20\n)\n\n\n\n\nAdvanced Looks\n\n\n\n\nThe following are supported by most widgets:\n\n\n\n\n\n\n.set XXX Align(name, value)\n\n    Specifies how to align text within the widget: \n\"left\"\n, \n\"right\"\n, \n\"center\"\n\n    Calls \njustify\n on the Entry widget, and anchor on all others (converting left/right into e/w)  .  \n\n\n\n\n\n\n.set XXX Anchor(name, value)\n\n    Sets where the text is positioned within the widget. One of: \n\"center\"\n, \n\"n\"\n, \n\"s\"\n, \n\"e\"\n, \n\"w\"\n, \n\"ne\"\n, \n\"nw\"\n, \n\"se\"\n, \n\"sw\"\n  \n\n\n\n\n\n\n.set XXX Sticky(name, value)\n\n    Specifies which side of the cell to stick the widget to, as the GUI expands: \n\"left\"\n, \n\"right\"\n, \n\"both\"\n\n\n\n\n\n\n.set XXX Padding(name, [x, y])\n\n    Set external padding of the named widget.  \n\n\n\n\n\n\n.set XXX InPadding(name, [x, y])\n\n    Set internal padding of the named widget.  \n\n\n\n\n\n\nFancy Options\n\n\n\n\n\n\n\n\n.set XXX Tooltip(name, value)\n\n    Sets a tooltip for the widget.\n    The specified text will be displayed in a small pop-up, when the mouse is left over the widget.\n\n\n\n\n\n\n.set XXX Cursor(name, value)\n\n    Sets the cursor shown, when the mouse goes over this widget.\n\n    There are lots of cursors available, for different platforms, see \nhere\n\n\n\n\n\n\n.set XXX RightClickMenu(name, menu)\n\n    Links the right-click menu to the specified widget.\n\n    Make sure you have created a right-click menu first, \n.createRightClickMenu(menu)\n and added some menu-items to it.\n\n    See \nMenubars\n for more info.  \n\n\n\n\n\n\n.set XXX Focus(name)\n\n    Gives focus to the specified widget. This is the widget where the user will be able to start typing.\n\n\n\n\n\n\nWidget Manipulation\n\n\n\n\nThe following allow widgets to be manipulated on screen:\n\n\n\n\n\n\n.disable XXX (name)\n\n    Disable the widget - stops the user from interacting with it, but keeps it visible.\n\n\n\n\n\n\n.enable XXX (name)\n\n    Enable a disabled widget.\n\n\n\n\n\n\n.hide XXX (name)\n\n    Temporarily hides the widget from view.\n\n\n\n\n\n\n.show XXX (name)\n\n    Show the widget, if it was already hidden.\n\n\n\n\n\n\n.remove XXX (name)\n\n    Permanently remove the widget (deletes it).\n\n\n\n\n\n\n.removeAllWidgets()\n\n    Permanently remove all widgets.\n\n\n\n\n\n\nGrouped Options\n\n\n\n\nThe following are convenience functions, for modifying a group of widgets:  \n\n\n\n\n\n\n.set XXX Widths(names, val)\n \n \n.set XXX Heights(names, val)\n\n    Sets the widths/heights of the specified widgets.\n\n\n\n\n\n\n.setAll XXX Widths(val)\n \n \n.setAll XXX Heights(val)\n\n    Sets the widths/heights of all widgets of the specified type.\n\n\n\n\n\n\ntkinter Options\n\n\n\n\nIt's also possible to request a widget, and modify it directly:  \n\n\n\n\n.get XXX Widget(name)\n\n    This will get the named widget of the specified type.\n\n    Any standard tkinter options can then be changed.",
            "title": "Changing widgets"
        },
        {
            "location": "/pythonWidgetOptions/#changing-widgets",
            "text": "There are a lot of things that can be change in a widget. \nThere is a pattern to how this works, you simply specify the widget type and the parameter, eg:   .setLabelBg(name, value)  .setButtonFg(name, value)  .setListBoxState(name, value)   The list of widgets is defined in  gui.WIDGETS , it contains:\nLabel, Message, Button, Entry, Scale, SpinBox, OptionBox, TextArea, Link, Meter, Image, RadioButton, CheckBox, ListBox, LabelFrame, PanedWindow, NoteBook",
            "title": "Changing Widgets"
        },
        {
            "location": "/pythonWidgetOptions/#basic-looks",
            "text": "The following options are available for all widgets:    .set XXX Fg(name, value) \n    Sets the foreground colour (usually the text) of the named widget.    .set XXX Bg(name, value) \n    Sets the background colour of the named widget.    .set XXX DisabledFg(name, value) \n    Sets the disabled foreground colour (usually the text) of the named widget.    .set XXX DisabledBg(name, value) \n    Sets the disabled background colour of the named widget.    .set XXX ActiveFg(name, value) \n    Sets the active foreground colour (usually the text) of the named widget.    .set XXX ActiveBg(name, value) \n    Sets the active background colour of the named widget.    .set XXX Width(name, value) \n    Sets the width of the named widget.    .set XXX Height(name, value) \n    Set the height of the named widget.    .set XXX Relief(name, value) \n    Sets the border of the named widget. One of:  \"sunken\" ,  \"raised\" ,  \"groove\" ,  \"ridge\" ,  \"flat\"       .set XXX State(name, value) \n    Sets the state of the named widget. One of:  \"normal\" ,  \"active\" ,  \"disabled\"       It's possible to change  global GUI settings , such as the background and font. \nIf you need to modify individual settings of a widget, you can access it directly, and use the traditional tKinter methods.    To change the font for a specific widget, try the following:   app.addLabel( l1 ,  Times )\napp.addLabel( l2 ,  Comic Sans )\napp.addLabel( l3 ,  Helvetica )\napp.addLabel( l4 ,  Sans Serif )\napp.addLabel( l5 ,  Verdana )\napp.addLabel( l6 ,  Courier )\n\napp.getLabelWidget( l1 ).config(font= Times 20 italic underline )\napp.getLabelWidget( l2 ).config(font=( Comic Sans ,  20 ,  normal ))\napp.getLabelWidget( l3 ).config(font= Helvetica 20 underline )\napp.getLabelWidget( l4 ).config(font=( Sans Serif ,  20 ,  bold ))\napp.getLabelWidget( l5 ).config(font= Verdana 20 overstrike )\napp.getLabelWidget( l6 ).config(font= Courier 20 )",
            "title": "Basic  Looks"
        },
        {
            "location": "/pythonWidgetOptions/#advanced-looks",
            "text": "The following are supported by most widgets:    .set XXX Align(name, value) \n    Specifies how to align text within the widget:  \"left\" ,  \"right\" ,  \"center\" \n    Calls  justify  on the Entry widget, and anchor on all others (converting left/right into e/w)  .      .set XXX Anchor(name, value) \n    Sets where the text is positioned within the widget. One of:  \"center\" ,  \"n\" ,  \"s\" ,  \"e\" ,  \"w\" ,  \"ne\" ,  \"nw\" ,  \"se\" ,  \"sw\"       .set XXX Sticky(name, value) \n    Specifies which side of the cell to stick the widget to, as the GUI expands:  \"left\" ,  \"right\" ,  \"both\"    .set XXX Padding(name, [x, y]) \n    Set external padding of the named widget.      .set XXX InPadding(name, [x, y]) \n    Set internal padding of the named widget.",
            "title": "Advanced Looks"
        },
        {
            "location": "/pythonWidgetOptions/#fancy-options",
            "text": ".set XXX Tooltip(name, value) \n    Sets a tooltip for the widget.\n    The specified text will be displayed in a small pop-up, when the mouse is left over the widget.    .set XXX Cursor(name, value) \n    Sets the cursor shown, when the mouse goes over this widget. \n    There are lots of cursors available, for different platforms, see  here    .set XXX RightClickMenu(name, menu) \n    Links the right-click menu to the specified widget. \n    Make sure you have created a right-click menu first,  .createRightClickMenu(menu)  and added some menu-items to it. \n    See  Menubars  for more info.      .set XXX Focus(name) \n    Gives focus to the specified widget. This is the widget where the user will be able to start typing.",
            "title": "Fancy Options"
        },
        {
            "location": "/pythonWidgetOptions/#widget-manipulation",
            "text": "The following allow widgets to be manipulated on screen:    .disable XXX (name) \n    Disable the widget - stops the user from interacting with it, but keeps it visible.    .enable XXX (name) \n    Enable a disabled widget.    .hide XXX (name) \n    Temporarily hides the widget from view.    .show XXX (name) \n    Show the widget, if it was already hidden.    .remove XXX (name) \n    Permanently remove the widget (deletes it).    .removeAllWidgets() \n    Permanently remove all widgets.",
            "title": "Widget Manipulation"
        },
        {
            "location": "/pythonWidgetOptions/#grouped-options",
            "text": "The following are convenience functions, for modifying a group of widgets:      .set XXX Widths(names, val)     .set XXX Heights(names, val) \n    Sets the widths/heights of the specified widgets.    .setAll XXX Widths(val)     .setAll XXX Heights(val) \n    Sets the widths/heights of all widgets of the specified type.",
            "title": "Grouped Options"
        },
        {
            "location": "/pythonWidgetOptions/#tkinter-options",
            "text": "It's also possible to request a widget, and modify it directly:     .get XXX Widget(name) \n    This will get the named widget of the specified type. \n    Any standard tkinter options can then be changed.",
            "title": "tkinter Options"
        },
        {
            "location": "/pythonGuiOptions/",
            "text": "GUI Options\n\n\n\n\nThere are a number of generic configurations available, which will affect the whole GUI.\n\nSome of these are also available at a widget level, where you can specify individual configurations tor specified widgets.  \n\n\nGUI Configuration\n\n\n\n\nSome basic configuration for the size, position, transparency, etc. of the GUI.\n\n\nLook \n Feel\n\n\n\n\n\n\n.setTitle(title)\n\n    Sets the title of the GUI. By default, it is the name of the script.\n\n\n\n\n\n\n.setIcon(fileName)\n\n    Sets an icon for the GUI.\n\n\n\n\n\n\n.setTransparency(percentage)\n\n    Sets how transparent the GUI is. Between 0 and 100%.\n\n\n\n\n\n\nSize \n Locaiton\n\n\n\n\n\n\n.setGeometry(geom)\n \n \n.setGeometry(width, height)\n\n    Sets the height \n width of the GUI:  \n\n\n\n\nEither as a single String \n.setGeometry(\"200x100\")\n (widthxheight)  \n\n\nAs two seperate parameters \n.setGeometry(200,100)\n\n\nOr to go \nFullscreen\n \n.setGeometry(\"Fullscreen\")\n  \n\n\n\n\n\n\n\n\n.exitFullscreen()\n\n    Leave fullscreen, if set in the geometry.  \n\n    Returns True/False - if the app was able to leave fullscreen.\n    Can be called safely, even if app is not in fullscreen:\n    \nEscape\n will call this automatically, while in fullscreen.  \n\n\n\n\n\n\nif app.exitFullscreen():\n    # do something\nelse:\n    app.setGeometry(\nfullscreen\n)\n    # do something else\n\n\n\n\n\n\n\n\n.setResizable(canResize=True)\n\n    Sets whether the GUI can be resized or not.  \n\n\n\n\n\n\n.setLocation(x, y)\n\n    Sets the position of the GUI.  \n\n\n\n\n\n\n.setGuiPadding(x, y)\n\n    Sets the size of the border inside the GUI - defaults to 2.  \n\n\n\n\n\n\n.hideTitleBar()\n \n \n.showTitleBar()\n\n    Hides/shows the GUI's title bar.\n\n    Note, if the title bar is removed, it's not possible to move or resize the GUI.  \n\n\n\n\n\n\nGUI Design\n\n\n\n\nIt's possible to change the default colours and fonts for widgets in the GUI.\n\n\nColour\n\n\n\n\n.setBg(colour)\n\n    Set the background colour for the entire GUI. This should affect all widgets, and will override any backgrounds set before.\n\n\n\n\nFont\n\n\nYou can describe a font using a String or a Tuple. There are three properties that can be set:  \n\n\n\n\nFamily - such as \nArial\n, \nCourier\n, \nComic Sans\n, \nSans Serif\n, \nTimes\n or \nVerdana\n  \n\n\nSize - the height in points  \n\n\nStyle - one or more of \nnormal\n, \nbold\n, \nroman\n, \nitalic\n, \nunderline\n \n \noverstrike\n  \n\n\n\n\nIf the family has a space, then you should use a tuple, otherwise you can simply pass a space separated string:  \n\n\nfont = \nTimes 16 bold underline\n\nfont = (\nComic Sans\n, \n20\n, \nunderline\n)\n\n\n\n\nIf the font can't be found, a default font will be used.  \n\n\n\n\n\n\n.setFont(size, font=None)\n\n    This can be used to set the font size and style for all widgets.\n\n\n\n\n\n\n.decreaseFont()\n \n \n.increaseFont()\n\n    These can be used to increase or decrease the font of all widgets.\n\n\n\n\n\n\n.setLabelFont(size, family=None)\n\n    This can be used to set the font size and style for all label-type widgets.\n\n\n\n\n\n\n.increaseLabelFont()\n \n \n.decreaseLabelFont()\n\n    These can be used to increase or decrease the font of all label-type widgets.\n\n\n\n\n\n\n.setButtonFont()\n\n    This can be used to set the font size and style for all button-type widgets.\n\n\n\n\n\n\n.increaseButtonFont()\n \n \n.decreaseButtonFont()\n\n    These can be used to increase or decrease the font of all butotn-type widgets.",
            "title": "GUI Options"
        },
        {
            "location": "/pythonGuiOptions/#gui-options",
            "text": "There are a number of generic configurations available, which will affect the whole GUI. \nSome of these are also available at a widget level, where you can specify individual configurations tor specified widgets.",
            "title": "GUI Options"
        },
        {
            "location": "/pythonGuiOptions/#gui-configuration",
            "text": "Some basic configuration for the size, position, transparency, etc. of the GUI.",
            "title": "GUI Configuration"
        },
        {
            "location": "/pythonGuiOptions/#look-feel",
            "text": ".setTitle(title) \n    Sets the title of the GUI. By default, it is the name of the script.    .setIcon(fileName) \n    Sets an icon for the GUI.    .setTransparency(percentage) \n    Sets how transparent the GUI is. Between 0 and 100%.",
            "title": "Look &amp; Feel"
        },
        {
            "location": "/pythonGuiOptions/#size-locaiton",
            "text": ".setGeometry(geom)     .setGeometry(width, height) \n    Sets the height   width of the GUI:     Either as a single String  .setGeometry(\"200x100\")  (widthxheight)    As two seperate parameters  .setGeometry(200,100)  Or to go  Fullscreen   .setGeometry(\"Fullscreen\")        .exitFullscreen() \n    Leave fullscreen, if set in the geometry.   \n    Returns True/False - if the app was able to leave fullscreen.\n    Can be called safely, even if app is not in fullscreen:\n     Escape  will call this automatically, while in fullscreen.      if app.exitFullscreen():\n    # do something\nelse:\n    app.setGeometry( fullscreen )\n    # do something else    .setResizable(canResize=True) \n    Sets whether the GUI can be resized or not.      .setLocation(x, y) \n    Sets the position of the GUI.      .setGuiPadding(x, y) \n    Sets the size of the border inside the GUI - defaults to 2.      .hideTitleBar()     .showTitleBar() \n    Hides/shows the GUI's title bar. \n    Note, if the title bar is removed, it's not possible to move or resize the GUI.",
            "title": "Size &amp; Locaiton"
        },
        {
            "location": "/pythonGuiOptions/#gui-design",
            "text": "It's possible to change the default colours and fonts for widgets in the GUI.",
            "title": "GUI Design"
        },
        {
            "location": "/pythonGuiOptions/#colour",
            "text": ".setBg(colour) \n    Set the background colour for the entire GUI. This should affect all widgets, and will override any backgrounds set before.",
            "title": "Colour"
        },
        {
            "location": "/pythonGuiOptions/#font",
            "text": "You can describe a font using a String or a Tuple. There are three properties that can be set:     Family - such as  Arial ,  Courier ,  Comic Sans ,  Sans Serif ,  Times  or  Verdana     Size - the height in points    Style - one or more of  normal ,  bold ,  roman ,  italic ,  underline     overstrike      If the family has a space, then you should use a tuple, otherwise you can simply pass a space separated string:    font =  Times 16 bold underline \nfont = ( Comic Sans ,  20 ,  underline )  If the font can't be found, a default font will be used.      .setFont(size, font=None) \n    This can be used to set the font size and style for all widgets.    .decreaseFont()     .increaseFont() \n    These can be used to increase or decrease the font of all widgets.    .setLabelFont(size, family=None) \n    This can be used to set the font size and style for all label-type widgets.    .increaseLabelFont()     .decreaseLabelFont() \n    These can be used to increase or decrease the font of all label-type widgets.    .setButtonFont() \n    This can be used to set the font size and style for all button-type widgets.    .increaseButtonFont()     .decreaseButtonFont() \n    These can be used to increase or decrease the font of all butotn-type widgets.",
            "title": "Font"
        },
        {
            "location": "/pythonEvents/",
            "text": "Events\n\n\n\n\nThe whole point of GUIs is \nevents\n!   \n\n\nWe want events to be generated whenever the user does something, such as clicking a button, moving a scale, or pressing a key...\n\n\nWe also, sometimes, want events to happen repeatedly...\n\n\nMake stuff happen...\n\n\n\n\nTo make something happen you have to set a function for a widget:  \n\n\n\n\n\n\n.set XXX Function(title, function, key=None)\n  \n\n\nThis binds a function to the named widget:  \n\n\n\n\nFor Scales, OptionBoxes, SpinBoxes, ListBoxes, RadioButtons \n CheckButtons the function will be called each time the widget is changed.  \n\n\nFor Entries it binds a function to the \nReturn\n key, allowing the Entry to be \nsubmitted\n.  \n\n\nFor Buttons it binds a function to the \nReturn\n key.  \n\n\nFor Labels \n Images it binds a function to the \nLeft-Mouse-Button\n, making the widget clickable.  \n\n\nFor other widgets, it will set the \ncommand\n property for the underlying tkinter widget.  \n\n\n\n\n\n\n\n\nfrom appJar import gui\n\ndef songChanged(rb):\n    print(app.getRadioButton(rb))\n\napp=gui()\napp.addRadioButton(\nsong\n, \nKiller Queen\n)\napp.addRadioButton(\nsong\n, \nParadise City\n)\napp.setRadioButtonFunction(\nsong\n, songChanged)\napp.go()\n\n\n\n\n\n\n.set XXX OverFunction(name, [inFunction, outFunction])\n\n    Set functions to call whenever the mouse enters (goes over) or leaves the specified widget.\n\n    The first function is called when the mouse first enters the widget.\n\n    The second function is called when the mouse leaves the widget.\n\n    If you only want a function to be called when the mouse leaves the widget, pass an array like: \n[None, leave]\n  \n\n\n\n\n    from appJar import gui\n\n    def enter(wdgt): \n        print(\nIN\n, wdgt)\n    def leave(wdgt):\n        print(\nOUT\n, wdgt)\n\n    app=gui()\n    app.addLabel(\nl1\n, \nTesting...\n)\n    app.setLabelOverFunction(\nl1\n, [enter, leave])\n    app.go()\n\n\n\n\n\n\n.set XXX DragFunction(name, [startDragFunction, stopDragFunction])\n\n    Set functions to call whenever the mouse button is clicked and dragged.\n\n    The first function will be called when the mouse is initially clicked.\n\n    The second function will be called when the mouse is released.\n\n    The same rules for passing functions apply as above.  \n\n\n\n\nRegistering Other Event Types\n\n\nIt's possible to register any ot the standard event types with appJar widgets  \n\n\napp.getEntryWidget(\nwidget_name\n).bind(\nFocusOut\n, function_name, add=\n+\n)\n\n\n\n\nBinding Keys\n\n\nAs well as changing widgets, we sometimes want keys to trigger events.\n\nThe classic example is the \nReturn\n key, we often want to be able to hit the \nReturn\n key to submit a form...\n\n\n\n\n\n\n.enableEnter(function)\n\nLink a function to the \nReturn\n key\n\n\n\n\n\n\n.disableEnter()\n\nUnlink a function form the \nReturn\n  key\n\n\n\n\n\n\nYou may also want to bind other keys to events.  \n\n\n\n\n\n\n.bindKey(key, function)\n\nLink the specified key to the specified function.\n\n\n\n\n\n\n.unbindKey(key)\n\nUnlink the specified key from any functions bound to it.\n\n\n\n\n\n\nRepeating Events\n\n\nSometimes, you want events to keep happening in the background.\n\nGUIs aren't so great at this - if you have a loop in your prgram, the GUI will \nhang\n (stop working until the loop finishes).\n\nLuckily, we have a solution,,,\n\n\n\n\n\n\n.registerEvent(function)\n\nThis will cause the GUI to keep repeating the named function in the background.\n\nThe function should repeat every second.  \n\n\n\n\n\n\n.setPollTime(time)\n\nIf you want your events to be called more or less frequently, set the frequency here.\n\n\n\n\n\n\nThis is great for updating statuses, checking for messages, etc...\n\n\n#function to set the status bar\ndef getLocation():\n    x,y,z = mc.player.getPos()\n    app.setStatusbar(\nX: \n+ str(round(x,3)), 0)\n    app.setStatusbar(\nY: \n+ str(round(y,3)), 1)\n    app.setStatusbar(\nZ: \n+ str(round(z,3)), 2)\n\n# call the getLocation function every second\napp.registerEvent(getLocation)\n\n\n\n\nStopping the GUI\n\n\nUsually the user just presses the \nclose icon\n to stop the GUI.\n\nHowever, you might want to let them do it in other ways - maybe by pressing a button...\nTo stop the GUI, simply call \napp.stop()\n  \n\n\nIf you want to add a feature to confirm the user really wants to exit, or to save some data, then you'll need a \nstop function\n.  \n\n\n\n\n.setStopFunction(function)\n\n    Set a function to call, before allowing the GUI to be stopped.\n\n    This function should return True/False to confirm if the GUI should stop.  \n\n\n\n\ndef checkStop():\n    return app.yesNoBox(\nConfirm Exit\n, \nAre you sure you want to exit the application?\n)\n\napp.setStopFunction(checkStop)",
            "title": "GUI Events"
        },
        {
            "location": "/pythonEvents/#events",
            "text": "The whole point of GUIs is  events !     We want events to be generated whenever the user does something, such as clicking a button, moving a scale, or pressing a key...  We also, sometimes, want events to happen repeatedly...",
            "title": "Events"
        },
        {
            "location": "/pythonEvents/#make-stuff-happen",
            "text": "To make something happen you have to set a function for a widget:      .set XXX Function(title, function, key=None)     This binds a function to the named widget:     For Scales, OptionBoxes, SpinBoxes, ListBoxes, RadioButtons   CheckButtons the function will be called each time the widget is changed.    For Entries it binds a function to the  Return  key, allowing the Entry to be  submitted .    For Buttons it binds a function to the  Return  key.    For Labels   Images it binds a function to the  Left-Mouse-Button , making the widget clickable.    For other widgets, it will set the  command  property for the underlying tkinter widget.       from appJar import gui\n\ndef songChanged(rb):\n    print(app.getRadioButton(rb))\n\napp=gui()\napp.addRadioButton( song ,  Killer Queen )\napp.addRadioButton( song ,  Paradise City )\napp.setRadioButtonFunction( song , songChanged)\napp.go()   .set XXX OverFunction(name, [inFunction, outFunction]) \n    Set functions to call whenever the mouse enters (goes over) or leaves the specified widget. \n    The first function is called when the mouse first enters the widget. \n    The second function is called when the mouse leaves the widget. \n    If you only want a function to be called when the mouse leaves the widget, pass an array like:  [None, leave]          from appJar import gui\n\n    def enter(wdgt): \n        print( IN , wdgt)\n    def leave(wdgt):\n        print( OUT , wdgt)\n\n    app=gui()\n    app.addLabel( l1 ,  Testing... )\n    app.setLabelOverFunction( l1 , [enter, leave])\n    app.go()   .set XXX DragFunction(name, [startDragFunction, stopDragFunction]) \n    Set functions to call whenever the mouse button is clicked and dragged. \n    The first function will be called when the mouse is initially clicked. \n    The second function will be called when the mouse is released. \n    The same rules for passing functions apply as above.",
            "title": "Make stuff happen..."
        },
        {
            "location": "/pythonEvents/#registering-other-event-types",
            "text": "It's possible to register any ot the standard event types with appJar widgets    app.getEntryWidget( widget_name ).bind( FocusOut , function_name, add= + )",
            "title": "Registering Other Event Types"
        },
        {
            "location": "/pythonEvents/#binding-keys",
            "text": "As well as changing widgets, we sometimes want keys to trigger events. \nThe classic example is the  Return  key, we often want to be able to hit the  Return  key to submit a form...    .enableEnter(function) \nLink a function to the  Return  key    .disableEnter() \nUnlink a function form the  Return   key    You may also want to bind other keys to events.      .bindKey(key, function) \nLink the specified key to the specified function.    .unbindKey(key) \nUnlink the specified key from any functions bound to it.",
            "title": "Binding Keys"
        },
        {
            "location": "/pythonEvents/#repeating-events",
            "text": "Sometimes, you want events to keep happening in the background. \nGUIs aren't so great at this - if you have a loop in your prgram, the GUI will  hang  (stop working until the loop finishes). \nLuckily, we have a solution,,,    .registerEvent(function) \nThis will cause the GUI to keep repeating the named function in the background. \nThe function should repeat every second.      .setPollTime(time) \nIf you want your events to be called more or less frequently, set the frequency here.    This is great for updating statuses, checking for messages, etc...  #function to set the status bar\ndef getLocation():\n    x,y,z = mc.player.getPos()\n    app.setStatusbar( X:  + str(round(x,3)), 0)\n    app.setStatusbar( Y:  + str(round(y,3)), 1)\n    app.setStatusbar( Z:  + str(round(z,3)), 2)\n\n# call the getLocation function every second\napp.registerEvent(getLocation)",
            "title": "Repeating Events"
        },
        {
            "location": "/pythonEvents/#stopping-the-gui",
            "text": "Usually the user just presses the  close icon  to stop the GUI. \nHowever, you might want to let them do it in other ways - maybe by pressing a button...\nTo stop the GUI, simply call  app.stop()     If you want to add a feature to confirm the user really wants to exit, or to save some data, then you'll need a  stop function .     .setStopFunction(function) \n    Set a function to call, before allowing the GUI to be stopped. \n    This function should return True/False to confirm if the GUI should stop.     def checkStop():\n    return app.yesNoBox( Confirm Exit ,  Are you sure you want to exit the application? )\n\napp.setStopFunction(checkStop)",
            "title": "Stopping the GUI"
        },
        {
            "location": "/pythonInternationalisation/",
            "text": "Internationalisation\n\n\n\n\nappJar offers a simple method for supporting multiple languages.  \n\n\nFile Format\n\n\nA config file needs to be created, for each language, with translations for each widget:\n\n\n ENGLISH.ini\n---\n[LABEL]\nl1: some text\nl2: some more text\n\n[BUTTON]\nb1: button a\nb2: button b\n\n[LINK]\nl1: New link title\n\n\n\n\nWhen widgets are added, their ID will be used to look up a translation.\n\nIf no translation is found, the widget's initial value will be used as a default.  \n\n\nThe filename should be in all uppercase, of type \n.ini\n  \n\n\nImplementation\n\n\nfrom appJar import gui\n\napp=gui(\nLanguages\n)\n\napp.addLabel(\nl1\n, \ndefault text\n)\napp.addLabel(\nl2\n, \ndefault text\n)\napp.addLabel(\nl3\n, \ndefault text\n)\n\n# as long as the language file has the same name as the button\n# the button can call .changeLanguage directly\napp.addButtons([\nEnglish\n, \nFrancais\n, \n\ud55c\uae00\n], app.changeLanguage)\n\napp.go(\nenglish\n)\n\n\n\n\nThe starting language must be set in the call to \n.go(language)\n\nTo change the language, call \n.changeLanguage(language)\n  \n\n\nThese will look for a file called \nLANGUAGE.ini\n\n\nWidget Support\n\n\nNot all widget's are supported, and some require a bit more effort to get them to work properly.\n\nNote, changing the text of a widget through \nsetXXX()\n method's will work, but will not be rememberd if the language is changed.  \n\n\n\n\n\n\nAuto-labelled Widgets\n\n    Any widgets created with an \nauto-label\n can be changed under the \n[LABEL]\n option below.  \n\n\n\n\n\n\n[LABEL]\n,  \n[BUTTON]\n, \n[CHECKBOX]\n, \n[MESSAGE]\n, \n[LINK]\n\n    The label id, followed by the text to put in it.\n\n    Any widgets added with labels \n.addLabelEntry()\n are also changed here.  \n\n\n\n\n\n\n[RADIOBUTTON]\n\n    Radio-buttons are a little tricky. The key has two parts: the \ngroup\n \n \nitem\n\n    If you used: \n.addRadioButton(\"Food\", \"f1\")\n the entry in the \n.ini\n file would be:\n    \nFood-f1: french_food_name\n  \n\n\n\n\n\n\n[ENTRY]\n\n    The text provided here wil be used for the default value, if one is being used.  \n\n\n\n\n\n\n[SCALE]\n, \n[TEXTAREA]\n, \n[METER]\n\n    These widgets have no text to change.  \n\n\n\n\n\n\n[LISTBOX]\n, \n[SPIN]\n, \n[OPTION]\n\n    Each value should be on a new line\n\n    Doesn't work for SpinBoxes, when generated from a range.  \n\n\n\n\n\n\n[LISTBOX]\nfruits:\n    apples\n    pears\n    grapes\n    bananas\n\n\n\n\n\n\n\n\nThe following are currently in development:\n\n\n[LABELFRAME]\n, \n[TABBEDFRAME]\n, \n[PAGEDWINDOW]\n, \n[TOGGLEFRAME]\n\n\n[PROPERTIES]\n, \n[POPUP]\n, \n[PIECHART]\n, \n[TREE]\n, \n[GRID]\n\n\n[MENUBAR]\n, \n[STATUSBAR]\n, \n[TOOLBAR]\n, \n[TOOLTIP]\n, \n[TITLE]\n\n\n[SOUND]\n \n \n[IMAGE]\n  \n\n\n\n\n\n\n[EXTERNAL]\n\n    It will be possible to request translations for non appJar data.  \n\n\n\n\n\n\nPlatform Support\n\n\nNote, your platform might not support the characters you want to display.\n\nIn which case, you'll need to install the relevant font.\n\nFor example, to get Korean characters to show on raspberry Pi, try:\n\n\nsudo apt-get install fonts-nanum\n  \n\n\nIf you're after other languages, you can try:\n\n\napt-cache search chinese\n and then install a likely looking font...",
            "title": "Internationalisation"
        },
        {
            "location": "/pythonInternationalisation/#internationalisation",
            "text": "appJar offers a simple method for supporting multiple languages.",
            "title": "Internationalisation"
        },
        {
            "location": "/pythonInternationalisation/#file-format",
            "text": "A config file needs to be created, for each language, with translations for each widget:   ENGLISH.ini\n---\n[LABEL]\nl1: some text\nl2: some more text\n\n[BUTTON]\nb1: button a\nb2: button b\n\n[LINK]\nl1: New link title  When widgets are added, their ID will be used to look up a translation. \nIf no translation is found, the widget's initial value will be used as a default.    The filename should be in all uppercase, of type  .ini",
            "title": "File Format"
        },
        {
            "location": "/pythonInternationalisation/#implementation",
            "text": "from appJar import gui\n\napp=gui( Languages )\n\napp.addLabel( l1 ,  default text )\napp.addLabel( l2 ,  default text )\napp.addLabel( l3 ,  default text )\n\n# as long as the language file has the same name as the button\n# the button can call .changeLanguage directly\napp.addButtons([ English ,  Francais ,  \ud55c\uae00 ], app.changeLanguage)\n\napp.go( english )  The starting language must be set in the call to  .go(language) \nTo change the language, call  .changeLanguage(language)     These will look for a file called  LANGUAGE.ini",
            "title": "Implementation"
        },
        {
            "location": "/pythonInternationalisation/#widget-support",
            "text": "Not all widget's are supported, and some require a bit more effort to get them to work properly. \nNote, changing the text of a widget through  setXXX()  method's will work, but will not be rememberd if the language is changed.      Auto-labelled Widgets \n    Any widgets created with an  auto-label  can be changed under the  [LABEL]  option below.      [LABEL] ,   [BUTTON] ,  [CHECKBOX] ,  [MESSAGE] ,  [LINK] \n    The label id, followed by the text to put in it. \n    Any widgets added with labels  .addLabelEntry()  are also changed here.      [RADIOBUTTON] \n    Radio-buttons are a little tricky. The key has two parts: the  group     item \n    If you used:  .addRadioButton(\"Food\", \"f1\")  the entry in the  .ini  file would be:\n     Food-f1: french_food_name       [ENTRY] \n    The text provided here wil be used for the default value, if one is being used.      [SCALE] ,  [TEXTAREA] ,  [METER] \n    These widgets have no text to change.      [LISTBOX] ,  [SPIN] ,  [OPTION] \n    Each value should be on a new line \n    Doesn't work for SpinBoxes, when generated from a range.      [LISTBOX]\nfruits:\n    apples\n    pears\n    grapes\n    bananas    The following are currently in development:  [LABELFRAME] ,  [TABBEDFRAME] ,  [PAGEDWINDOW] ,  [TOGGLEFRAME]  [PROPERTIES] ,  [POPUP] ,  [PIECHART] ,  [TREE] ,  [GRID]  [MENUBAR] ,  [STATUSBAR] ,  [TOOLBAR] ,  [TOOLTIP] ,  [TITLE]  [SOUND]     [IMAGE]       [EXTERNAL] \n    It will be possible to request translations for non appJar data.",
            "title": "Widget Support"
        },
        {
            "location": "/pythonInternationalisation/#platform-support",
            "text": "Note, your platform might not support the characters you want to display. \nIn which case, you'll need to install the relevant font. \nFor example, to get Korean characters to show on raspberry Pi, try:  sudo apt-get install fonts-nanum     If you're after other languages, you can try:  apt-cache search chinese  and then install a likely looking font...",
            "title": "Platform Support"
        },
        {
            "location": "/examples/minecraft/",
            "text": "Minecraft\n\n\n\n\nLinking appJar with Minecraft on the Raspberry Pi is super easy!\n\nSimply import the Minecraft library and appJar library and have appJar call Minecraft functions...  \n\n\nChat\n\n\nFirst, let's set up a simple chat entry box.\n\n\n\n\nfrom appJar import gui\nfrom mcpi.minecraft import Minecraft\n\n# function to send messages to minecraft server\ndef sendMsg(btn):\n    msg = app.getEntry(\nChat\n)\n    mc.postToChat(msg)\n\nmc = Minecraft.create() # minecraft connection\n\n# main GUI block\napp = gui(\nMinecraft\n) # GUI\n\napp.addLabelEntry(\nChat\n, 0, )\napp.addButton(\nSend\n, sendMsg, 0, 1)\n\napp.go()\n\n\n\n\nYou can jazz this up a bit, by setting the focus and linking the \n key to submit chat messages, oh and set the location so it doesn't appear under the Minecraft window..\n\n\n# put this in the main GUI block\napp.setEntryFocus(\nChat\n)\napp.setEntryFunction(\nChat\n, sendMsg)\napp.setLocation(100,100)\n\n\n\n\nMovement\n\n\nNext, let's add some movement controls... \n\n\n\n#function to move the minecraft character\ndef move(btn):\n    x,y,z = mc.player.getPos()\n\n    if btn == \nLEFT\n:\n        x -= 1\n    elif btn == \nRIGHT\n:\n        x += 1\n    elif btn == \nFORWARD\n:\n        z -= 1\n    elif btn == \nBACKWARD\n:\n        z += 1\n    elif btn == \nJUMP\n:\n        y += 1\n        z -= 1 \n\n    mc.player.setPos(x, y, z)\n\n# put this in the main GUI block\napp.startLabelFrame(\nMove Me\n, colspan=2)\napp.setSticky(\nEW\n)\napp.addButton(\nFORWARD\n, move)\napp.addButtons([\nLEFT\n, \nJUMP\n, \nRIGHT\n], move)\napp.addButton(\nBACKWARD\n, move)\napp.stopLabelFrame()\n\n\n\n\nYou can jazz this up to, by linking keys up to the functions...  \n\n\n# add this to the main GUI block\napp.bindKey(\nLeft\n, move)\napp.bindKey(\nRight\n, move)\napp.bindKey(\nUp\n, move)\napp.bindKey(\nDown\n, move)\napp.bindKey(\nSpace\n, move)\n\n# then change the move function to register both events\n# if btn == \nLEFT\n or btn == \nLeft\n ... and so on\n\n\n\n\nStatus\n\n\nAnother cool feature, is a status bar that tells us where we're at...\n\n\n\n\n#function to set the status bar\ndef getLocation():\n    x,y,z = mc.player.getPos()\n    app.setStatusbar(\nX: \n+ str(round(x,3)), 0)\n    app.setStatusbar(\nY: \n+ str(round(y,3)), 1)\n    app.setStatusbar(\nZ: \n+ str(round(z,3)), 2)\n\n# put this in the main GUI block\napp.addStatusbar(fields=3)\n# call the update function every second\napp.registerEvent(getLocation)\n\n\n\n\nDropping blocks\n\n\nNext, let's add the ability to drop blocks.  \n\n\n\n\n# function to drop a block just in front\ndef drop(btn):\n    playerBlock = app.getOptionBox(\nBlock\n)\n    blockId = BLOCKS[playerBlock]\n    x,y,z = mc.player.getPos()\n    mc.setBlock(x, y+1, z-1, blockId)\n\n# put this in the main GUI block\napp.addLabelOptionBox(\nBlock\n, blockNames, colspan=2)\napp.addButton(\nDrop\n, drop, colspan=2)\n\n\n\n\nThe issue we have is building a disctionary of block names linked to block IDs. You can try this one out, or make your own...  \n\n\n# put this near the top of your code\nBLOCKS={ \nAIR\n:0, \nSTONE\n:1, \nGRASS\n:2, \nDIRT\n:3, \nCOBBLESTONE\n:4,\n    \nWOOD_PLANKS\n:5, \nSAPLING\n:6, \nBEDROCK\n:7, \nWATER_FLOWING\n:8, \nWATER\n:8,\n    \nWATER_STATIONARY\n:9, \nLAVA_FLOWING\n:10, \nLAVA\n:10, \nLAVA_STATIONARY\n:11,\n    \nSAND\n:12, \nGRAVEL\n:13, \nGOLD_ORE\n:14, \nIRON_ORE\n:15, \nCOAL_ORE\n:16,\n    \nWOOD\n:17, \nLEAVES\n:18, \nGLASS\n:20, \nLAPIS_LAZULI_ORE\n:21,\n    \nLAPIS_LAZULI_BLOCK\n:22, \nSANDSTONE\n:24, \nBED\n:26, \nCOBWEB\n:30,\n    \nGRASS_TALL\n:31, \nWOOL\n:35, \nFLOWER_YELLOW\n:37, \nFLOWER_CYAN\n:38,\n    \nMUSHROOM_BROWN\n:39, \nMUSHROOM_RED\n:40, \nGOLD_BLOCK\n:41, \nIRON_BLOCK\n:42,\n    \nSTONE_SLAB_DOUBLE\n:43, \nSTONE_SLAB\n:44, \nBRICK_BLOCK\n:45, \nTNT\n:46,\n    \nBOOKSHELF\n:47, \nMOSS_STONE\n:48, \nOBSIDIAN\n:49, \nTORCH\n:50, \nFIRE\n:51,\n    \nSTAIRS_WOOD\n:53, \nCHEST\n:54, \nDIAMOND_ORE\n:56, \nDIAMOND_BLOCK\n:57,\n    \nCRAFTING_TABLE\n:58, \nFARMLAND\n:60, \nFURNACE_INACTIVE\n:61,\n    \nFURNACE_ACTIVE\n:62, \nDOOR_WOOD\n:64, \nLADDER\n:65, \nSTAIRS_COBBLESTONE\n:67,\n    \nDOOR_IRON\n:71, \nREDSTONE_ORE\n:73, \nSNOW\n:78, \nICE\n:79, \nSNOW_BLOCK\n:80,\n    \nCACTUS\n:81, \nCLAY\n:82, \nSUGAR_CANE\n:83, \nFENCE\n:85, \nGLOWSTONE_BLOCK\n:89,\n    \nBEDROCK_INVISIBLE\n:95, \nSTONE_BRICK\n:98, \nGLASS_PANE\n:102, \nMELON\n:103,\n    \nFENCE_GATE\n:107, \nGLOWING_OBSIDIAN\n:246, \nNETHER_REACTOR_CORE\n:247 \n}\nblockNames=list(BLOCKS.keys())\nblockNames.sort()",
            "title": "Raspberry Pi Minecraft"
        },
        {
            "location": "/examples/minecraft/#minecraft",
            "text": "Linking appJar with Minecraft on the Raspberry Pi is super easy! \nSimply import the Minecraft library and appJar library and have appJar call Minecraft functions...",
            "title": "Minecraft"
        },
        {
            "location": "/examples/minecraft/#chat",
            "text": "First, let's set up a simple chat entry box.   from appJar import gui\nfrom mcpi.minecraft import Minecraft\n\n# function to send messages to minecraft server\ndef sendMsg(btn):\n    msg = app.getEntry( Chat )\n    mc.postToChat(msg)\n\nmc = Minecraft.create() # minecraft connection\n\n# main GUI block\napp = gui( Minecraft ) # GUI\n\napp.addLabelEntry( Chat , 0, )\napp.addButton( Send , sendMsg, 0, 1)\n\napp.go()  You can jazz this up a bit, by setting the focus and linking the   key to submit chat messages, oh and set the location so it doesn't appear under the Minecraft window..  # put this in the main GUI block\napp.setEntryFocus( Chat )\napp.setEntryFunction( Chat , sendMsg)\napp.setLocation(100,100)",
            "title": "Chat"
        },
        {
            "location": "/examples/minecraft/#movement",
            "text": "Next, let's add some movement controls...   #function to move the minecraft character\ndef move(btn):\n    x,y,z = mc.player.getPos()\n\n    if btn ==  LEFT :\n        x -= 1\n    elif btn ==  RIGHT :\n        x += 1\n    elif btn ==  FORWARD :\n        z -= 1\n    elif btn ==  BACKWARD :\n        z += 1\n    elif btn ==  JUMP :\n        y += 1\n        z -= 1 \n\n    mc.player.setPos(x, y, z)\n\n# put this in the main GUI block\napp.startLabelFrame( Move Me , colspan=2)\napp.setSticky( EW )\napp.addButton( FORWARD , move)\napp.addButtons([ LEFT ,  JUMP ,  RIGHT ], move)\napp.addButton( BACKWARD , move)\napp.stopLabelFrame()  You can jazz this up to, by linking keys up to the functions...    # add this to the main GUI block\napp.bindKey( Left , move)\napp.bindKey( Right , move)\napp.bindKey( Up , move)\napp.bindKey( Down , move)\napp.bindKey( Space , move)\n\n# then change the move function to register both events\n# if btn ==  LEFT  or btn ==  Left  ... and so on",
            "title": "Movement"
        },
        {
            "location": "/examples/minecraft/#status",
            "text": "Another cool feature, is a status bar that tells us where we're at...  \n#function to set the status bar\ndef getLocation():\n    x,y,z = mc.player.getPos()\n    app.setStatusbar( X:  + str(round(x,3)), 0)\n    app.setStatusbar( Y:  + str(round(y,3)), 1)\n    app.setStatusbar( Z:  + str(round(z,3)), 2)\n\n# put this in the main GUI block\napp.addStatusbar(fields=3)\n# call the update function every second\napp.registerEvent(getLocation)",
            "title": "Status"
        },
        {
            "location": "/examples/minecraft/#dropping-blocks",
            "text": "Next, let's add the ability to drop blocks.     # function to drop a block just in front\ndef drop(btn):\n    playerBlock = app.getOptionBox( Block )\n    blockId = BLOCKS[playerBlock]\n    x,y,z = mc.player.getPos()\n    mc.setBlock(x, y+1, z-1, blockId)\n\n# put this in the main GUI block\napp.addLabelOptionBox( Block , blockNames, colspan=2)\napp.addButton( Drop , drop, colspan=2)  The issue we have is building a disctionary of block names linked to block IDs. You can try this one out, or make your own...    # put this near the top of your code\nBLOCKS={  AIR :0,  STONE :1,  GRASS :2,  DIRT :3,  COBBLESTONE :4,\n     WOOD_PLANKS :5,  SAPLING :6,  BEDROCK :7,  WATER_FLOWING :8,  WATER :8,\n     WATER_STATIONARY :9,  LAVA_FLOWING :10,  LAVA :10,  LAVA_STATIONARY :11,\n     SAND :12,  GRAVEL :13,  GOLD_ORE :14,  IRON_ORE :15,  COAL_ORE :16,\n     WOOD :17,  LEAVES :18,  GLASS :20,  LAPIS_LAZULI_ORE :21,\n     LAPIS_LAZULI_BLOCK :22,  SANDSTONE :24,  BED :26,  COBWEB :30,\n     GRASS_TALL :31,  WOOL :35,  FLOWER_YELLOW :37,  FLOWER_CYAN :38,\n     MUSHROOM_BROWN :39,  MUSHROOM_RED :40,  GOLD_BLOCK :41,  IRON_BLOCK :42,\n     STONE_SLAB_DOUBLE :43,  STONE_SLAB :44,  BRICK_BLOCK :45,  TNT :46,\n     BOOKSHELF :47,  MOSS_STONE :48,  OBSIDIAN :49,  TORCH :50,  FIRE :51,\n     STAIRS_WOOD :53,  CHEST :54,  DIAMOND_ORE :56,  DIAMOND_BLOCK :57,\n     CRAFTING_TABLE :58,  FARMLAND :60,  FURNACE_INACTIVE :61,\n     FURNACE_ACTIVE :62,  DOOR_WOOD :64,  LADDER :65,  STAIRS_COBBLESTONE :67,\n     DOOR_IRON :71,  REDSTONE_ORE :73,  SNOW :78,  ICE :79,  SNOW_BLOCK :80,\n     CACTUS :81,  CLAY :82,  SUGAR_CANE :83,  FENCE :85,  GLOWSTONE_BLOCK :89,\n     BEDROCK_INVISIBLE :95,  STONE_BRICK :98,  GLASS_PANE :102,  MELON :103,\n     FENCE_GATE :107,  GLOWING_OBSIDIAN :246,  NETHER_REACTOR_CORE :247 \n}\nblockNames=list(BLOCKS.keys())\nblockNames.sort()",
            "title": "Dropping blocks"
        },
        {
            "location": "/examples/simple/",
            "text": "Simple Examples\n\n\n\n\nLogin Form\n\n\nStart off by importing the library and creating the gui\n\n\n\n\n    from appJar import gui\n\n    # create the GUI \n set a title\n    app = gui(\nLogin Form\n)\n\n    # add labels \n entries\n    # in the correct row \n column\n    app.addLabel(\nuserLab\n, \nUsername:\n, 0, 0)\n    app.addEntry(\nuserEnt\n, 0, 1)\n    app.addLabel(\npassLab\n, \nPassword:\n, 1, 0)\n    app.addEntry(\npassEnt\n, 1, 1)\n\n    # start the GUI\n    app.go()\n\n\n\n\nNext, add some buttons\n\n\n\n\n    # these buttons call a *None* function - they don't do anything\n    app.addButtons( [\nSubmit\n, \nCancel\n], None, colspan=2)\n\n\n\n\nThen give the buttons a function to call\n\n\n    # function to print out the name of the button pressed\n    # followed by the contents of the two entry boxes\n    def press(btnName):\n        print(btnName)\n        print app.getEntry(\nuserEnt\n)\n        print app.getEntry(\npassEnt\n)\n\n    # changed this line to call a function\n    app.addButtons( [\nSubmit\n, \nCancel\n], press, colspan=2)\n\n\n\n\nFinally, program some logic into the function\n\n\ndef press(btnName):\n    if btnName == \nCancel\n:\n        app.stop()\n\n    if app.getEntry(\nuserEnt\n) == \nrjarvis\n:\n        if app.getEntry(\npassEnt\n) == \nabc\n:\n            app.infoBox(\nSuccess\n, \nCongratulations, you are logged in!\n)\n        else:\n            app.errorBox(\nFailed login\n, \nInvalid password\n)\n    else:\n        app.errorBox(\nFailed login\n, \nInvalid username\n)\n\n\n\n\nExtension - add some enhancements\n\n\n    app.addSecretEntry(\npassEnt\n, 1, 1)\n    app.setFocus(\nuserEnt\n)\n    app.enableEnter(press)\n\n\n\n\n\n\n\n\nFull source code",
            "title": "Simple Layout"
        },
        {
            "location": "/examples/simple/#simple-examples",
            "text": "",
            "title": "Simple Examples"
        },
        {
            "location": "/examples/simple/#login-form",
            "text": "",
            "title": "Login Form"
        },
        {
            "location": "/examples/simple/#start-off-by-importing-the-library-and-creating-the-gui",
            "text": "from appJar import gui\n\n    # create the GUI   set a title\n    app = gui( Login Form )\n\n    # add labels   entries\n    # in the correct row   column\n    app.addLabel( userLab ,  Username: , 0, 0)\n    app.addEntry( userEnt , 0, 1)\n    app.addLabel( passLab ,  Password: , 1, 0)\n    app.addEntry( passEnt , 1, 1)\n\n    # start the GUI\n    app.go()",
            "title": "Start off by importing the library and creating the gui"
        },
        {
            "location": "/examples/simple/#next-add-some-buttons",
            "text": "# these buttons call a *None* function - they don't do anything\n    app.addButtons( [ Submit ,  Cancel ], None, colspan=2)",
            "title": "Next, add some buttons"
        },
        {
            "location": "/examples/simple/#then-give-the-buttons-a-function-to-call",
            "text": "# function to print out the name of the button pressed\n    # followed by the contents of the two entry boxes\n    def press(btnName):\n        print(btnName)\n        print app.getEntry( userEnt )\n        print app.getEntry( passEnt )\n\n    # changed this line to call a function\n    app.addButtons( [ Submit ,  Cancel ], press, colspan=2)",
            "title": "Then give the buttons a function to call"
        },
        {
            "location": "/examples/simple/#finally-program-some-logic-into-the-function",
            "text": "def press(btnName):\n    if btnName ==  Cancel :\n        app.stop()\n\n    if app.getEntry( userEnt ) ==  rjarvis :\n        if app.getEntry( passEnt ) ==  abc :\n            app.infoBox( Success ,  Congratulations, you are logged in! )\n        else:\n            app.errorBox( Failed login ,  Invalid password )\n    else:\n        app.errorBox( Failed login ,  Invalid username )",
            "title": "Finally, program some logic into the function"
        },
        {
            "location": "/examples/simple/#extension-add-some-enhancements",
            "text": "app.addSecretEntry( passEnt , 1, 1)\n    app.setFocus( userEnt )\n    app.enableEnter(press)    Full source code",
            "title": "Extension - add some enhancements"
        },
        {
            "location": "/Install/",
            "text": "Set-up Instructions\n\n\n\n\nThis library was designed for use in schools - it therefore doesn't require any kind of special  \ninstallation\n.\n\nInstead, it can just be \nDOWNLOADED\n, unzipped, and used.  \n\n\nPip Installation\n\n\nHowever, if you can install python packages - we support that too!\n\n\nsudo pip3 install appjar\n - this will download \n install \nappJar\n ready for python 3.  \n\n\n# import the appJar library\nfrom appJar import gui\n\n\n\n\nSingle-user Set-up\n\n\nIf you can't/don't want to install using pip, simply:  \n\n\n\n\nPut the \nappJar folder\n in your \ncode folder\n, and you're done!  \n\n\n\n\n# import the appJar library\nfrom appJar import gui\n\n\n\n\n(As long as it's in the same folder as your code, it'll work...)  \n\n\nMulti-user Set-up\n\n\nIf you're trying to install appJar in a school, everyone can have their own copy (see above), or:  \n\n\n\n\nPut the \nappJar folder\n in a \nshared location\n (eg. a network drive): \nE:\\PYLIB\n  \n\n\nThen have pupils include the following 2-lines at the start of their code:\n\n\n\n\n# add the appJar folder to your PATH\nimport sys\nsys.path.append(\nE:\\PYLIB\n)\n# import the appJar library\nfrom appJar import gui\n\n\n\n\nAdvanced Set-up\n\n\nIf you've got friendly technicians, you can even avoid having to always add \nappJar\n to your path...  \n\n\nWindows\n\n\n\n\nCreate an environment variable, which will mean \nE:\\PYLIB\n is always in your \npath\n.  \n\n\n\n\nOpen \nControl Panel\n  \n\n\nNavigate to \nSystem -\n Advanced System Settings\n\n\n\n\nClick the \nAdvanced\n tab\n\n\n\n\nUnder \nSystem variables\n, click the \nNew..\n button\n\n\n\n\nSet the \nVariable name:\n to be \nPYTHONPATH\n  \n\n\nSet the \nVariable value:\n as the folder you put \nappJar\n in (eg. \"E:\\PYLIB\")\n\n\n\n\nPress \nOK\n, and you're done!    \n\n\n\n\nLinux (Raspberry Pi) /MacOS\n\n\n\n\nIf you're running python from a terminal:  \n\n\n\n\nType the following:  \n\n\n\n\n    echo 'export PYTHONPATH=\n${PYTHONPATH}:~/Documents/PYLIB\n' \n ~/.bashrc\n\n\n\n\n\n\nReopen the terminal (or type \nsource ~/.bashrc\n), and you're done!  \n\n\nNB.\n Change \n~/Documents/PYLIB\n to the folder where the \nappJar folder\n is located.  \n\n\n\n\nIDLE on Linux (raspberry Pi)/MacOS\n\n\n\n\nIf you're running python in  IDLE, you'll need to add appJar to your \nsite-packages\n  \n\n\n\n\nLaunch a \nTerminal\n  \n\n\nType the following:  \n\n\n\n\n    mkdir -p ~/Library/Python/3.4/lib/python/site-packages\n    cd ~/Library/Python/3.4/lib/python/site-packages\n    echo '~/Documents/PYLIB' \n appJar.pth\n\n\n\n\n\n\nClose the terminal, and you're done!  \n\n\nNB.\n you'll need to make sure the version number (3.4) is correct.  \n\n\nTo check your version, run this in Python:  \n\n\n\n\n\n\n\n\n    import sys\n    print(sys.version)",
            "title": "Installation"
        },
        {
            "location": "/Install/#set-up-instructions",
            "text": "This library was designed for use in schools - it therefore doesn't require any kind of special   installation . \nInstead, it can just be  DOWNLOADED , unzipped, and used.",
            "title": "Set-up Instructions"
        },
        {
            "location": "/Install/#pip-installation",
            "text": "However, if you can install python packages - we support that too!  sudo pip3 install appjar  - this will download   install  appJar  ready for python 3.    # import the appJar library\nfrom appJar import gui",
            "title": "Pip Installation"
        },
        {
            "location": "/Install/#single-user-set-up",
            "text": "If you can't/don't want to install using pip, simply:     Put the  appJar folder  in your  code folder , and you're done!     # import the appJar library\nfrom appJar import gui  (As long as it's in the same folder as your code, it'll work...)",
            "title": "Single-user Set-up"
        },
        {
            "location": "/Install/#multi-user-set-up",
            "text": "If you're trying to install appJar in a school, everyone can have their own copy (see above), or:     Put the  appJar folder  in a  shared location  (eg. a network drive):  E:\\PYLIB     Then have pupils include the following 2-lines at the start of their code:   # add the appJar folder to your PATH\nimport sys\nsys.path.append( E:\\PYLIB )\n# import the appJar library\nfrom appJar import gui",
            "title": "Multi-user Set-up"
        },
        {
            "location": "/Install/#advanced-set-up",
            "text": "If you've got friendly technicians, you can even avoid having to always add  appJar  to your path...",
            "title": "Advanced Set-up"
        },
        {
            "location": "/Install/#windows",
            "text": "Create an environment variable, which will mean  E:\\PYLIB  is always in your  path .     Open  Control Panel     Navigate to  System -  Advanced System Settings   Click the  Advanced  tab   Under  System variables , click the  New..  button   Set the  Variable name:  to be  PYTHONPATH     Set the  Variable value:  as the folder you put  appJar  in (eg. \"E:\\PYLIB\")   Press  OK , and you're done!",
            "title": "Windows"
        },
        {
            "location": "/Install/#linux-raspberry-pi-macos",
            "text": "If you're running python from a terminal:     Type the following:         echo 'export PYTHONPATH= ${PYTHONPATH}:~/Documents/PYLIB '   ~/.bashrc   Reopen the terminal (or type  source ~/.bashrc ), and you're done!    NB.  Change  ~/Documents/PYLIB  to the folder where the  appJar folder  is located.",
            "title": "Linux (Raspberry Pi) /MacOS"
        },
        {
            "location": "/Install/#idle-on-linux-raspberry-pimacos",
            "text": "If you're running python in  IDLE, you'll need to add appJar to your  site-packages      Launch a  Terminal     Type the following:         mkdir -p ~/Library/Python/3.4/lib/python/site-packages\n    cd ~/Library/Python/3.4/lib/python/site-packages\n    echo '~/Documents/PYLIB'   appJar.pth   Close the terminal, and you're done!    NB.  you'll need to make sure the version number (3.4) is correct.    To check your version, run this in Python:           import sys\n    print(sys.version)",
            "title": "IDLE on Linux (raspberry Pi)/MacOS"
        },
        {
            "location": "/whatsNew/",
            "text": "New \n Upcoming\n\n\n\n\nVersion (0.05)\n\n\n\n\nOpen Container\n - implemented issue \n#83\n, can now reopen a container, perform operations on it, and close it.  \n\n\nChanged disable entry to readonly, allows entries to be copied (\n#86\n)  \n\n\nImages now support \nraw image data\n.  \n\n\nSetters now call any registered functions  \n\n\nRewrite of \nMeters\n, proper inheritance, all use gradated fill, Dual/Split Meter swapped (\n#65\n).  \n\n\nRewrite of \nScrollPane\n, multi-platform scrolling...\n\n\nAdded functions to \nchange the bg/fg\n of ListBox items (\n#97\n).  \n\n\nIssues Resolved:  \n\n\n#109\n - Labelled Auto Entry, contributed by \njacobthetechy\n\n\n#101\n \n \n#103\n - updates to documentation\n\n\n#99\n - ability to create empty containers  \n\n\n#97\n - ability to set bg/fg colour of list items\n\n\n#94\n - basic support for \nMatPlotLib\n  \n\n\n#90\n - raw image data  \n\n\n#89\n - minimum speed for animated image  \n\n\n#88\n - preload mouse over images  \n\n\n#86\n - disabled entry now readonly  \n\n\n#85\n - setters now call function (if available)  \n\n\n#83\n - can now reopen container  \n\n\n#65\n - Meter rewrite  \n\n\n#34\n/\n#35\n - ScrollPane rewrite\n\n\n\n\n\n\n\n\nVersion 0.042\n\n\n\n\nIssues Resolved:  \n\n\n#95\n - fixed issue launching ShowCase under Python 2 (removed icons)  \n\n\n#93\n - fixed issue with numDialog/textDialog under python 2  \n\n\n\n\n\n\n\n\nVersion 0.041\n\n\n\n\nContinuous Integration - added \nlandscape.io\n to monitor code quality  \n\n\nReload Image\n - funciton to force a reload of an image, bypassing the cache (issue \n#87\n)  \n\n\nMinor fixes based off landscape report  \n\n\nIssues Resolved:  \n\n\n#87\n - reloadImage()  \n\n\n#84\n - Removed requirement for appJar icon in Windows  \n\n\n\n\n\n\n\n\nVersion 0.04\n\n\n\n\nInternationalisation\n - it's now possible to support multiple languages, by adding simple config files.  \n\n\nSplashscreen\n - a simple splashscreen is now available.  \n\n\nAutoCompletion EntryBox\n - added a new widget, giving autocompletion in EntryBoxes  \n\n\nFunction on change\n in ListBox - now possible to call a function each time a ListBox changes  \n\n\nPython 3.6 Support\n - now supports python3.6 - fixed issue with renamed idelib files  \n\n\nContinuous Integration - now uses \nTravis-CI\n and \nCoveralls\n to check for errors on each commit  \n\n\nUpdated documentation: Rearrangement of navigation bar, new pages for new features, minor modifications.  \n\n\nIssues Resolved:  \n\n\n#81\n - now allows negative numbers/decimals to be entered correctly in NumericEntries  \n\n\n#80\n - now support Python 3.6  \n\n\n#78\n - fixed typo in documentation  \n\n\n#74\n - SplashScreen  \n\n\n#72\n - Unit testing  \n\n\n#71\n - Internationalisation  \n\n\n#70\n - AutoComplete EntryBox",
            "title": "New & Upcoming"
        },
        {
            "location": "/whatsNew/#new-upcoming",
            "text": "",
            "title": "New &amp; Upcoming"
        },
        {
            "location": "/whatsNew/#version-005",
            "text": "Open Container  - implemented issue  #83 , can now reopen a container, perform operations on it, and close it.    Changed disable entry to readonly, allows entries to be copied ( #86 )    Images now support  raw image data .    Setters now call any registered functions    Rewrite of  Meters , proper inheritance, all use gradated fill, Dual/Split Meter swapped ( #65 ).    Rewrite of  ScrollPane , multi-platform scrolling...  Added functions to  change the bg/fg  of ListBox items ( #97 ).    Issues Resolved:    #109  - Labelled Auto Entry, contributed by  jacobthetechy  #101     #103  - updates to documentation  #99  - ability to create empty containers    #97  - ability to set bg/fg colour of list items  #94  - basic support for  MatPlotLib     #90  - raw image data    #89  - minimum speed for animated image    #88  - preload mouse over images    #86  - disabled entry now readonly    #85  - setters now call function (if available)    #83  - can now reopen container    #65  - Meter rewrite    #34 / #35  - ScrollPane rewrite",
            "title": "Version (0.05)"
        },
        {
            "location": "/whatsNew/#version-0042",
            "text": "Issues Resolved:    #95  - fixed issue launching ShowCase under Python 2 (removed icons)    #93  - fixed issue with numDialog/textDialog under python 2",
            "title": "Version 0.042"
        },
        {
            "location": "/whatsNew/#version-0041",
            "text": "Continuous Integration - added  landscape.io  to monitor code quality    Reload Image  - funciton to force a reload of an image, bypassing the cache (issue  #87 )    Minor fixes based off landscape report    Issues Resolved:    #87  - reloadImage()    #84  - Removed requirement for appJar icon in Windows",
            "title": "Version 0.041"
        },
        {
            "location": "/whatsNew/#version-004",
            "text": "Internationalisation  - it's now possible to support multiple languages, by adding simple config files.    Splashscreen  - a simple splashscreen is now available.    AutoCompletion EntryBox  - added a new widget, giving autocompletion in EntryBoxes    Function on change  in ListBox - now possible to call a function each time a ListBox changes    Python 3.6 Support  - now supports python3.6 - fixed issue with renamed idelib files    Continuous Integration - now uses  Travis-CI  and  Coveralls  to check for errors on each commit    Updated documentation: Rearrangement of navigation bar, new pages for new features, minor modifications.    Issues Resolved:    #81  - now allows negative numbers/decimals to be entered correctly in NumericEntries    #80  - now support Python 3.6    #78  - fixed typo in documentation    #74  - SplashScreen    #72  - Unit testing    #71  - Internationalisation    #70  - AutoComplete EntryBox",
            "title": "Version 0.04"
        },
        {
            "location": "/pythonBasics/",
            "text": "Python Basics\n\n\n\n\nBelow is a bunch of stuff explaining the basics of Python...  \n\n\nCheat Sheets\n\n\nHelp can be found at:\n\n\n\n\nPython Cheat Sheet\n\n\nTurtle Cheat Sheet\n\n\nGUI Cheat Sheet\n\n\n\n\n\n\nData\n\n\nVariables\n\n\nVariables are the most important things in programming.\n\nThey let your program remember information.\n\nVariables can store someone's name, their age, or even their favourite food.\n\nVariables simply point to a space in memory, where the data is stored.  \n\n\nA variable always has three things:\n\n\n\n\nAn \nidentifier\n - a name to refer to the variable by  \n\n\nA \nvalue\n - the information the\u00a0variable is storing  \n\n\nA \ndata type\n - the type of information being stored (words, numbers, lists, etc.)  \n\n\n\n\n# this declares three variables: name, age, male\n# and initialises each one with a starting value\nname = \nAlan Shearer\n\nage = 45\nmale = True\n\n\n\n\nVariables generally go through a three stage process:\n\n\n\n\nCreate\n - The variable identifier is declared, and the variable is initialised with a starting value\n\n\nChange\n - The variable's value is modified\n\n\nCheck\n - The variable's value is checked, in decisions \n loops\n\n\n\n\nAt various points along this route, the variable will be \nused\n.\n\n\nConstants\n\n\nSometimes, you need to store data that doesn't change - these are known as \nconstants\n.\n\nThey are \ncreated\n in the same way, but can't be \nchanged\n.\n\nIn Python, it is common to write the name of constants in \nall uppercase\n.\n\n\n# declare a constant, that we don't want to change\nWINNING_SCORE = 100\n\n\n\n\nData Types\n\n\nData types are very important, as they allow the program to have rules: if you add two numbers together, the program should do some maths, but if you add two words together (\nconcatenation\n) the program will just make a new sentence.\n\n\nThere are five main data types:\n\n\n\n\nString\n - words, letter, sentences. Defined using speech marks.\n\n\nInt\n - whole numbers\n\n\nReal\n - (floats) numbers with fractions (decimal points)\n\n\nBoolean\n - True or False (On or Off)\n\n\nList\n - a collection of things (any of the above, or even a collection of lists)\n\n\n\n\nPython tries to work out the data type automatically, but it occasionally needs some help, if you want to tell Python what the data type is, try one of the following:\n\n\n# create 3 new variables by changing the type of var1/var2/var3\nname = str(var1)\nage = int(var2)\nprice = float(var3)\n\n\n\n\nArithmetic Operators\n\n\nPython allows you to easily perform maths on your data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n+\n\n\nAddition\n\n\na = b + c\n\n\n\n\n\n\n-\n\n\nSubtraction\n\n\na = b - c\n\n\n\n\n\n\n*\n\n\nMultiplication\n\n\na = b * c\n\n\n\n\n\n\n/\n\n\nDivision\n\n\na = b / c\n\n\n\n\n\n\n//\n\n\nModulus division\n\n\na = b // c\n\n\n\n\n\n\n%\n\n\nRemainder division\n\n\na = b % c\n\n\n\n\n\n\n**\n\n\nExponent\n\n\na**b\n\n\n\n\n\n\nround()\n\n\nRound\n\n\nRounds the number to the nearest place\n\n\n\n\n\n\nfloor()\n\n\nRound-down\n\n\nRounds the number down\n\n\n\n\n\n\nceil()\n\n\nRound-Up\n\n\nRounds the number up\n\n\n\n\n\n\nsum()\n\n\nSum\n\n\nAdds together all the items in the list\n\n\n\n\n\n\n\n\nString Operations\n\n\nPython also lets us perform various actions on Strings.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvarName.upper()\n\n\nUppercase\n\n\nMakes the entire string uppercase\n\n\n\n\n\n\nvarName.lower()\n\n\nLowercase\n\n\nMakes the entire string lowercase\n\n\n\n\n\n\nvarName.split(\" \")\n\n\nSplit into a list\n\n\nConverts the String into a list, using spaces\n\n\n\n\n\n\nvarName.split(\",\")\n\n\nSplit into a list\n\n\nConverts the String into a list, using commas\n\n\n\n\n\n\nvarName.count(\"a\")\n\n\nCounts occurences of the text\n\n\nCounts how many times \na\n appears in the String\n\n\n\n\n\n\nvarName.index(\"a\")\n\n\nFinds the first position of the text\n\n\nFinds the first position of \na\n\n\n\n\n\n\nvarName.startswith(\"Mr.\")\n\n\nChecks what the String starts with\n\n\nReturns True if the String starts with \nMr.\n\n\n\n\n\n\nvarName.endswith(\"Jarvis\")\n\n\nChecks what the String ends with\n\n\nReturns True if the String ends with\nJarvis\n\n\n\n\n\n\n\n\nString Splicing\n\n\nRemember, Strings are just lists of characters.\n\nIt's also possible to access parts of a String using array square brackets.  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvarName[2]\n\n\nGets a character\n\n\nReturns the thrid character\n\n\n\n\n\n\nvarName[2:5]\n\n\nGets a substring\n\n\nReturns characters from 2 to 4\n\n\n\n\n\n\nvarName[2:]\n\n\nGets a substring\n\n\nReturns characters from 2 to the end\n\n\n\n\n\n\nvarName[:5]\n\n\nGets a substring\n\n\nReturns characters from the beginning to 4\n\n\n\n\n\n\nvarName[2:10:2]\n\n\nGets a substring\n\n\nReturns characters from 2 to 9, skipping every other character\n\n\n\n\n\n\nvarName[::-1]\n\n\nReverse a String\n\n\nReturns the String in reverse order\n\n\n\n\n\n\n\n\n\n\nSelection \n Operators\n\n\nSelection is the ability to make a decision. It allows us to do different things, depending on what information is in a variable.\n\nThis is done using\u00a0\nIF\n statements:\n\n\n# if they are 18 or over, print \nYou can vote\n\nif age \n= 18:\n    print(\nYou can vote\n)\nelse:\n    print(\nYou can't vote\n)\n\n\n\n\nMaking decisions is all about comparing things; is one variable bigger than another, are two other variables the same...\n\n\n# if they are 18 or over, print \nYou can vote\n\nif favArtist == \nPicasso\n:\n    print(\nYou like cubist paintings.\n)\nelif favArtist == \nRembrandt\n:\n    print(\nYou like realistic paintings.\n)\nelif favArtist == \nMonet\n:\n    print(\nYou like impressionist paintings.\n)\nelif favArtist == \nRembrandt\n:\n    print(\nYou like realistic paintings.\n)\nelif favArtist == \nCezanne\n:\n    print(\nYou like post-impresionistic paintings.\n)\nelse:\n    print(\nUnrecognised artist\n)\n\n\n\n\nTo compare things we use standard operators, just like in maths.\n\n\nEquality Operators\n\n\nThese let us test if things are equal or not:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n==\n\n\nEqual to\n\n\nCheck if two items are the same\n\n\n\n\n\n\n!=\n\n\nNot equal to\n\n\nCheck if two items are not the same\n\n\n\n\n\n\n\n\nComparison Operators\n\n\nThese let us compare things:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGreater than\n\n\nCheck if the first item is bigger than the second item\n\n\n\n\n\n\n\n\nLess than\n\n\nCheck if the first item is smaller than the second item\n\n\n\n\n\n\n=\n\n\nGreater than or equal to\n\n\nCheck if the first item is bigger than or the same as the second item\n\n\n\n\n\n\n=\n\n\nLess than or equal to\n\n\nCheck if the first item is smaller than or the same as the second item\n\n\n\n\n\n\n\n\nLogical Operators\n\n\nThese let us use logic to combine lots of operators:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nand\n\n\nBoth comparisons have to be True\n\n\n\n\n\n\nor\n\n\nEither or both comparisons have to be True\n\n\n\n\n\n\nnot\n\n\nThis will change the result from True to False, or vice-versa\n\n\n\n\n\n\n\n\n\n\nIteration\n\n\nBeing able to do selection (make decisions) on its own is nearly enough.\n\nHowever, if we want our programs to be really useful, we want them to be able to repeat stuff.\n\n\nWe call this \niteration\n.\n\n\nWhile Loops\n\n\nLet us repeat something until we can make a decision (this may never occur)\n\n\nInfinite While Loops\n\n\nwhile True:\n    print ( \nLooping!\n )\n\n\n\n\nConditional While Loops\n\n\nnum = -1 # keep looping WHILE they don't guess 21\nwhile num != 21:\n    num = int ( input ( \nGuess a number: \n ) )\n    print ( \nYou guessed:\n, num )\nprint ( \nYou finally got it!!!\n )\n\n\n\n\nFor Loops\n\n\nLet us repeat something a set number of times\u00a0\n\n\nFor Loop Through an Array\n\n\n# make a list of fruits\nfruits = ['banana', 'apple',  'mango']\nfor item in fruits:\n    print ( 'Current fruit :', item)\n\n\n\n\nFor Loop x Times\n\n\nfor index in range ( 10 ):\n    print ( \nPosition:\n, index )\n\n\n\n\nFor Loop from x to y\n\n\nfor index in range ( 0, 6 ):\n    print ( \nPosition:\n, index )\n\n\n\n\nFor Loop in Steps\n\n\nfor index in range ( 10, 21, 2 ):\n    print ( \nPosition:\n, index )\n\n\n\n\nLoop Control\n\n\nPyhton provides two really useful commands to help in loop control:\n\n\n\n\nbreak\n - Ends the loop immediately\n\n\ncontinue\n - Goes back to the start of the loop, skipping anything not yet done\n\n\n\n\nwhile True:\n    guess = int(input(\nGuess a number: \n))\n    if guess = answer:\n        print(\nYou got it!\n)\n        break\n    else:\n        print(\nWrong!\n)\n\n\n\n\n\n\nLists\n\n\nThis does exactly what it says on the tin - we can store lots of information all with the same name.\nIf you have 100 books, you don't want to make 100 variables to remember all the names.\n\nInstead, you make one variable called \nbooks\n and then give each book a number...\n\n\n# make a list\npupils = [\nEdd\n, \nClive\n, \nKim\n, \nKat\n, \nTim\n, \nTam\n]\n\n# print the first pupil in the list - item 0\nprint(pupils[0])\n\n# add a pupil to the list\npupils.append(\nJordan\n)\n\n# get the number of pupils in the list\nnum_of_pupils = len(pupils)\n\n# remove a pupil from the list\nlist.remove(\nEdd\n)\n\n\n\n\nWe can also iterate through a list, make decisions based on a list, and change items in a list:\n\n\n# make a list\npupils = [\nEdd\n, \nClive\n, \nKim\n, \nKat\n, \nTim\n, \nTam\n]\n\n# print each pupil in the list\nfor item in pupils:\n   print ( item )\n\n# change an item in the list\npupils [ 2 ] = \nKimberly\n\n\n# check if an item is in a list\nif \nKat\n in pupils:\n   print ( \nFound her\n )\n\n\n\n\nWe can also slice up or join lists:\n\n\n# make a list\npupils = [\nEdd\n, \nClive\n, \nKim\n, \nKat\n, \nTim\n, \nTam\n]\n\npupils[2:4]     # items from 2 until before 4 = Kim \n Kat\npupils[2:]      # items from 2 until the end = Kim, Kat, Tim \n Tam\npupils[:3]      # items from the beginning until before 3 = Edd, Clive \n Kim\npupils[:]       # everything\n\n# you can also count backwards\npupils[-1]      #last item in the array = Tam\npupils[-2:]     # last two items in the array = Tim \n Tam\npupils[:-2]     # items from the beginning until 2 before the end = Edd, CLive, Kim \n Kat\npupils[1:-1]    # remove first \n last = Clive, Kim, Kat \n Ti\n\n# join an array into a String of items\nsentence = \n, \n.join(pupils)    # makes the String \nEdd, Clive, Kim, Kat, Tim, Tam\n\n\n\n\n\n\n\nModular Development\n\n\nA modular program is made up of lots of separate parts (modules). Each of these should work independently of the others. In Python, we achieve this by writing \nfunctions\n.  \n\n\nPython has lots of \nbuilt-in functions\n that you might have met already: \nprint()\n, \ninput()\n, \nint()\n, \nstr()\n, \nlen()\n, \nround()\n, etc... These work by themselves, without needing to be changed. You simply give them some information to work with, and they (sometimes) give you some information back.  \n\n\nWriting a Function\n\n\nSo, how do we write a function? Well, it's pretty simple - you give it a name, and then everything that is indented after the name, is in that function:\n\n\ndef myFunction():\n    print(\nThis is in the function\n)\n    print(\nThis is also in the function\n)\n\nprint(\nThis is not in the function.\n)\n\n\n\n\n\nThis function is called \nmyFunction\n, but it could be called anything (except for the built-in function names or \nkeywords\n). Whenever you tell your program to do \nmyFunction\n it should print the two messages inside.\n\n\nA more detailed example might be for when you want to keep repeating the same things again and again. It is not a good idea (or any fun) to keep typing the same stuff again and again. Sometimes a loop can solve this, but other times it might not be enough.\n\n\n# define a function to draw a square\n# the size parameter sets the length of the sides\ndef square ( size ):\n   for loop in range ( 4 ) :\n        t.forward ( size )\n        t.right ( 90 )\n\n# call the function - very important\n# setting size to 77\nsquare ( 77 )\n\n\n\n\n\n\nLibraries\n\n\nLibraries are just other people's code that we want to use. To access them, we simply import them. We have learnt about three libraries so far:\n\n\n\n\nrandom\n - this lets us generate random numbers\n\n\nturtle\n - this lets us draw turtle shapes\n\n\nappJar\n - this lets us create simple GUIs\n\n\n\n\nHere is an example of importing and using a library:\n\n\nimport random\n\ncolours = [ \nred\n, \nyellow\n, \ngreen\n, \nblue\n ]\n\n# generate a random number between 1 \n 100\nnum = random.randint ( 1, 100 )\n\n# generate a random colour (using the list above)\ncolour = random.choice ( colours )\n\n\n\n\n\n\nFile Access\n\n\nAccessing files in Python is easy. You simply open the file, read from or write to it, then close it:\n\n\noutFile = open ( \nmyfile.txt\n, \na\n )\noutFile.write ( \nhi there\\n\n )\noutFile.close ( )\n\n\n\n\nThis can be simplified even further, using the \nwith\n command. The with command will ensure the file is closed once you've finished with it:\n\n\nwith open ( \nmyfile.txt\n, \na\n ) as outFile :\n    outFile.write ( \nhi there\\n\n )\n\n\n\n\nWhen you open a file, you pass the name of the file you want, and an access mode. The following access modes are most commonly used:\n\n\n\n\nr\n - opens a file for reading.\n\n\nw\n - creates a new file for writing (overwrites existing file).\n\n\na\n - opens a file to append to (will create a file if needed).\n\n\n\n\nWhen reading from a file, it is most common to read it line-by-line. Again, it is more convenient to use \nwith\n:\n\n\nwith open ( \nmyFile.txt\n, \nr\n) as inFile :\n    # read the file into data\n    data = inFile.read ( ) \n    # make a list of lines\n    myList = data.splitlines ( ) \n\n\n\n\nThis will create a list called \nmyList\n, with one entry for each line.\n\n\n\n\nDatabases in Python\n\n\nDatabase Recap\n\n\nIn order to be able to follow this guide, you will need to understand the basics of a database:\n\n\n\n\nEntity\n - an item in the real world, we want to model (pupils in a school)\n\n\nTable\n - a container to hold information about an entity, often named after the entity (pupils)\n\n\nRecord\n - a single item/row in the table (an actual pupil)\n\n\nField\n - the columns in the table, each storing an attribute about the entity (name, age, etc)\n\n\nPrimary Key\n - something unique to each record in a table (pupil ID)\n\n\nForeign Key\n - when another table links to records in a table, you use their primary key\n\n\nRelationships\n - how tables link to each other\n\n\n\n\nExample\n\n\nSo, to model pupils in the real world - we would create a table, let's call it \npupils\n\nEach \nfield\n in \npupils\n will store a piece of information about a pupil\n\nEach \nrecord\n in \npupils\n will hold all the information about a single pupil\n\nWe can summarise this in a data-dictionary:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nField Name\n\n\nData Type\n\n\nInformation\n\n\nRules\n\n\n\n\n\n\nPupilID\n\n\nInteger\n\n\nPrimary Key\n\n\n\n\n\n\n\n\nFirst Name\n\n\nString\n\n\n\n\nbetween\n 1 and 30 characters\n\n\n\n\n\n\nLast Name\n\n\nString\n\n\n\n\nbetween\n 1 and 30 characters\n\n\n\n\n\n\nDOB\n\n\nDate\n\n\n\n\nmatches format\n DD/MM/YYYY\n\n\n\n\n\n\nGender\n\n\nString\n\n\n\n\none of\n Male/Female/Unspecified\n\n\n\n\n\n\n\n\nTo talk to a database you use \nSQL\n (\nStructured Query Language\n). There are two parts to SQL:\n\n\n\n\nDDL (Data Definition Language) - used to build and modify tables\n\n\nCREATE TABLE ...\n\n\nALTER TABLE ...\n\n\nDROP TABLE ...\n\n\nTRUNCATE TABLE ...\n\n\n\n\n\n\nDML (Data Manipulation Language) - used to get or modify data in tables\n\n\nSELECT ... FROM ... WHERE ...\n\n\nINSERT INTO ... VALUES ...\n\n\nUPDATE ... SET ... WHERE ...\n\n\nDELETE FROM ... WHERE ...\n\n\n\n\n\n\n\n\nPython comes with a built-in database: \nSQLite\n. To gain access to it, you simply import the library:\n\n\nimport sqlite3\n\n\n\n\nHaving done that, we simply connect to the database, perform some SQL, and disconnect:\n\n\ndb = sqlite3.connect('pupils.db')\n# perform SQL statements\ndb.close()\n\n\n\n\nAs with file access, this can be wrapped up using with, to ensure we always disconnect:\n\n\nwith sqlite3.connect(\npupils.db\n) as db:\n    # perform SQL statements\n\n\n\n\nBoth of these will either open an existing database called pupils.db or create a new one with that name. This means that the information will always be saved to a file, so every time you run your program, all the old data will still be there. If you don't want to create a file, and would instead like to temporarily create a database in RAM, replace the database name with the String \n:memory:\n\n\n\n\nDefensive Programming\n\n\nDefensive programming is a way of designing your program, so that it will continue to work, even when unexpected things happen.  \n\n\nDefensive programming should improve:  \n\n\n\n\nQuality\n by reducing the number of bugs\n\n\nReadability\n making your code more readable, and easier to understand\n\n\nReliability\n preventing the program from crashing when it receives unexpected inputs\n\n\n\n\nDefensive programming can sometimes go too far - you shouldn't try to prevent errors that can't happen, as this could slow your program down, and make it harder to maintain.  \n\n\nIt's also important not to be too vague, otherwise you might miss important errors, that need to be found.\n\n\nStyles of Defensive Programming\n\n\nThere are two primary styles of dealing with potential errors:  \n\n\n\n\nEAFP\n - \nE\nasier to \nA\nsk for \nF\norgiveness than \nP\nermission\n\n\nLBYL\n - \nL\nook \nB\nefore \nY\nou \nL\neap  \n\n\n\n\nGenerally, \nEAFP\n is preferred in Python.\n\n\nExamples of Defensive Programming\n\n\nA common place programs can crash is when you expect NUMERIC input, but the user types a STRING:\n\n\nchoice = int(input( \nEnter your choice: \n ))\n\n\n\n\nEAFP\n\n\nTry to do what you wanted to do, then if it breaks, deal with it:\n\n\ntry:\n    choice = int(input( \nEnter your choice: \n ))\nexcept ValueError:\n    print( \nInvalid number\n )\n\n\n\n\nIn this example we simply (try to) convert the input into a number - if it fails, we deal with it.\n\n\nWe can then wrap this in a \nloop\n, to make it keep repeating until the data is valid:\n\n\nwhile True:\n    try:\n        choice = int(input( \nEnter your choice: \n ))\n        break\n    except ValueError:\n        print( \nInvalid number\n )\n        continue\n\n\n\n\nLBYL\n\n\nCheck you can do something first, then only do it if it's OK.\n\n\nchoice = input( \nEnter your choice: \n )\nif choice.isdigit():\n    choice = int(choice)\nelse:\n    print( \nInvalid number\n )\n\n\n\n\nIn this example, we get the input, check it's a number, and then convert it.  \n\n\nWe can then wrap this in a \nloop\n, to make it keep repeating until the data is valid:\n\n\nwhile True:\n    choice = input( \nEnter your choice: \n )\n    if choice.isdigit():\n        choice = int(choice)\n        break\n    else:\n        print( \nInvalid number\n )\n        continue\n\n\n\n\nAs can be seen, \nEAFP\n only catches \nValueErrors\n, it will still crash if some other error occurs.\n\nBut that complies with what we said earlier, we don't want to miss strange/important errors.\n\nAnd, in \nLBYL\n, it doesn't actually deal with any errors, but simply tries to prevent them - less reliable?\n\n\n\n\nTurtle Basics\n\n\nTo create a turtle, and get it to move, try the following:\n\n\n# get the library\nimport turtle\nt = turtle.Pen()\n\n# draw a square\nfor loop in range(4):\n    t.forward(100)\n    t.right(90)\n\n\n\n\n\n\nGUI Basics\n\n\nTo create a GUI, and show a label, try the following:\n\n\n# import the library\nfrom appJar import gui\n\n# create the GUI\napp = gui(\nHello\n)\napp.addLabel(\nl1\n, \nHello World!\n)\napp.go()\n\n\n\n\n\n\nColour Map\n\n\nBelow is a useful colour map to use when doing Turtle or GUI programming.",
            "title": "Python"
        },
        {
            "location": "/pythonBasics/#python-basics",
            "text": "Below is a bunch of stuff explaining the basics of Python...",
            "title": "Python Basics"
        },
        {
            "location": "/pythonBasics/#cheat-sheets",
            "text": "Help can be found at:   Python Cheat Sheet  Turtle Cheat Sheet  GUI Cheat Sheet",
            "title": "Cheat Sheets"
        },
        {
            "location": "/pythonBasics/#data",
            "text": "",
            "title": "Data"
        },
        {
            "location": "/pythonBasics/#variables",
            "text": "Variables are the most important things in programming. \nThey let your program remember information. \nVariables can store someone's name, their age, or even their favourite food. \nVariables simply point to a space in memory, where the data is stored.    A variable always has three things:   An  identifier  - a name to refer to the variable by    A  value  - the information the\u00a0variable is storing    A  data type  - the type of information being stored (words, numbers, lists, etc.)     # this declares three variables: name, age, male\n# and initialises each one with a starting value\nname =  Alan Shearer \nage = 45\nmale = True  Variables generally go through a three stage process:   Create  - The variable identifier is declared, and the variable is initialised with a starting value  Change  - The variable's value is modified  Check  - The variable's value is checked, in decisions   loops   At various points along this route, the variable will be  used .",
            "title": "Variables"
        },
        {
            "location": "/pythonBasics/#constants",
            "text": "Sometimes, you need to store data that doesn't change - these are known as  constants . \nThey are  created  in the same way, but can't be  changed . \nIn Python, it is common to write the name of constants in  all uppercase .  # declare a constant, that we don't want to change\nWINNING_SCORE = 100",
            "title": "Constants"
        },
        {
            "location": "/pythonBasics/#data-types",
            "text": "Data types are very important, as they allow the program to have rules: if you add two numbers together, the program should do some maths, but if you add two words together ( concatenation ) the program will just make a new sentence.  There are five main data types:   String  - words, letter, sentences. Defined using speech marks.  Int  - whole numbers  Real  - (floats) numbers with fractions (decimal points)  Boolean  - True or False (On or Off)  List  - a collection of things (any of the above, or even a collection of lists)   Python tries to work out the data type automatically, but it occasionally needs some help, if you want to tell Python what the data type is, try one of the following:  # create 3 new variables by changing the type of var1/var2/var3\nname = str(var1)\nage = int(var2)\nprice = float(var3)",
            "title": "Data Types"
        },
        {
            "location": "/pythonBasics/#arithmetic-operators",
            "text": "Python allows you to easily perform maths on your data            +  Addition  a = b + c    -  Subtraction  a = b - c    *  Multiplication  a = b * c    /  Division  a = b / c    //  Modulus division  a = b // c    %  Remainder division  a = b % c    **  Exponent  a**b    round()  Round  Rounds the number to the nearest place    floor()  Round-down  Rounds the number down    ceil()  Round-Up  Rounds the number up    sum()  Sum  Adds together all the items in the list",
            "title": "Arithmetic Operators"
        },
        {
            "location": "/pythonBasics/#string-operations",
            "text": "Python also lets us perform various actions on Strings.            varName.upper()  Uppercase  Makes the entire string uppercase    varName.lower()  Lowercase  Makes the entire string lowercase    varName.split(\" \")  Split into a list  Converts the String into a list, using spaces    varName.split(\",\")  Split into a list  Converts the String into a list, using commas    varName.count(\"a\")  Counts occurences of the text  Counts how many times  a  appears in the String    varName.index(\"a\")  Finds the first position of the text  Finds the first position of  a    varName.startswith(\"Mr.\")  Checks what the String starts with  Returns True if the String starts with  Mr.    varName.endswith(\"Jarvis\")  Checks what the String ends with  Returns True if the String ends with Jarvis",
            "title": "String Operations"
        },
        {
            "location": "/pythonBasics/#string-splicing",
            "text": "Remember, Strings are just lists of characters. \nIt's also possible to access parts of a String using array square brackets.              varName[2]  Gets a character  Returns the thrid character    varName[2:5]  Gets a substring  Returns characters from 2 to 4    varName[2:]  Gets a substring  Returns characters from 2 to the end    varName[:5]  Gets a substring  Returns characters from the beginning to 4    varName[2:10:2]  Gets a substring  Returns characters from 2 to 9, skipping every other character    varName[::-1]  Reverse a String  Returns the String in reverse order",
            "title": "String Splicing"
        },
        {
            "location": "/pythonBasics/#selection-operators",
            "text": "Selection is the ability to make a decision. It allows us to do different things, depending on what information is in a variable. \nThis is done using\u00a0 IF  statements:  # if they are 18 or over, print  You can vote \nif age  = 18:\n    print( You can vote )\nelse:\n    print( You can't vote )  Making decisions is all about comparing things; is one variable bigger than another, are two other variables the same...  # if they are 18 or over, print  You can vote \nif favArtist ==  Picasso :\n    print( You like cubist paintings. )\nelif favArtist ==  Rembrandt :\n    print( You like realistic paintings. )\nelif favArtist ==  Monet :\n    print( You like impressionist paintings. )\nelif favArtist ==  Rembrandt :\n    print( You like realistic paintings. )\nelif favArtist ==  Cezanne :\n    print( You like post-impresionistic paintings. )\nelse:\n    print( Unrecognised artist )  To compare things we use standard operators, just like in maths.",
            "title": "Selection &amp; Operators"
        },
        {
            "location": "/pythonBasics/#equality-operators",
            "text": "These let us test if things are equal or not:            ==  Equal to  Check if two items are the same    !=  Not equal to  Check if two items are not the same",
            "title": "Equality Operators"
        },
        {
            "location": "/pythonBasics/#comparison-operators",
            "text": "These let us compare things:             Greater than  Check if the first item is bigger than the second item     Less than  Check if the first item is smaller than the second item    =  Greater than or equal to  Check if the first item is bigger than or the same as the second item    =  Less than or equal to  Check if the first item is smaller than or the same as the second item",
            "title": "Comparison Operators"
        },
        {
            "location": "/pythonBasics/#logical-operators",
            "text": "These let us use logic to combine lots of operators:           and  Both comparisons have to be True    or  Either or both comparisons have to be True    not  This will change the result from True to False, or vice-versa",
            "title": "Logical Operators"
        },
        {
            "location": "/pythonBasics/#iteration",
            "text": "Being able to do selection (make decisions) on its own is nearly enough. \nHowever, if we want our programs to be really useful, we want them to be able to repeat stuff.  We call this  iteration .",
            "title": "Iteration"
        },
        {
            "location": "/pythonBasics/#while-loops",
            "text": "Let us repeat something until we can make a decision (this may never occur)",
            "title": "While Loops"
        },
        {
            "location": "/pythonBasics/#infinite-while-loops",
            "text": "while True:\n    print (  Looping!  )",
            "title": "Infinite While Loops"
        },
        {
            "location": "/pythonBasics/#conditional-while-loops",
            "text": "num = -1 # keep looping WHILE they don't guess 21\nwhile num != 21:\n    num = int ( input (  Guess a number:   ) )\n    print (  You guessed: , num )\nprint (  You finally got it!!!  )",
            "title": "Conditional While Loops"
        },
        {
            "location": "/pythonBasics/#for-loops",
            "text": "Let us repeat something a set number of times",
            "title": "For Loops"
        },
        {
            "location": "/pythonBasics/#for-loop-through-an-array",
            "text": "# make a list of fruits\nfruits = ['banana', 'apple',  'mango']\nfor item in fruits:\n    print ( 'Current fruit :', item)",
            "title": "For Loop Through an Array"
        },
        {
            "location": "/pythonBasics/#for-loop-x-times",
            "text": "for index in range ( 10 ):\n    print (  Position: , index )",
            "title": "For Loop x Times"
        },
        {
            "location": "/pythonBasics/#for-loop-from-x-to-y",
            "text": "for index in range ( 0, 6 ):\n    print (  Position: , index )",
            "title": "For Loop from x to y"
        },
        {
            "location": "/pythonBasics/#for-loop-in-steps",
            "text": "for index in range ( 10, 21, 2 ):\n    print (  Position: , index )",
            "title": "For Loop in Steps"
        },
        {
            "location": "/pythonBasics/#loop-control",
            "text": "Pyhton provides two really useful commands to help in loop control:   break  - Ends the loop immediately  continue  - Goes back to the start of the loop, skipping anything not yet done   while True:\n    guess = int(input( Guess a number:  ))\n    if guess = answer:\n        print( You got it! )\n        break\n    else:\n        print( Wrong! )",
            "title": "Loop Control"
        },
        {
            "location": "/pythonBasics/#lists",
            "text": "This does exactly what it says on the tin - we can store lots of information all with the same name.\nIf you have 100 books, you don't want to make 100 variables to remember all the names. \nInstead, you make one variable called  books  and then give each book a number...  # make a list\npupils = [ Edd ,  Clive ,  Kim ,  Kat ,  Tim ,  Tam ]\n\n# print the first pupil in the list - item 0\nprint(pupils[0])\n\n# add a pupil to the list\npupils.append( Jordan )\n\n# get the number of pupils in the list\nnum_of_pupils = len(pupils)\n\n# remove a pupil from the list\nlist.remove( Edd )  We can also iterate through a list, make decisions based on a list, and change items in a list:  # make a list\npupils = [ Edd ,  Clive ,  Kim ,  Kat ,  Tim ,  Tam ]\n\n# print each pupil in the list\nfor item in pupils:\n   print ( item )\n\n# change an item in the list\npupils [ 2 ] =  Kimberly \n\n# check if an item is in a list\nif  Kat  in pupils:\n   print (  Found her  )  We can also slice up or join lists:  # make a list\npupils = [ Edd ,  Clive ,  Kim ,  Kat ,  Tim ,  Tam ]\n\npupils[2:4]     # items from 2 until before 4 = Kim   Kat\npupils[2:]      # items from 2 until the end = Kim, Kat, Tim   Tam\npupils[:3]      # items from the beginning until before 3 = Edd, Clive   Kim\npupils[:]       # everything\n\n# you can also count backwards\npupils[-1]      #last item in the array = Tam\npupils[-2:]     # last two items in the array = Tim   Tam\npupils[:-2]     # items from the beginning until 2 before the end = Edd, CLive, Kim   Kat\npupils[1:-1]    # remove first   last = Clive, Kim, Kat   Ti\n\n# join an array into a String of items\nsentence =  ,  .join(pupils)    # makes the String  Edd, Clive, Kim, Kat, Tim, Tam",
            "title": "Lists"
        },
        {
            "location": "/pythonBasics/#modular-development",
            "text": "A modular program is made up of lots of separate parts (modules). Each of these should work independently of the others. In Python, we achieve this by writing  functions .    Python has lots of  built-in functions  that you might have met already:  print() ,  input() ,  int() ,  str() ,  len() ,  round() , etc... These work by themselves, without needing to be changed. You simply give them some information to work with, and they (sometimes) give you some information back.",
            "title": "Modular Development"
        },
        {
            "location": "/pythonBasics/#writing-a-function",
            "text": "So, how do we write a function? Well, it's pretty simple - you give it a name, and then everything that is indented after the name, is in that function:  def myFunction():\n    print( This is in the function )\n    print( This is also in the function )\n\nprint( This is not in the function. )  This function is called  myFunction , but it could be called anything (except for the built-in function names or  keywords ). Whenever you tell your program to do  myFunction  it should print the two messages inside.  A more detailed example might be for when you want to keep repeating the same things again and again. It is not a good idea (or any fun) to keep typing the same stuff again and again. Sometimes a loop can solve this, but other times it might not be enough.  # define a function to draw a square\n# the size parameter sets the length of the sides\ndef square ( size ):\n   for loop in range ( 4 ) :\n        t.forward ( size )\n        t.right ( 90 )\n\n# call the function - very important\n# setting size to 77\nsquare ( 77 )",
            "title": "Writing a Function"
        },
        {
            "location": "/pythonBasics/#libraries",
            "text": "Libraries are just other people's code that we want to use. To access them, we simply import them. We have learnt about three libraries so far:   random  - this lets us generate random numbers  turtle  - this lets us draw turtle shapes  appJar  - this lets us create simple GUIs   Here is an example of importing and using a library:  import random\n\ncolours = [  red ,  yellow ,  green ,  blue  ]\n\n# generate a random number between 1   100\nnum = random.randint ( 1, 100 )\n\n# generate a random colour (using the list above)\ncolour = random.choice ( colours )",
            "title": "Libraries"
        },
        {
            "location": "/pythonBasics/#file-access",
            "text": "Accessing files in Python is easy. You simply open the file, read from or write to it, then close it:  outFile = open (  myfile.txt ,  a  )\noutFile.write (  hi there\\n  )\noutFile.close ( )  This can be simplified even further, using the  with  command. The with command will ensure the file is closed once you've finished with it:  with open (  myfile.txt ,  a  ) as outFile :\n    outFile.write (  hi there\\n  )  When you open a file, you pass the name of the file you want, and an access mode. The following access modes are most commonly used:   r  - opens a file for reading.  w  - creates a new file for writing (overwrites existing file).  a  - opens a file to append to (will create a file if needed).   When reading from a file, it is most common to read it line-by-line. Again, it is more convenient to use  with :  with open (  myFile.txt ,  r ) as inFile :\n    # read the file into data\n    data = inFile.read ( ) \n    # make a list of lines\n    myList = data.splitlines ( )   This will create a list called  myList , with one entry for each line.",
            "title": "File Access"
        },
        {
            "location": "/pythonBasics/#databases-in-python",
            "text": "",
            "title": "Databases in Python"
        },
        {
            "location": "/pythonBasics/#database-recap",
            "text": "In order to be able to follow this guide, you will need to understand the basics of a database:   Entity  - an item in the real world, we want to model (pupils in a school)  Table  - a container to hold information about an entity, often named after the entity (pupils)  Record  - a single item/row in the table (an actual pupil)  Field  - the columns in the table, each storing an attribute about the entity (name, age, etc)  Primary Key  - something unique to each record in a table (pupil ID)  Foreign Key  - when another table links to records in a table, you use their primary key  Relationships  - how tables link to each other",
            "title": "Database Recap"
        },
        {
            "location": "/pythonBasics/#example",
            "text": "So, to model pupils in the real world - we would create a table, let's call it  pupils \nEach  field  in  pupils  will store a piece of information about a pupil \nEach  record  in  pupils  will hold all the information about a single pupil \nWe can summarise this in a data-dictionary:             Field Name  Data Type  Information  Rules    PupilID  Integer  Primary Key     First Name  String   between  1 and 30 characters    Last Name  String   between  1 and 30 characters    DOB  Date   matches format  DD/MM/YYYY    Gender  String   one of  Male/Female/Unspecified     To talk to a database you use  SQL  ( Structured Query Language ). There are two parts to SQL:   DDL (Data Definition Language) - used to build and modify tables  CREATE TABLE ...  ALTER TABLE ...  DROP TABLE ...  TRUNCATE TABLE ...    DML (Data Manipulation Language) - used to get or modify data in tables  SELECT ... FROM ... WHERE ...  INSERT INTO ... VALUES ...  UPDATE ... SET ... WHERE ...  DELETE FROM ... WHERE ...     Python comes with a built-in database:  SQLite . To gain access to it, you simply import the library:  import sqlite3  Having done that, we simply connect to the database, perform some SQL, and disconnect:  db = sqlite3.connect('pupils.db')\n# perform SQL statements\ndb.close()  As with file access, this can be wrapped up using with, to ensure we always disconnect:  with sqlite3.connect( pupils.db ) as db:\n    # perform SQL statements  Both of these will either open an existing database called pupils.db or create a new one with that name. This means that the information will always be saved to a file, so every time you run your program, all the old data will still be there. If you don't want to create a file, and would instead like to temporarily create a database in RAM, replace the database name with the String  :memory:",
            "title": "Example"
        },
        {
            "location": "/pythonBasics/#defensive-programming",
            "text": "Defensive programming is a way of designing your program, so that it will continue to work, even when unexpected things happen.    Defensive programming should improve:     Quality  by reducing the number of bugs  Readability  making your code more readable, and easier to understand  Reliability  preventing the program from crashing when it receives unexpected inputs   Defensive programming can sometimes go too far - you shouldn't try to prevent errors that can't happen, as this could slow your program down, and make it harder to maintain.    It's also important not to be too vague, otherwise you might miss important errors, that need to be found.",
            "title": "Defensive Programming"
        },
        {
            "location": "/pythonBasics/#styles-of-defensive-programming",
            "text": "There are two primary styles of dealing with potential errors:     EAFP  -  E asier to  A sk for  F orgiveness than  P ermission  LBYL  -  L ook  B efore  Y ou  L eap     Generally,  EAFP  is preferred in Python.",
            "title": "Styles of Defensive Programming"
        },
        {
            "location": "/pythonBasics/#examples-of-defensive-programming",
            "text": "A common place programs can crash is when you expect NUMERIC input, but the user types a STRING:  choice = int(input(  Enter your choice:   ))",
            "title": "Examples of Defensive Programming"
        },
        {
            "location": "/pythonBasics/#eafp",
            "text": "Try to do what you wanted to do, then if it breaks, deal with it:  try:\n    choice = int(input(  Enter your choice:   ))\nexcept ValueError:\n    print(  Invalid number  )  In this example we simply (try to) convert the input into a number - if it fails, we deal with it.  We can then wrap this in a  loop , to make it keep repeating until the data is valid:  while True:\n    try:\n        choice = int(input(  Enter your choice:   ))\n        break\n    except ValueError:\n        print(  Invalid number  )\n        continue",
            "title": "EAFP"
        },
        {
            "location": "/pythonBasics/#lbyl",
            "text": "Check you can do something first, then only do it if it's OK.  choice = input(  Enter your choice:   )\nif choice.isdigit():\n    choice = int(choice)\nelse:\n    print(  Invalid number  )  In this example, we get the input, check it's a number, and then convert it.    We can then wrap this in a  loop , to make it keep repeating until the data is valid:  while True:\n    choice = input(  Enter your choice:   )\n    if choice.isdigit():\n        choice = int(choice)\n        break\n    else:\n        print(  Invalid number  )\n        continue  As can be seen,  EAFP  only catches  ValueErrors , it will still crash if some other error occurs. \nBut that complies with what we said earlier, we don't want to miss strange/important errors. \nAnd, in  LBYL , it doesn't actually deal with any errors, but simply tries to prevent them - less reliable?",
            "title": "LBYL"
        },
        {
            "location": "/pythonBasics/#turtle-basics",
            "text": "To create a turtle, and get it to move, try the following:  # get the library\nimport turtle\nt = turtle.Pen()\n\n# draw a square\nfor loop in range(4):\n    t.forward(100)\n    t.right(90)",
            "title": "Turtle Basics"
        },
        {
            "location": "/pythonBasics/#gui-basics",
            "text": "To create a GUI, and show a label, try the following:  # import the library\nfrom appJar import gui\n\n# create the GUI\napp = gui( Hello )\napp.addLabel( l1 ,  Hello World! )\napp.go()",
            "title": "GUI Basics"
        },
        {
            "location": "/pythonBasics/#colour-map",
            "text": "Below is a useful colour map to use when doing Turtle or GUI programming.",
            "title": "Colour Map"
        },
        {
            "location": "/algorithms/",
            "text": "Algorithms\n\n\n\n\nBelow are ssme comparisons of how to acheive the same thing in a flowchart, pseudocode \n Python.  \n\n\nThis site was originally written using AQA suggested pseudocode, but will be updated to include OCR recomendations.\n\nIt will aso be extended, to include a lot more examples.  \n\n\nComparison\n\n\n\n\n\n\n\n\nTopic\n\n\nFlowChart\n\n\nPseudoCode\n\n\nPython\n\n\n\n\n\n\n\n\n\n\nAssigning a variable\n\n\n\n\na \n 5\n\n\na = 5\n\n\n\n\n\n\nInput\n\n\n\n\na \n USERINPUT\n\n\na = input()\n\n\n\n\n\n\nOutput\n\n\n\n\nOUTPUT a\n\n\nprint(a)\n\n\n\n\n\n\nSubtraction\n\n\n\n\na \n b - c\n\n\na = b - c\n\n\n\n\n\n\nSelection:\nGreater than\n\n\n\n\nIF a \n b THEN\nfuncA()\nELSE\nfuncB()\nENDIF\n\n\nif a \n b:\nfuncA()\nelse:\nfuncB()\n\n\n\n\n\n\nSelection:\nLess than\n\n\n\n\nIF a \n b THEN\nfuncA()\nELSE\nfuncB()\nENDIF\n\n\nif a \n b:\nfuncA()\nelse:\nfuncB()\n\n\n\n\n\n\nSelection:\nEqual to\n\n\n\n\nIF a = b THEN\nfuncA()\nELSE\nfuncB()\nENDIF\n\n\nif a == b:\nfuncA()\nelse:\nfuncB()\n\n\n\n\n\n\nSelection:\nNot equal to\n\n\n\n\nIF a \n b THEN\nfuncA()\nELSE\nfuncB()\nENDIF\n\n\nif a != b:\nfuncA()\nelse:\nfuncB()\n\n\n\n\n\n\nIteration:\nWhile loop\n\n\n\n\nWHILE a \n b\nOUTPUT b\na \n USERINPUT\nENDWHILE\n\n\nwhile a != b:\nprint(b)\na = input()\n\n\n\n\n\n\nIteration:\nFor loop (count-up)\n\n\n\n\nFOR i \n 0 TO 9\nOUTPUT i\nENDFOR\n\n\nfor i in range(10):\nprint(i)\n\n\n\n\n\n\nIteration:\nFor loop (count-down)\n\n\n\n\nFOR i \n 10 TO 1\nOUTPUT i\nENDFOR\n\n\nfor i in range(10, 0, -1):\nprint(i)\n\n\n\n\n\n\n\n\nLinks\n\n\nSome useful Pseudocode links.  \n\n\n\n\nPseudoCode CheatSheet\n\n\nPseudoWars\n\n\nAQA PseudoCode Guidelines",
            "title": "Algorithms"
        },
        {
            "location": "/algorithms/#algorithms",
            "text": "Below are ssme comparisons of how to acheive the same thing in a flowchart, pseudocode   Python.    This site was originally written using AQA suggested pseudocode, but will be updated to include OCR recomendations. \nIt will aso be extended, to include a lot more examples.",
            "title": "Algorithms"
        },
        {
            "location": "/algorithms/#comparison",
            "text": "Topic  FlowChart  PseudoCode  Python      Assigning a variable   a   5  a = 5    Input   a   USERINPUT  a = input()    Output   OUTPUT a  print(a)    Subtraction   a   b - c  a = b - c    Selection: Greater than   IF a   b THEN funcA() ELSE funcB() ENDIF  if a   b: funcA() else: funcB()    Selection: Less than   IF a   b THEN funcA() ELSE funcB() ENDIF  if a   b: funcA() else: funcB()    Selection: Equal to   IF a = b THEN funcA() ELSE funcB() ENDIF  if a == b: funcA() else: funcB()    Selection: Not equal to   IF a   b THEN funcA() ELSE funcB() ENDIF  if a != b: funcA() else: funcB()    Iteration: While loop   WHILE a   b OUTPUT b a   USERINPUT ENDWHILE  while a != b: print(b) a = input()    Iteration: For loop (count-up)   FOR i   0 TO 9 OUTPUT i ENDFOR  for i in range(10): print(i)    Iteration: For loop (count-down)   FOR i   10 TO 1 OUTPUT i ENDFOR  for i in range(10, 0, -1): print(i)",
            "title": "Comparison"
        },
        {
            "location": "/algorithms/#links",
            "text": "Some useful Pseudocode links.     PseudoCode CheatSheet  PseudoWars  AQA PseudoCode Guidelines",
            "title": "Links"
        },
        {
            "location": "/gitGuide/",
            "text": "Git Guide\n\n\n\n\nBelow are some useful commands for using git, GitHub \n PyPI from the command line.  \n\n\nSimple Set-up\n\n\nGit\n provides local version control - allowing you to keep backups of previous versions of your code.  \n\n\nIt's really easy to get started:  \n\n\n\n\ngit init\n - will initialise Git for your current project,  \n\n\ngit add [filename]\n - will queue a new file or changes to an existing file to be saved  \n\n\ngit commit\n - will save the new versions of the files you've added - with a message describing the changes.  \n\n\n\n\nThat's it, you now have full \nversion control\n over your code.\n\nIt works in Windows, OSX or Linux and is supported by most popular IDEs (including Visual Studio).  \n\n\nYou can even take it a step further, by sharing your code on the Web.\n\n\nGitHub\n provides a free place to sink \n share your code.\n\nIt will also allow other people to view \n contribute to your code.  \n\n\nYou first need to \ncreate\n an account on GitHub, and then a new \nrepo\n:  \n\n\n  \n\n\nThen copy your repo's address, and \nadd\n it to your local git account:  \n\n\n\n\ngit remote add origin [web_address]\n - link your local Git repo to a GitHub repo.  \n\n\n\n\nThen, once you've \ncommited\n local changes, you can \npush\n them to GitHub:  \n\n\n\n\ngit push\n - send your local changes to your online GitHub repository.  \n\n\n\n\nSetting Up\n\n\n\n\ngit init\n\nCreates a new local git repository, in the current directory  \n\n\ngit remote add origin [URI]\n\nThis will link your newly created, local repository, with the one specified on GitHub  \n\n\ngit clone [URI]\n\nThis will copy a git repository, from GitHub, to the current directory  \n\n\n\n\nUpdating\n\n\n\n\ngit remote update\n\nThis will update your log of remote changes  \n\n\ngit pull\n\nThis will get any changes from GitHub, and update your local copy  \n\n\n\n\nChecking\n\n\n\n\ngit status\n\nThis will compare your local copy, with the copy on GitHub, and tell you any differences.  \n\n\n\n\nAdding\n\n\n\n\ngit add [file]\n\nAdd a new file to your local repository  \n\n\ngit add .\n\nAdd any changes you've made to your local repository  \n\n\ngit commit -m \"message here\"\n\nCommit anything you've added to your local repository  \n\n\ngit commit -a -m \"message here\"\n\nCombines \nadd\n and \ncommit\n Syncing all changes to your local repository  \n\n\n\n\nUndoing\n\n\n\n\ngit checkout XXX\n\nThis will restore a file to the latest version in Git.  \n\n\n\n\nPushing\n\n\n\n\ngit push\n\nPushes all changes you've added \n committed locally, to GitHub  \n\n\n\n\nBranching \n Merging\n\n\nBranching is useful to allow you to develop a new feature, without affecting the main branch.\n\nThat way, your main branch remains untouched, until you are ready to add in your new feature.\n\nThis is useful, as it means the main branch always matches what is currently released, and it also lets you release emergency fixes on the main branch, without having to include whatever new feature is currently being worked on.  \n\n\n\n\n\n\ngit branch\n\nList all the branches in your repo  \n\n\n\n\n\n\ngit checkout \nbranch\n\nSwitch to the named \nbranch\n  \n\n\n\n\n\n\ngit branch \nbranch\n\nCreate a new branch called \nbranch\n  \n\n\n\n\n\n\ngit checkout -b \nnew-branch\n\nCreate and switch to a \nnew-branch\n  \n\n\n\n\n\n\ngit branch -d \nbranch\n\nDelete the branch called \nbranch\n  \n\n\n\n\n\n\nOnce your branch is complete, ie. you finished your new feature and are ready to add it to your main branch for a new release.\n\nYou simply merge your feature branch back into the main branch.  \n\n\n\n\nFirst you have to checkout the master branch: \ngit checkout master\n followed by a \ngit pull\n to get any missing fixes.  \n\n\nThen, there are two options:  \n\n\nMerge in your feature branch: \ngit merge \nbranch\n  \n\n\nOr pull down your feature branch: \ngit pull origin \nbranch\n  \n\n\n\n\n\n\nOnce you have added your feature branch into the main branch, you then push it all back again: \ngit push\n  \n\n\nYou now have a new version - so you should tag it with a version number  \n\n\n\n\nTagging\n\n\n\n\ngit tag -a vXXX -m \"Tag description\n\n\ngit push origin vXXX\n\nThis tags the current build in git\n\nThen pushes it to GitHub\n\n\n\n\nPyPI\n\n\n\n\npython setup.py register -r pypitest\n\nThis will register the package with PyPI Test  \n\n\npython setup.py sdist upload -r pypitest\n\nThis will upload the stuff to PyPI Test  \n\n\npip install --verbose --index-url https://testpypi.python.org/pypi appJar\n\nThis will attempt to install from the PyPI test server",
            "title": "Git"
        },
        {
            "location": "/gitGuide/#git-guide",
            "text": "Below are some useful commands for using git, GitHub   PyPI from the command line.",
            "title": "Git Guide"
        },
        {
            "location": "/gitGuide/#simple-set-up",
            "text": "Git  provides local version control - allowing you to keep backups of previous versions of your code.    It's really easy to get started:     git init  - will initialise Git for your current project,    git add [filename]  - will queue a new file or changes to an existing file to be saved    git commit  - will save the new versions of the files you've added - with a message describing the changes.     That's it, you now have full  version control  over your code. \nIt works in Windows, OSX or Linux and is supported by most popular IDEs (including Visual Studio).    You can even take it a step further, by sharing your code on the Web.  GitHub  provides a free place to sink   share your code. \nIt will also allow other people to view   contribute to your code.    You first need to  create  an account on GitHub, and then a new  repo :        Then copy your repo's address, and  add  it to your local git account:     git remote add origin [web_address]  - link your local Git repo to a GitHub repo.     Then, once you've  commited  local changes, you can  push  them to GitHub:     git push  - send your local changes to your online GitHub repository.",
            "title": "Simple Set-up"
        },
        {
            "location": "/gitGuide/#setting-up",
            "text": "git init \nCreates a new local git repository, in the current directory    git remote add origin [URI] \nThis will link your newly created, local repository, with the one specified on GitHub    git clone [URI] \nThis will copy a git repository, from GitHub, to the current directory",
            "title": "Setting Up"
        },
        {
            "location": "/gitGuide/#updating",
            "text": "git remote update \nThis will update your log of remote changes    git pull \nThis will get any changes from GitHub, and update your local copy",
            "title": "Updating"
        },
        {
            "location": "/gitGuide/#checking",
            "text": "git status \nThis will compare your local copy, with the copy on GitHub, and tell you any differences.",
            "title": "Checking"
        },
        {
            "location": "/gitGuide/#adding",
            "text": "git add [file] \nAdd a new file to your local repository    git add . \nAdd any changes you've made to your local repository    git commit -m \"message here\" \nCommit anything you've added to your local repository    git commit -a -m \"message here\" \nCombines  add  and  commit  Syncing all changes to your local repository",
            "title": "Adding"
        },
        {
            "location": "/gitGuide/#undoing",
            "text": "git checkout XXX \nThis will restore a file to the latest version in Git.",
            "title": "Undoing"
        },
        {
            "location": "/gitGuide/#pushing",
            "text": "git push \nPushes all changes you've added   committed locally, to GitHub",
            "title": "Pushing"
        },
        {
            "location": "/gitGuide/#branching-merging",
            "text": "Branching is useful to allow you to develop a new feature, without affecting the main branch. \nThat way, your main branch remains untouched, until you are ready to add in your new feature. \nThis is useful, as it means the main branch always matches what is currently released, and it also lets you release emergency fixes on the main branch, without having to include whatever new feature is currently being worked on.      git branch \nList all the branches in your repo      git checkout  branch \nSwitch to the named  branch       git branch  branch \nCreate a new branch called  branch       git checkout -b  new-branch \nCreate and switch to a  new-branch       git branch -d  branch \nDelete the branch called  branch       Once your branch is complete, ie. you finished your new feature and are ready to add it to your main branch for a new release. \nYou simply merge your feature branch back into the main branch.     First you have to checkout the master branch:  git checkout master  followed by a  git pull  to get any missing fixes.    Then, there are two options:    Merge in your feature branch:  git merge  branch     Or pull down your feature branch:  git pull origin  branch       Once you have added your feature branch into the main branch, you then push it all back again:  git push     You now have a new version - so you should tag it with a version number",
            "title": "Branching &amp; Merging"
        },
        {
            "location": "/gitGuide/#tagging",
            "text": "git tag -a vXXX -m \"Tag description  git push origin vXXX \nThis tags the current build in git \nThen pushes it to GitHub",
            "title": "Tagging"
        },
        {
            "location": "/gitGuide/#pypi",
            "text": "python setup.py register -r pypitest \nThis will register the package with PyPI Test    python setup.py sdist upload -r pypitest \nThis will upload the stuff to PyPI Test    pip install --verbose --index-url https://testpypi.python.org/pypi appJar \nThis will attempt to install from the PyPI test server",
            "title": "PyPI"
        },
        {
            "location": "/License/",
            "text": "License\n\n\n\n\nThis project has been a labour of love over the last couple of years.  \n\n\nWhen confronted with the difficulty both pupils and teachers were having creating simple GUIs with Python, I started out trying to put together a few helper functions to make life simpler.  \n\n\nIt's obviously grown a bit since then, and has become fairly functional!  \n\n\nappJar is released under the \nGNU General Public License\n \n\n\nSo, you're free to use it, modify it \n redistribute it, as long as you acknowledge my copyright, and aren't trying to make money out of it...",
            "title": "License"
        },
        {
            "location": "/License/#license",
            "text": "This project has been a labour of love over the last couple of years.    When confronted with the difficulty both pupils and teachers were having creating simple GUIs with Python, I started out trying to put together a few helper functions to make life simpler.    It's obviously grown a bit since then, and has become fairly functional!    appJar is released under the  GNU General Public License    So, you're free to use it, modify it   redistribute it, as long as you acknowledge my copyright, and aren't trying to make money out of it...",
            "title": "License"
        },
        {
            "location": "/Support/",
            "text": "Support\n\n\n\n\nThis is an open source project, freely available on \nGitHub\n\nAny issues/bugs should be raised on the project's \nIssues Page\n\n\nThe code on GitHub will always be the most up-to-date.\n\nIf you want to update your existing code, just replace the \nappjar.py file\n \n\nZip files are available to download from the \nreleases folder\n  \n\n\nFor more immediate help, there (will be) a \nFacebook Page\n where you can get further support.",
            "title": "Support"
        },
        {
            "location": "/Support/#support",
            "text": "This is an open source project, freely available on  GitHub \nAny issues/bugs should be raised on the project's  Issues Page  The code on GitHub will always be the most up-to-date. \nIf you want to update your existing code, just replace the  appjar.py file   \nZip files are available to download from the  releases folder     For more immediate help, there (will be) a  Facebook Page  where you can get further support.",
            "title": "Support"
        },
        {
            "location": "/contributing/",
            "text": "Contributing\n\n\n\n\nWe are always happy to receive additions/updates/fixes to the library - simple submit a Pull Request.  \n\n\nThe key focusses of the project are that we have good, up-to-date documentation and reliable code.  \n\n\nTherefore, in order to add new features, you should be looking to include them in both the documentation and the test suite.  \n\n\nTesting\n\n\n\n\nWe use \nTravis\n and \nCoveralls\n to ensure the code works.\n\nIn order to ensure coverage, every new function that is added should be included in \n/tests/widget_test.py\n\nThere are lots of functions in there that simply add widgets to the test GUI, at a minimum this ensures they are free of basic syntax errors.\n\nIf the widget is interactive or has setters \n getters, then it's useful to include a set followed by a get with an assert:\n\n\napp.addLabel(\nl1\n, \nMessage\n)\nassert app.getLabel(\nl1\n) == \nMessage\n\napp.setLabel(\nl1\n, \nNew Message\n)\nassert app.getLabel(\nl1\n) == \nNew Message\n\napp.clearLabel(\nl1\n)\nassert app.getLabel(\nl1\n) == \n\n\n\n\n\nIf a function call (add/set/clear) were to fail, the test would fail. And if the \nassert\n doesn't match, the test will fail.\n\n\nDocumentation\n\n\n\n\nWe've used \nMkDocs\n hosted on \nGitHub Pages\n to build this site.\n\nThe pages are written in Markdown - there are lots of sites out there giving advice...  \n\n\nThe process is fairly straightforward:  \n\n\n\n\nIdentify the page you need to modify - look at the URL, the folder will be the file name  \n\n\nFind the \n.md\n file in \n/docs/mkdocs/docs\n  \n\n\nAdd the relevant information",
            "title": "Contributing"
        },
        {
            "location": "/contributing/#contributing",
            "text": "We are always happy to receive additions/updates/fixes to the library - simple submit a Pull Request.    The key focusses of the project are that we have good, up-to-date documentation and reliable code.    Therefore, in order to add new features, you should be looking to include them in both the documentation and the test suite.",
            "title": "Contributing"
        },
        {
            "location": "/contributing/#testing",
            "text": "We use  Travis  and  Coveralls  to ensure the code works. \nIn order to ensure coverage, every new function that is added should be included in  /tests/widget_test.py \nThere are lots of functions in there that simply add widgets to the test GUI, at a minimum this ensures they are free of basic syntax errors. \nIf the widget is interactive or has setters   getters, then it's useful to include a set followed by a get with an assert:  app.addLabel( l1 ,  Message )\nassert app.getLabel( l1 ) ==  Message \napp.setLabel( l1 ,  New Message )\nassert app.getLabel( l1 ) ==  New Message \napp.clearLabel( l1 )\nassert app.getLabel( l1 ) ==    If a function call (add/set/clear) were to fail, the test would fail. And if the  assert  doesn't match, the test will fail.",
            "title": "Testing"
        },
        {
            "location": "/contributing/#documentation",
            "text": "We've used  MkDocs  hosted on  GitHub Pages  to build this site. \nThe pages are written in Markdown - there are lots of sites out there giving advice...    The process is fairly straightforward:     Identify the page you need to modify - look at the URL, the folder will be the file name    Find the  .md  file in  /docs/mkdocs/docs     Add the relevant information",
            "title": "Documentation"
        },
        {
            "location": "/Thanks/",
            "text": "Thanks to:\n\n\n\n\nHelpful Resources\n\n\n\n\nhttp://effbot.org/tkinterbook/\n - The GURU of all things tkinter \n Python\n\n\nhttp://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html\n - another great resource\n\n\nhttp://tkinter.unpythonic.net/wiki/FrontPage\n - another good resource\n\n\n\n\nIncorporated Libraries\n\n\n\n\nhttps://github.com/drj11/pypng\n - supplies basic PNG support\n\n\nhttps://bitbucket.org/hokaze/tkinter-png\n - allows PNGs to be treated as PhotoImages\n\n\nhttps://github.com/sullerandras/nanojpeg-python\n - provides BASIC jpeg support\n\n\nhttp://tkinter.unpythonic.net/wiki/ToolTip\n - provides ToolTips\n\n\n\n\nIcons\n\n\n\n\nCredit to www.interactivemania.com for the icons - warning malware...  \n\n\n\n\nDocumentation\n\n\n\n\nhttp://www.mkdocs.org\n - used to generate this documentation\n\n\nhttp://lab.hakim.se/reveal-js/\n - used to generate the slides\n\n\n\n\nDevelopment\n\n\n\n\nhttps://travis-ci.org\n - used to perform i\n monitor unit testing  \n\n\nhttps://coveralls.io\n - used to monitor how good the testing is  \n\n\nhttps://codeclimate.com\n - used to check quality of code",
            "title": "Acknowledgements"
        },
        {
            "location": "/Thanks/#thanks-to",
            "text": "",
            "title": "Thanks to:"
        },
        {
            "location": "/Thanks/#helpful-resources",
            "text": "http://effbot.org/tkinterbook/  - The GURU of all things tkinter   Python  http://infohost.nmt.edu/tcc/help/pubs/tkinter/web/index.html  - another great resource  http://tkinter.unpythonic.net/wiki/FrontPage  - another good resource",
            "title": "Helpful Resources"
        },
        {
            "location": "/Thanks/#incorporated-libraries",
            "text": "https://github.com/drj11/pypng  - supplies basic PNG support  https://bitbucket.org/hokaze/tkinter-png  - allows PNGs to be treated as PhotoImages  https://github.com/sullerandras/nanojpeg-python  - provides BASIC jpeg support  http://tkinter.unpythonic.net/wiki/ToolTip  - provides ToolTips",
            "title": "Incorporated Libraries"
        },
        {
            "location": "/Thanks/#icons",
            "text": "Credit to www.interactivemania.com for the icons - warning malware...",
            "title": "Icons"
        },
        {
            "location": "/Thanks/#documentation",
            "text": "http://www.mkdocs.org  - used to generate this documentation  http://lab.hakim.se/reveal-js/  - used to generate the slides",
            "title": "Documentation"
        },
        {
            "location": "/Thanks/#development",
            "text": "https://travis-ci.org  - used to perform i  monitor unit testing    https://coveralls.io  - used to monitor how good the testing is    https://codeclimate.com  - used to check quality of code",
            "title": "Development"
        }
    ]
}